
Bot Script VR control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00002538  000025cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002538  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000479  00800200  00800200  000025cc  2**0
                  ALLOC
  3 .stab         00001e6c  00000000  00000000  000025cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000645  00000000  00000000  00004438  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  00004a80  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002404  00000000  00000000  00004b20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003e1  00000000  00000000  00006f24  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b55  00000000  00000000  00007305  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000760  00000000  00000000  00007e5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000703  00000000  00000000  000085bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a4d  00000000  00000000  00008cbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a70c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      10:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      14:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__vector_5>
      18:	0c 94 50 02 	jmp	0x4a0	; 0x4a0 <__vector_6>
      1c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      20:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      24:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      28:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      2c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      30:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      34:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      38:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      3c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      40:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      44:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      48:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      4c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      50:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      54:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      58:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      5c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      60:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      64:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      68:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      6c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      70:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      74:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      78:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      7c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      80:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      84:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      88:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      8c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      90:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      94:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      98:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      9c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      ac:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      bc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      cc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      dc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      e0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e8 e3       	ldi	r30, 0x38	; 56
      fc:	f5 e2       	ldi	r31, 0x25	; 37
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a0 30       	cpi	r26, 0x00	; 0
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
     10e:	1b be       	out	0x3b, r1	; 59

00000110 <__do_clear_bss>:
     110:	16 e0       	ldi	r17, 0x06	; 6
     112:	a0 e0       	ldi	r26, 0x00	; 0
     114:	b2 e0       	ldi	r27, 0x02	; 2
     116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
     118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
     11a:	a9 37       	cpi	r26, 0x79	; 121
     11c:	b1 07       	cpc	r27, r17
     11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>
     120:	0e 94 a8 10 	call	0x2150	; 0x2150 <main>
     124:	0c 94 9a 12 	jmp	0x2534	; 0x2534 <_exit>

00000128 <__bad_interrupt>:
     128:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012c <lcd_set_4bit>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     12c:	86 e6       	ldi	r24, 0x66	; 102
     12e:	9e e0       	ldi	r25, 0x0E	; 14
     130:	01 97       	sbiw	r24, 0x01	; 1
     132:	f1 f7       	brne	.-4      	; 0x130 <lcd_set_4bit+0x4>
     134:	00 00       	nop
//Function to Reset LCD
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     136:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     138:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     13a:	80 e3       	ldi	r24, 0x30	; 48
     13c:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     13e:	42 9a       	sbi	0x08, 2	; 8
     140:	ef ef       	ldi	r30, 0xFF	; 255
     142:	f7 e4       	ldi	r31, 0x47	; 71
     144:	31 97       	sbiw	r30, 0x01	; 1
     146:	f1 f7       	brne	.-4      	; 0x144 <lcd_set_4bit+0x18>
     148:	00 c0       	rjmp	.+0      	; 0x14a <lcd_set_4bit+0x1e>
     14a:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     14c:	42 98       	cbi	0x08, 2	; 8
     14e:	e6 e6       	ldi	r30, 0x66	; 102
     150:	fe e0       	ldi	r31, 0x0E	; 14
     152:	31 97       	sbiw	r30, 0x01	; 1
     154:	f1 f7       	brne	.-4      	; 0x152 <lcd_set_4bit+0x26>
     156:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     158:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     15a:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     15c:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     15e:	42 9a       	sbi	0x08, 2	; 8
     160:	ef ef       	ldi	r30, 0xFF	; 255
     162:	f7 e4       	ldi	r31, 0x47	; 71
     164:	31 97       	sbiw	r30, 0x01	; 1
     166:	f1 f7       	brne	.-4      	; 0x164 <lcd_set_4bit+0x38>
     168:	00 c0       	rjmp	.+0      	; 0x16a <lcd_set_4bit+0x3e>
     16a:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     16c:	42 98       	cbi	0x08, 2	; 8
     16e:	e6 e6       	ldi	r30, 0x66	; 102
     170:	fe e0       	ldi	r31, 0x0E	; 14
     172:	31 97       	sbiw	r30, 0x01	; 1
     174:	f1 f7       	brne	.-4      	; 0x172 <lcd_set_4bit+0x46>
     176:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     178:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     17a:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     17c:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     17e:	42 9a       	sbi	0x08, 2	; 8
     180:	8f ef       	ldi	r24, 0xFF	; 255
     182:	97 e4       	ldi	r25, 0x47	; 71
     184:	01 97       	sbiw	r24, 0x01	; 1
     186:	f1 f7       	brne	.-4      	; 0x184 <lcd_set_4bit+0x58>
     188:	00 c0       	rjmp	.+0      	; 0x18a <lcd_set_4bit+0x5e>
     18a:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     18c:	42 98       	cbi	0x08, 2	; 8
     18e:	e6 e6       	ldi	r30, 0x66	; 102
     190:	fe e0       	ldi	r31, 0x0E	; 14
     192:	31 97       	sbiw	r30, 0x01	; 1
     194:	f1 f7       	brne	.-4      	; 0x192 <lcd_set_4bit+0x66>
     196:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     198:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     19a:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     19c:	80 e2       	ldi	r24, 0x20	; 32
     19e:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     1a0:	42 9a       	sbi	0x08, 2	; 8
     1a2:	8f ef       	ldi	r24, 0xFF	; 255
     1a4:	97 e4       	ldi	r25, 0x47	; 71
     1a6:	01 97       	sbiw	r24, 0x01	; 1
     1a8:	f1 f7       	brne	.-4      	; 0x1a6 <lcd_set_4bit+0x7a>
     1aa:	00 c0       	rjmp	.+0      	; 0x1ac <lcd_set_4bit+0x80>
     1ac:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     1ae:	42 98       	cbi	0x08, 2	; 8

	
}
     1b0:	08 95       	ret

000001b2 <lcd_wr_command>:
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
     1b2:	98 b1       	in	r25, 0x08	; 8
     1b4:	9f 70       	andi	r25, 0x0F	; 15
     1b6:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     1b8:	98 b1       	in	r25, 0x08	; 8
//Function to Write Command on LCD
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
     1ba:	28 2f       	mov	r18, r24
     1bc:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
     1be:	92 2b       	or	r25, r18
     1c0:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
     1c2:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     1c4:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     1c6:	42 9a       	sbi	0x08, 2	; 8
     1c8:	ef ef       	ldi	r30, 0xFF	; 255
     1ca:	f7 e4       	ldi	r31, 0x47	; 71
     1cc:	31 97       	sbiw	r30, 0x01	; 1
     1ce:	f1 f7       	brne	.-4      	; 0x1cc <lcd_wr_command+0x1a>
     1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <lcd_wr_command+0x20>
     1d2:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     1d4:	42 98       	cbi	0x08, 2	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
     1d6:	98 b1       	in	r25, 0x08	; 8
     1d8:	9f 70       	andi	r25, 0x0F	; 15
     1da:	98 b9       	out	0x08, r25	; 8
	lcd_port |= cmd;
     1dc:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
     1de:	82 95       	swap	r24
     1e0:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= cmd;
     1e2:	89 2b       	or	r24, r25
     1e4:	88 b9       	out	0x08, r24	; 8
	cbit(lcd_port,RS);
     1e6:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     1e8:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     1ea:	42 9a       	sbi	0x08, 2	; 8
     1ec:	8f ef       	ldi	r24, 0xFF	; 255
     1ee:	97 e4       	ldi	r25, 0x47	; 71
     1f0:	01 97       	sbiw	r24, 0x01	; 1
     1f2:	f1 f7       	brne	.-4      	; 0x1f0 <lcd_wr_command+0x3e>
     1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <lcd_wr_command+0x44>
     1f6:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     1f8:	42 98       	cbi	0x08, 2	; 8
}
     1fa:	08 95       	ret

000001fc <lcd_init>:
}

//Function to Initialize LCD
void lcd_init()
{
	lcd_set_4bit();
     1fc:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_set_4bit>
     200:	86 e6       	ldi	r24, 0x66	; 102
     202:	9e e0       	ldi	r25, 0x0E	; 14
     204:	01 97       	sbiw	r24, 0x01	; 1
     206:	f1 f7       	brne	.-4      	; 0x204 <lcd_init+0x8>
     208:	00 00       	nop
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     20a:	88 e2       	ldi	r24, 0x28	; 40
     20c:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_wr_command>
	lcd_wr_command(0x01);
     210:	81 e0       	ldi	r24, 0x01	; 1
     212:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_wr_command>
	lcd_wr_command(0x06);
     216:	86 e0       	ldi	r24, 0x06	; 6
     218:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_wr_command>
	lcd_wr_command(0x0E);
     21c:	8e e0       	ldi	r24, 0x0E	; 14
     21e:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_wr_command>
	lcd_wr_command(0x80);
     222:	80 e8       	ldi	r24, 0x80	; 128
     224:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_wr_command>
		
}
     228:	08 95       	ret

0000022a <lcd_wr_char>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
     22a:	98 b1       	in	r25, 0x08	; 8
     22c:	9f 70       	andi	r25, 0x0F	; 15
     22e:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     230:	98 b1       	in	r25, 0x08	; 8
//Function to Write Data on LCD
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
     232:	28 2f       	mov	r18, r24
     234:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
     236:	92 2b       	or	r25, r18
     238:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
     23a:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     23c:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     23e:	42 9a       	sbi	0x08, 2	; 8
     240:	ef ef       	ldi	r30, 0xFF	; 255
     242:	f7 e4       	ldi	r31, 0x47	; 71
     244:	31 97       	sbiw	r30, 0x01	; 1
     246:	f1 f7       	brne	.-4      	; 0x244 <lcd_wr_char+0x1a>
     248:	00 c0       	rjmp	.+0      	; 0x24a <lcd_wr_char+0x20>
     24a:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     24c:	42 98       	cbi	0x08, 2	; 8

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
     24e:	98 b1       	in	r25, 0x08	; 8
     250:	9f 70       	andi	r25, 0x0F	; 15
     252:	98 b9       	out	0x08, r25	; 8
	lcd_port |= letter;
     254:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);

	letter = letter & 0x0F;
	letter = letter<<4;
     256:	82 95       	swap	r24
     258:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= letter;
     25a:	89 2b       	or	r24, r25
     25c:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,RS);
     25e:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     260:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     262:	42 9a       	sbi	0x08, 2	; 8
     264:	8f ef       	ldi	r24, 0xFF	; 255
     266:	97 e4       	ldi	r25, 0x47	; 71
     268:	01 97       	sbiw	r24, 0x01	; 1
     26a:	f1 f7       	brne	.-4      	; 0x268 <lcd_wr_char+0x3e>
     26c:	00 c0       	rjmp	.+0      	; 0x26e <lcd_wr_char+0x44>
     26e:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     270:	42 98       	cbi	0x08, 2	; 8
}
     272:	08 95       	ret

00000274 <lcd_home>:


//Function to bring cursor at home position
void lcd_home()
{
	lcd_wr_command(0x80);
     274:	80 e8       	ldi	r24, 0x80	; 128
     276:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_wr_command>
}
     27a:	08 95       	ret

0000027c <lcd_string>:


//Function to Print String on LCD
void lcd_string(char *str)
{
     27c:	cf 93       	push	r28
     27e:	df 93       	push	r29
     280:	ec 01       	movw	r28, r24
	while(*str != '\0')
     282:	88 81       	ld	r24, Y
     284:	88 23       	and	r24, r24
     286:	31 f0       	breq	.+12     	; 0x294 <lcd_string+0x18>
	lcd_wr_command(0x80);
}


//Function to Print String on LCD
void lcd_string(char *str)
     288:	21 96       	adiw	r28, 0x01	; 1
{
	while(*str != '\0')
	{
		lcd_wr_char(*str);
     28a:	0e 94 15 01 	call	0x22a	; 0x22a <lcd_wr_char>


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
     28e:	89 91       	ld	r24, Y+
     290:	88 23       	and	r24, r24
     292:	d9 f7       	brne	.-10     	; 0x28a <lcd_string+0xe>
	{
		lcd_wr_char(*str);
		str++;
	}
}
     294:	df 91       	pop	r29
     296:	cf 91       	pop	r28
     298:	08 95       	ret

0000029a <lcd_cursor>:

//Position the LCD cursor at "row", "column".

void lcd_cursor (char row, char column)
{
	switch (row) {
     29a:	82 30       	cpi	r24, 0x02	; 2
     29c:	79 f0       	breq	.+30     	; 0x2bc <lcd_cursor+0x22>
     29e:	83 30       	cpi	r24, 0x03	; 3
     2a0:	18 f4       	brcc	.+6      	; 0x2a8 <lcd_cursor+0xe>
     2a2:	81 30       	cpi	r24, 0x01	; 1
     2a4:	c9 f4       	brne	.+50     	; 0x2d8 <lcd_cursor+0x3e>
     2a6:	05 c0       	rjmp	.+10     	; 0x2b2 <lcd_cursor+0x18>
     2a8:	83 30       	cpi	r24, 0x03	; 3
     2aa:	69 f0       	breq	.+26     	; 0x2c6 <lcd_cursor+0x2c>
     2ac:	84 30       	cpi	r24, 0x04	; 4
     2ae:	a1 f4       	brne	.+40     	; 0x2d8 <lcd_cursor+0x3e>
     2b0:	0f c0       	rjmp	.+30     	; 0x2d0 <lcd_cursor+0x36>
		case 1: lcd_wr_command (0x80 + column - 1); break;
     2b2:	86 2f       	mov	r24, r22
     2b4:	81 58       	subi	r24, 0x81	; 129
     2b6:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_wr_command>
     2ba:	08 95       	ret
		case 2: lcd_wr_command (0xc0 + column - 1); break;
     2bc:	86 2f       	mov	r24, r22
     2be:	81 54       	subi	r24, 0x41	; 65
     2c0:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_wr_command>
     2c4:	08 95       	ret
		case 3: lcd_wr_command (0x94 + column - 1); break;
     2c6:	86 2f       	mov	r24, r22
     2c8:	8d 56       	subi	r24, 0x6D	; 109
     2ca:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_wr_command>
     2ce:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
     2d0:	86 2f       	mov	r24, r22
     2d2:	8d 52       	subi	r24, 0x2D	; 45
     2d4:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_wr_command>
     2d8:	08 95       	ret

000002da <lcd_print>:
	}
}

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
     2da:	0f 93       	push	r16
     2dc:	1f 93       	push	r17
     2de:	cf 93       	push	r28
     2e0:	df 93       	push	r29
     2e2:	8a 01       	movw	r16, r20
     2e4:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
     2e6:	88 23       	and	r24, r24
     2e8:	11 f0       	breq	.+4      	; 0x2ee <lcd_print+0x14>
     2ea:	66 23       	and	r22, r22
     2ec:	19 f4       	brne	.+6      	; 0x2f4 <lcd_print+0x1a>
	{
		lcd_home();
     2ee:	0e 94 3a 01 	call	0x274	; 0x274 <lcd_home>
     2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
     2f4:	0e 94 4d 01 	call	0x29a	; 0x29a <lcd_cursor>
	}
	if(digits==5 || flag==1)
     2f8:	c5 30       	cpi	r28, 0x05	; 5
     2fa:	d1 05       	cpc	r29, r1
     2fc:	71 f4       	brne	.+28     	; 0x31a <lcd_print+0x40>
	{
		million=value/10000+48;
     2fe:	c8 01       	movw	r24, r16
     300:	60 e1       	ldi	r22, 0x10	; 16
     302:	77 e2       	ldi	r23, 0x27	; 39
     304:	0e 94 86 12 	call	0x250c	; 0x250c <__udivmodhi4>
     308:	cb 01       	movw	r24, r22
     30a:	c0 96       	adiw	r24, 0x30	; 48
     30c:	90 93 7b 02 	sts	0x027B, r25
     310:	80 93 7a 02 	sts	0x027A, r24
		lcd_wr_char(million);
     314:	0e 94 15 01 	call	0x22a	; 0x22a <lcd_wr_char>
     318:	03 c0       	rjmp	.+6      	; 0x320 <lcd_print+0x46>
		flag=1;
	}
	if(digits==4 || flag==1)
     31a:	c4 30       	cpi	r28, 0x04	; 4
     31c:	d1 05       	cpc	r29, r1
     31e:	b9 f4       	brne	.+46     	; 0x34e <lcd_print+0x74>
	{
		temp = value/1000;
     320:	c8 01       	movw	r24, r16
     322:	68 ee       	ldi	r22, 0xE8	; 232
     324:	73 e0       	ldi	r23, 0x03	; 3
     326:	0e 94 86 12 	call	0x250c	; 0x250c <__udivmodhi4>
     32a:	cb 01       	movw	r24, r22
     32c:	70 93 7d 02 	sts	0x027D, r23
     330:	60 93 7c 02 	sts	0x027C, r22
		thousand = temp%10 + 48;
     334:	6a e0       	ldi	r22, 0x0A	; 10
     336:	70 e0       	ldi	r23, 0x00	; 0
     338:	0e 94 86 12 	call	0x250c	; 0x250c <__udivmodhi4>
     33c:	c0 96       	adiw	r24, 0x30	; 48
     33e:	90 93 6c 06 	sts	0x066C, r25
     342:	80 93 6b 06 	sts	0x066B, r24
		lcd_wr_char(thousand);
     346:	0e 94 15 01 	call	0x22a	; 0x22a <lcd_wr_char>
		flag=1;
     34a:	81 e0       	ldi	r24, 0x01	; 1
     34c:	01 c0       	rjmp	.+2      	; 0x350 <lcd_print+0x76>
}

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
	unsigned char flag=0;
     34e:	80 e0       	ldi	r24, 0x00	; 0
		temp = value/1000;
		thousand = temp%10 + 48;
		lcd_wr_char(thousand);
		flag=1;
	}
	if(digits==3 || flag==1)
     350:	c3 30       	cpi	r28, 0x03	; 3
     352:	d1 05       	cpc	r29, r1
     354:	11 f0       	breq	.+4      	; 0x35a <lcd_print+0x80>
     356:	81 30       	cpi	r24, 0x01	; 1
     358:	b1 f4       	brne	.+44     	; 0x386 <lcd_print+0xac>
	{
		temp = value/100;
     35a:	c8 01       	movw	r24, r16
     35c:	64 e6       	ldi	r22, 0x64	; 100
     35e:	70 e0       	ldi	r23, 0x00	; 0
     360:	0e 94 86 12 	call	0x250c	; 0x250c <__udivmodhi4>
     364:	cb 01       	movw	r24, r22
     366:	70 93 7d 02 	sts	0x027D, r23
     36a:	60 93 7c 02 	sts	0x027C, r22
		hundred = temp%10 + 48;
     36e:	6a e0       	ldi	r22, 0x0A	; 10
     370:	70 e0       	ldi	r23, 0x00	; 0
     372:	0e 94 86 12 	call	0x250c	; 0x250c <__udivmodhi4>
     376:	c0 96       	adiw	r24, 0x30	; 48
     378:	90 93 66 06 	sts	0x0666, r25
     37c:	80 93 65 06 	sts	0x0665, r24
		lcd_wr_char(hundred);
     380:	0e 94 15 01 	call	0x22a	; 0x22a <lcd_wr_char>
		flag=1;
     384:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==2 || flag==1)
     386:	c2 30       	cpi	r28, 0x02	; 2
     388:	d1 05       	cpc	r29, r1
     38a:	11 f0       	breq	.+4      	; 0x390 <lcd_print+0xb6>
     38c:	81 30       	cpi	r24, 0x01	; 1
     38e:	b1 f4       	brne	.+44     	; 0x3bc <lcd_print+0xe2>
	{
		temp = value/10;
     390:	2a e0       	ldi	r18, 0x0A	; 10
     392:	30 e0       	ldi	r19, 0x00	; 0
     394:	c8 01       	movw	r24, r16
     396:	b9 01       	movw	r22, r18
     398:	0e 94 86 12 	call	0x250c	; 0x250c <__udivmodhi4>
     39c:	cb 01       	movw	r24, r22
     39e:	70 93 7d 02 	sts	0x027D, r23
     3a2:	60 93 7c 02 	sts	0x027C, r22
		tens = temp%10 + 48;
     3a6:	b9 01       	movw	r22, r18
     3a8:	0e 94 86 12 	call	0x250c	; 0x250c <__udivmodhi4>
     3ac:	c0 96       	adiw	r24, 0x30	; 48
     3ae:	90 93 88 02 	sts	0x0288, r25
     3b2:	80 93 87 02 	sts	0x0287, r24
		lcd_wr_char(tens);
     3b6:	0e 94 15 01 	call	0x22a	; 0x22a <lcd_wr_char>
		flag=1;
     3ba:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==1 || flag==1)
     3bc:	c1 30       	cpi	r28, 0x01	; 1
     3be:	d1 05       	cpc	r29, r1
     3c0:	11 f0       	breq	.+4      	; 0x3c6 <lcd_print+0xec>
     3c2:	81 30       	cpi	r24, 0x01	; 1
     3c4:	61 f4       	brne	.+24     	; 0x3de <lcd_print+0x104>
	{
		unit = value%10 + 48;
     3c6:	c8 01       	movw	r24, r16
     3c8:	6a e0       	ldi	r22, 0x0A	; 10
     3ca:	70 e0       	ldi	r23, 0x00	; 0
     3cc:	0e 94 86 12 	call	0x250c	; 0x250c <__udivmodhi4>
     3d0:	c0 96       	adiw	r24, 0x30	; 48
     3d2:	90 93 6a 06 	sts	0x066A, r25
     3d6:	80 93 69 06 	sts	0x0669, r24
		lcd_wr_char(unit);
     3da:	0e 94 15 01 	call	0x22a	; 0x22a <lcd_wr_char>
	}
	if(digits>5)
     3de:	c6 30       	cpi	r28, 0x06	; 6
     3e0:	d1 05       	cpc	r29, r1
     3e2:	1c f0       	brlt	.+6      	; 0x3ea <lcd_print+0x110>
	{
		lcd_wr_char('E');
     3e4:	85 e4       	ldi	r24, 0x45	; 69
     3e6:	0e 94 15 01 	call	0x22a	; 0x22a <lcd_wr_char>
	}
	
}
     3ea:	df 91       	pop	r29
     3ec:	cf 91       	pop	r28
     3ee:	1f 91       	pop	r17
     3f0:	0f 91       	pop	r16
     3f2:	08 95       	ret

000003f4 <motion_pin_config>:
 * Description: Enables the pin controlling motors
 * Example Call: motion_pin_config()
 */
void motion_pin_config (void)
{
    DDRA = DDRA | 0x0F;
     3f4:	81 b1       	in	r24, 0x01	; 1
     3f6:	8f 60       	ori	r24, 0x0F	; 15
     3f8:	81 b9       	out	0x01, r24	; 1
    PORTA = PORTA & 0xF0;
     3fa:	82 b1       	in	r24, 0x02	; 2
     3fc:	80 7f       	andi	r24, 0xF0	; 240
     3fe:	82 b9       	out	0x02, r24	; 2
    DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
     400:	ea e0       	ldi	r30, 0x0A	; 10
     402:	f1 e0       	ldi	r31, 0x01	; 1
     404:	80 81       	ld	r24, Z
     406:	88 61       	ori	r24, 0x18	; 24
     408:	80 83       	st	Z, r24
    PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
     40a:	eb e0       	ldi	r30, 0x0B	; 11
     40c:	f1 e0       	ldi	r31, 0x01	; 1
     40e:	80 81       	ld	r24, Z
     410:	88 61       	ori	r24, 0x18	; 24
     412:	80 83       	st	Z, r24
}
     414:	08 95       	ret

00000416 <buzzer_pin_config>:
 * Description: Enable buzzer pin
 * Example Call: buzzer_pin_config()
 */
void buzzer_pin_config (void)
{
    DDRC = DDRC | 0x08;        //Setting PORTC 3 as output
     416:	3b 9a       	sbi	0x07, 3	; 7
    PORTC = PORTC & 0xF7;        //Setting PORTC 3 logic low to turnoff buzzer
     418:	43 98       	cbi	0x08, 3	; 8
}
     41a:	08 95       	ret

0000041c <lcd_port_config>:
 * Description: Enables lcd pins
 * Example Call: lcd_port_config()
 */
void lcd_port_config (void)
{
    DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
     41c:	87 b1       	in	r24, 0x07	; 7
     41e:	87 6f       	ori	r24, 0xF7	; 247
     420:	87 b9       	out	0x07, r24	; 7
    PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
     422:	88 b1       	in	r24, 0x08	; 8
     424:	80 78       	andi	r24, 0x80	; 128
     426:	88 b9       	out	0x08, r24	; 8
}
     428:	08 95       	ret

0000042a <servo1_pin_config>:
 * Description: Configure PORTB 5 pin for servo motor 1 operation
 * Example Call: servo1_pin_config()
 */
void servo1_pin_config (void)
{
    DDRB  = DDRB | 0x20;  //making PORTB 5 pin output
     42a:	25 9a       	sbi	0x04, 5	; 4
    PORTB = PORTB | 0x20; //setting PORTB 5 pin to logic 1
     42c:	2d 9a       	sbi	0x05, 5	; 5
}
     42e:	08 95       	ret

00000430 <servo2_pin_config>:
 * Description: Configure PORTB 6 pin for servo motor 2 operation
 * Example Call: servo2_pin_config()
 */
void servo2_pin_config (void)
{
    DDRB  = DDRB | 0x40;  //making PORTB 6 pin output
     430:	26 9a       	sbi	0x04, 6	; 4
    PORTB = PORTB | 0x40; //setting PORTB 6 pin to logic 1
     432:	2e 9a       	sbi	0x05, 6	; 5
}
     434:	08 95       	ret

00000436 <servo3_pin_config>:
 * Description: Configure PORTB 7 pin for servo motor 3 operation
 * Example Call: servo3_pin_config()
 */
void servo3_pin_config (void)
{
    DDRB  = DDRB | 0x80;  //making PORTB 7 pin output
     436:	27 9a       	sbi	0x04, 7	; 4
    PORTB = PORTB | 0x80; //setting PORTB 7 pin to logic 1
     438:	2f 9a       	sbi	0x05, 7	; 5
}
     43a:	08 95       	ret

0000043c <left_encoder_pin_config>:
 * Description: Enables left motor position encoder pins
 * Example Call: left_encoder_pin_config ()
 */
void left_encoder_pin_config (void)
{
    DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input //0b11101111
     43c:	6c 98       	cbi	0x0d, 4	; 13
    PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin//0b00010000
     43e:	74 9a       	sbi	0x0e, 4	; 14
}
     440:	08 95       	ret

00000442 <right_encoder_pin_config>:
 * Description: Enables right motor position encoder pins
 * Example Call: right_encoder_pin_config ()
 */
void right_encoder_pin_config (void)
{
    DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input //0b10111111
     442:	6d 98       	cbi	0x0d, 5	; 13
    PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
     444:	75 9a       	sbi	0x0e, 5	; 14
}
     446:	08 95       	ret

00000448 <adc_pin_config>:
 * Description: Enables adc pins of atmega2560
 * Example Call: adc_pin_config()
 */
void adc_pin_config (void)
{
    DDRF = 0x00;
     448:	10 ba       	out	0x10, r1	; 16
    PORTF = 0x00;
     44a:	11 ba       	out	0x11, r1	; 17
    DDRK = 0x00;
     44c:	10 92 07 01 	sts	0x0107, r1
    PORTK = 0x00;
     450:	10 92 08 01 	sts	0x0108, r1
}
     454:	08 95       	ret

00000456 <port_init>:

void port_init()
{
    motion_pin_config(); //robot motion pins config
     456:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <motion_pin_config>
    adc_pin_config(); //adc pins config
     45a:	0e 94 24 02 	call	0x448	; 0x448 <adc_pin_config>
    left_encoder_pin_config(); //left encoder pin config
     45e:	0e 94 1e 02 	call	0x43c	; 0x43c <left_encoder_pin_config>
    right_encoder_pin_config(); //right encoder pin config
     462:	0e 94 21 02 	call	0x442	; 0x442 <right_encoder_pin_config>
    lcd_port_config (); //lcd pins config
     466:	0e 94 0e 02 	call	0x41c	; 0x41c <lcd_port_config>
    servo3_pin_config();   //servo 3 pins config
     46a:	0e 94 1b 02 	call	0x436	; 0x436 <servo3_pin_config>
    servo2_pin_config();   //servo 2 pins config
     46e:	0e 94 18 02 	call	0x430	; 0x430 <servo2_pin_config>
    servo1_pin_config();   //servo 1 pins config
     472:	0e 94 15 02 	call	0x42a	; 0x42a <servo1_pin_config>
    buzzer_pin_config(); //buzzer pins config
     476:	0e 94 0b 02 	call	0x416	; 0x416 <buzzer_pin_config>
}
     47a:	08 95       	ret

0000047c <left_position_encoder_interrupt_init>:
 * Description: Initializes left motor position encoders
 * Example Call: left_position_encoder_interrupt_init()
 */
void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
{
    cli(); //Clears the global interrupt
     47c:	f8 94       	cli
    EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
     47e:	ea e6       	ldi	r30, 0x6A	; 106
     480:	f0 e0       	ldi	r31, 0x00	; 0
     482:	80 81       	ld	r24, Z
     484:	82 60       	ori	r24, 0x02	; 2
     486:	80 83       	st	Z, r24
    EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
     488:	ec 9a       	sbi	0x1d, 4	; 29
    sei();   // Enables the global interrupt
     48a:	78 94       	sei
}
     48c:	08 95       	ret

0000048e <right_position_encoder_interrupt_init>:
 * Description: Initializes right motor position encoders
 * Example Call: right_position_encoder_interrupt_init()
 */
void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
{
    cli(); //Clears the global interrupt
     48e:	f8 94       	cli
    EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
     490:	ea e6       	ldi	r30, 0x6A	; 106
     492:	f0 e0       	ldi	r31, 0x00	; 0
     494:	80 81       	ld	r24, Z
     496:	88 60       	ori	r24, 0x08	; 8
     498:	80 83       	st	Z, r24
    EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
     49a:	ed 9a       	sbi	0x1d, 5	; 29
    sei();   // Enables the global interrupt
     49c:	78 94       	sei
}
     49e:	08 95       	ret

000004a0 <__vector_6>:

//ISR for right position encoder
ISR(INT5_vect)
{
     4a0:	1f 92       	push	r1
     4a2:	0f 92       	push	r0
     4a4:	0f b6       	in	r0, 0x3f	; 63
     4a6:	0f 92       	push	r0
     4a8:	11 24       	eor	r1, r1
     4aa:	8f 93       	push	r24
     4ac:	9f 93       	push	r25
     4ae:	af 93       	push	r26
     4b0:	bf 93       	push	r27
    ShaftCountRight++;  //increment right shaft position count
     4b2:	80 91 0c 02 	lds	r24, 0x020C
     4b6:	90 91 0d 02 	lds	r25, 0x020D
     4ba:	a0 91 0e 02 	lds	r26, 0x020E
     4be:	b0 91 0f 02 	lds	r27, 0x020F
     4c2:	01 96       	adiw	r24, 0x01	; 1
     4c4:	a1 1d       	adc	r26, r1
     4c6:	b1 1d       	adc	r27, r1
     4c8:	80 93 0c 02 	sts	0x020C, r24
     4cc:	90 93 0d 02 	sts	0x020D, r25
     4d0:	a0 93 0e 02 	sts	0x020E, r26
     4d4:	b0 93 0f 02 	sts	0x020F, r27
}
     4d8:	bf 91       	pop	r27
     4da:	af 91       	pop	r26
     4dc:	9f 91       	pop	r25
     4de:	8f 91       	pop	r24
     4e0:	0f 90       	pop	r0
     4e2:	0f be       	out	0x3f, r0	; 63
     4e4:	0f 90       	pop	r0
     4e6:	1f 90       	pop	r1
     4e8:	18 95       	reti

000004ea <__vector_5>:
//ISR for left position encoder
ISR(INT4_vect)
{
     4ea:	1f 92       	push	r1
     4ec:	0f 92       	push	r0
     4ee:	0f b6       	in	r0, 0x3f	; 63
     4f0:	0f 92       	push	r0
     4f2:	11 24       	eor	r1, r1
     4f4:	8f 93       	push	r24
     4f6:	9f 93       	push	r25
     4f8:	af 93       	push	r26
     4fa:	bf 93       	push	r27
    ShaftCountLeft++;  //increment left shaft position count
     4fc:	80 91 10 02 	lds	r24, 0x0210
     500:	90 91 11 02 	lds	r25, 0x0211
     504:	a0 91 12 02 	lds	r26, 0x0212
     508:	b0 91 13 02 	lds	r27, 0x0213
     50c:	01 96       	adiw	r24, 0x01	; 1
     50e:	a1 1d       	adc	r26, r1
     510:	b1 1d       	adc	r27, r1
     512:	80 93 10 02 	sts	0x0210, r24
     516:	90 93 11 02 	sts	0x0211, r25
     51a:	a0 93 12 02 	sts	0x0212, r26
     51e:	b0 93 13 02 	sts	0x0213, r27
}
     522:	bf 91       	pop	r27
     524:	af 91       	pop	r26
     526:	9f 91       	pop	r25
     528:	8f 91       	pop	r24
     52a:	0f 90       	pop	r0
     52c:	0f be       	out	0x3f, r0	; 63
     52e:	0f 90       	pop	r0
     530:	1f 90       	pop	r1
     532:	18 95       	reti

00000534 <motion_set>:
void motion_set (unsigned char Direction)
{
    unsigned char PortARestore = 0;

    Direction &= 0x0F;         // removing upper nibbel for the protection
    PortARestore = PORTA;         // reading the PORTA original status
     534:	92 b1       	in	r25, 0x02	; 2
    PortARestore &= 0xF0;         // making lower direction nibbel to 0
     536:	90 7f       	andi	r25, 0xF0	; 240
*/
void motion_set (unsigned char Direction)
{
    unsigned char PortARestore = 0;

    Direction &= 0x0F;         // removing upper nibbel for the protection
     538:	8f 70       	andi	r24, 0x0F	; 15
    PortARestore = PORTA;         // reading the PORTA original status
    PortARestore &= 0xF0;         // making lower direction nibbel to 0
    PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     53a:	98 2b       	or	r25, r24
    PORTA = PortARestore;         // executing the command
     53c:	92 b9       	out	0x02, r25	; 2
}
     53e:	08 95       	ret

00000540 <forward>:
 * Logic: make left and right motor red wire pins high (0110) 
 * Example Call: forward()
 */
void forward (void) 
{
    motion_set(0x06);
     540:	86 e0       	ldi	r24, 0x06	; 6
     542:	0e 94 9a 02 	call	0x534	; 0x534 <motion_set>
} 
     546:	08 95       	ret

00000548 <left_>:
 * Logic: make left motor red wire pin 0 and right motor red wire pin 1 (0101) 
 * Example Call: left_()
 */
void left_ (void)
{
    motion_set(0x05);
     548:	85 e0       	ldi	r24, 0x05	; 5
     54a:	0e 94 9a 02 	call	0x534	; 0x534 <motion_set>
}
     54e:	08 95       	ret

00000550 <right_>:
 * Logic: make right motor red wire pin 0 and left motor red wire pin 1 (1010) 
 * Example Call: right_()
 */
void right_ (void) 
{
    motion_set(0x0A);
     550:	8a e0       	ldi	r24, 0x0A	; 10
     552:	0e 94 9a 02 	call	0x534	; 0x534 <motion_set>
}
     556:	08 95       	ret

00000558 <soft_left>:
 * Logic: make right motor red wire pin 1 and left motor red wire pin 0 
 * Example Call: soft_left()
 */
void soft_left (void) 
{
    motion_set(0x04);
     558:	84 e0       	ldi	r24, 0x04	; 4
     55a:	0e 94 9a 02 	call	0x534	; 0x534 <motion_set>
}
     55e:	08 95       	ret

00000560 <soft_right>:
 * Logic: make right motor red wire pin 0 and left motor red wire pin 1 (1010) 
 * Example Call: soft_right()
 */
void soft_right (void) 
{
    motion_set(0x02);
     560:	82 e0       	ldi	r24, 0x02	; 2
     562:	0e 94 9a 02 	call	0x534	; 0x534 <motion_set>
}
     566:	08 95       	ret

00000568 <stop>:
 * Logic: 0000 
 * Example Call: stop()
 */
void stop (void)
{
    motion_set(0x00);
     568:	80 e0       	ldi	r24, 0x00	; 0
     56a:	0e 94 9a 02 	call	0x534	; 0x534 <motion_set>
}
     56e:	08 95       	ret

00000570 <back>:
void back (void) //both wheels backward
{
	motion_set(0x09);
     570:	89 e0       	ldi	r24, 0x09	; 9
     572:	0e 94 9a 02 	call	0x534	; 0x534 <motion_set>
}
     576:	08 95       	ret

00000578 <angle_rotate>:
 * Output: rotate the bot by specific angle
 * Example Call: angle_rotate(70)
 */

void angle_rotate(unsigned int Degrees)
{
     578:	0f 93       	push	r16
     57a:	1f 93       	push	r17
     57c:	cf 93       	push	r28
    float ReqdShaftCount = 0;
    unsigned long int ReqdShaftCountInt = 0;

    ReqdShaftCount = (float) Degrees/ 4.090; // division by resolution to get shaft count
     57e:	bc 01       	movw	r22, r24
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <__floatunsisf>
     588:	28 e4       	ldi	r18, 0x48	; 72
     58a:	31 ee       	ldi	r19, 0xE1	; 225
     58c:	42 e8       	ldi	r20, 0x82	; 130
     58e:	50 e4       	ldi	r21, 0x40	; 64
     590:	0e 94 40 11 	call	0x2280	; 0x2280 <__divsf3>
    ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
     594:	0e 94 a8 11 	call	0x2350	; 0x2350 <__fixunssfsi>
     598:	dc 01       	movw	r26, r24
     59a:	cb 01       	movw	r24, r22
     59c:	a0 e0       	ldi	r26, 0x00	; 0
     59e:	b0 e0       	ldi	r27, 0x00	; 0
    ShaftCountRight = 0;
     5a0:	10 92 0c 02 	sts	0x020C, r1
     5a4:	10 92 0d 02 	sts	0x020D, r1
     5a8:	10 92 0e 02 	sts	0x020E, r1
     5ac:	10 92 0f 02 	sts	0x020F, r1
    ShaftCountLeft = 0;
     5b0:	10 92 10 02 	sts	0x0210, r1
     5b4:	10 92 11 02 	sts	0x0211, r1
     5b8:	10 92 12 02 	sts	0x0212, r1
     5bc:	10 92 13 02 	sts	0x0213, r1

    while (1)
    {
        if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
     5c0:	f1 e0       	ldi	r31, 0x01	; 1
     5c2:	c0 e0       	ldi	r28, 0x00	; 0
     5c4:	40 91 0c 02 	lds	r20, 0x020C
     5c8:	50 91 0d 02 	lds	r21, 0x020D
     5cc:	60 91 0e 02 	lds	r22, 0x020E
     5d0:	70 91 0f 02 	lds	r23, 0x020F
     5d4:	00 91 10 02 	lds	r16, 0x0210
     5d8:	10 91 11 02 	lds	r17, 0x0211
     5dc:	20 91 12 02 	lds	r18, 0x0212
     5e0:	30 91 13 02 	lds	r19, 0x0213
     5e4:	ef 2f       	mov	r30, r31
     5e6:	48 17       	cp	r20, r24
     5e8:	59 07       	cpc	r21, r25
     5ea:	6a 07       	cpc	r22, r26
     5ec:	7b 07       	cpc	r23, r27
     5ee:	08 f4       	brcc	.+2      	; 0x5f2 <angle_rotate+0x7a>
     5f0:	ec 2f       	mov	r30, r28
     5f2:	ee 23       	and	r30, r30
     5f4:	49 f4       	brne	.+18     	; 0x608 <angle_rotate+0x90>
     5f6:	4f 2f       	mov	r20, r31
     5f8:	08 17       	cp	r16, r24
     5fa:	19 07       	cpc	r17, r25
     5fc:	2a 07       	cpc	r18, r26
     5fe:	3b 07       	cpc	r19, r27
     600:	08 f4       	brcc	.+2      	; 0x604 <angle_rotate+0x8c>
     602:	4c 2f       	mov	r20, r28
     604:	44 23       	and	r20, r20
     606:	f1 f2       	breq	.-68     	; 0x5c4 <angle_rotate+0x4c>
        break;
    }
    stop(); //Stop robot
     608:	0e 94 b4 02 	call	0x568	; 0x568 <stop>
}
     60c:	cf 91       	pop	r28
     60e:	1f 91       	pop	r17
     610:	0f 91       	pop	r16
     612:	08 95       	ret

00000614 <soft_right_degree>:
 * Output: rotate the bot by specific angle in soft_right direction
 * Logic: first turn soft_right and then move the required degree
 * Example Call: soft_right_degree(70)
 */
void soft_right_degree(unsigned int Degrees)
{
     614:	cf 93       	push	r28
     616:	df 93       	push	r29
     618:	ec 01       	movw	r28, r24
    //176 pulses for 360 degree rotation 2.045 per count
    soft_right();
     61a:	0e 94 b0 02 	call	0x560	; 0x560 <soft_right>
    Degrees=Degrees*2;
    angle_rotate(Degrees);
     61e:	ce 01       	movw	r24, r28
     620:	88 0f       	add	r24, r24
     622:	99 1f       	adc	r25, r25
     624:	0e 94 bc 02 	call	0x578	; 0x578 <angle_rotate>
}
     628:	df 91       	pop	r29
     62a:	cf 91       	pop	r28
     62c:	08 95       	ret

0000062e <soft_left_degree>:
 * Output: rotate the bot by specific angle in soft_left direction
 * Logic: first turn soft_left and then move the required degree
 * Example Call: soft_left_degree(70)
 */
void soft_left_degree(unsigned int Degrees)
{
     62e:	cf 93       	push	r28
     630:	df 93       	push	r29
     632:	ec 01       	movw	r28, r24
    //176 pulses for 360 degree rotation 2.045 per count
    soft_left();
     634:	0e 94 ac 02 	call	0x558	; 0x558 <soft_left>
    Degrees=Degrees*2;
    angle_rotate(Degrees);
     638:	ce 01       	movw	r24, r28
     63a:	88 0f       	add	r24, r24
     63c:	99 1f       	adc	r25, r25
     63e:	0e 94 bc 02 	call	0x578	; 0x578 <angle_rotate>
}
     642:	df 91       	pop	r29
     644:	cf 91       	pop	r28
     646:	08 95       	ret

00000648 <right_degrees>:
 * Output: rotate the bot by specific angle in right direction
 * Logic: first turn right and then move the required degree
 * Example Call: right_degrees(70)
 */
void right_degrees(unsigned int Degrees)
{
     648:	cf 93       	push	r28
     64a:	df 93       	push	r29
     64c:	ec 01       	movw	r28, r24
    // 88 pulses for 360 degrees rotation 4.090 degrees per count
    right_(); //Turn right
     64e:	0e 94 a8 02 	call	0x550	; 0x550 <right_>
    angle_rotate(Degrees);
     652:	ce 01       	movw	r24, r28
     654:	0e 94 bc 02 	call	0x578	; 0x578 <angle_rotate>
}
     658:	df 91       	pop	r29
     65a:	cf 91       	pop	r28
     65c:	08 95       	ret

0000065e <left_degrees>:
 * Output: rotate the by specific angle bot in left direction
 * Logic: first turn left and then move the required degree
 * Example Call: left_degrees(70)
 */
void left_degrees(unsigned int Degrees)
{
     65e:	cf 93       	push	r28
     660:	df 93       	push	r29
     662:	ec 01       	movw	r28, r24
    // 88 pulses for 360 degrees rotation 4.090 degrees per count
    left_(); //Turn left
     664:	0e 94 a4 02 	call	0x548	; 0x548 <left_>
    angle_rotate(Degrees);
     668:	ce 01       	movw	r24, r28
     66a:	0e 94 bc 02 	call	0x578	; 0x578 <angle_rotate>
}
     66e:	df 91       	pop	r29
     670:	cf 91       	pop	r28
     672:	08 95       	ret

00000674 <adc_init>:
/*******************************************END OF FUNCTIONS FOR ROTATING THE ROBOT********************************************/
/*******************************************FUNCTIONS TO INITIALIZE ADC********************************************************/

void adc_init()  //Function for initiazing adc
{
    ADCSRA = 0x00;
     674:	ea e7       	ldi	r30, 0x7A	; 122
     676:	f0 e0       	ldi	r31, 0x00	; 0
     678:	10 82       	st	Z, r1
    ADCSRB = 0x00;        //MUX5 = 0
     67a:	10 92 7b 00 	sts	0x007B, r1
    ADMUX = 0x20;        //Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
     67e:	80 e2       	ldi	r24, 0x20	; 32
     680:	80 93 7c 00 	sts	0x007C, r24
    ACSR = 0x80;
     684:	80 e8       	ldi	r24, 0x80	; 128
     686:	80 bf       	out	0x30, r24	; 48
    ADCSRA = 0x86;        //ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
     688:	86 e8       	ldi	r24, 0x86	; 134
     68a:	80 83       	st	Z, r24
}
     68c:	08 95       	ret

0000068e <ADC_Conversion>:

//Function For ADC Conversion
unsigned char ADC_Conversion(unsigned char Ch)
{
    unsigned char a;            //Variable to store the ADC value
    if(Ch>7)
     68e:	88 30       	cpi	r24, 0x08	; 8
     690:	18 f0       	brcs	.+6      	; 0x698 <ADC_Conversion+0xa>
    {
        ADCSRB = 0x08;
     692:	98 e0       	ldi	r25, 0x08	; 8
     694:	90 93 7b 00 	sts	0x007B, r25
    }
    Ch = Ch & 0x07;
     698:	87 70       	andi	r24, 0x07	; 7
    ADMUX= 0x20| Ch;
     69a:	80 62       	ori	r24, 0x20	; 32
     69c:	80 93 7c 00 	sts	0x007C, r24
    ADCSRA = ADCSRA | 0x40;        //Set start conversion bit
     6a0:	ea e7       	ldi	r30, 0x7A	; 122
     6a2:	f0 e0       	ldi	r31, 0x00	; 0
     6a4:	80 81       	ld	r24, Z
     6a6:	80 64       	ori	r24, 0x40	; 64
     6a8:	80 83       	st	Z, r24
    while((ADCSRA&0x10)==0);    //Wait for conversion to complete
     6aa:	80 81       	ld	r24, Z
     6ac:	84 ff       	sbrs	r24, 4
     6ae:	fd cf       	rjmp	.-6      	; 0x6aa <ADC_Conversion+0x1c>
    a=ADCH;
     6b0:	80 91 79 00 	lds	r24, 0x0079
    ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
     6b4:	ea e7       	ldi	r30, 0x7A	; 122
     6b6:	f0 e0       	ldi	r31, 0x00	; 0
     6b8:	90 81       	ld	r25, Z
     6ba:	90 61       	ori	r25, 0x10	; 16
     6bc:	90 83       	st	Z, r25
    ADCSRB = 0x00;
     6be:	10 92 7b 00 	sts	0x007B, r1
    return a;
}
     6c2:	08 95       	ret

000006c4 <buzzer_on>:
/***************************************************END OF ADC*********************************************************/

void buzzer_on (void)
{
    unsigned char port_restore = 0;
    port_restore = PINC;
     6c4:	86 b1       	in	r24, 0x06	; 6
    port_restore = port_restore | 0x08;
     6c6:	88 60       	ori	r24, 0x08	; 8
    PORTC = port_restore;
     6c8:	88 b9       	out	0x08, r24	; 8
}
     6ca:	08 95       	ret

000006cc <buzzer_off>:

void buzzer_off (void)
{
    unsigned char port_restore = 0;
    port_restore = PINC;
     6cc:	86 b1       	in	r24, 0x06	; 6
    port_restore = port_restore & 0xF7;
     6ce:	87 7f       	andi	r24, 0xF7	; 247
    PORTC = port_restore;
     6d0:	88 b9       	out	0x08, r24	; 8
}
     6d2:	08 95       	ret

000006d4 <timer5_init>:
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:225.000Hz

void timer5_init()
{
    TCCR5B = 0x00;    //Stop
     6d4:	e1 e2       	ldi	r30, 0x21	; 33
     6d6:	f1 e0       	ldi	r31, 0x01	; 1
     6d8:	10 82       	st	Z, r1
    TCNT5H = 0xFF;    //Counter higher 8-bit value to which OCR5xH value is compared with
     6da:	8f ef       	ldi	r24, 0xFF	; 255
     6dc:	80 93 25 01 	sts	0x0125, r24
    TCNT5L = 0x01;    //Counter lower 8-bit value to which OCR5xH value is compared with
     6e0:	91 e0       	ldi	r25, 0x01	; 1
     6e2:	90 93 24 01 	sts	0x0124, r25
    OCR5AH = 0x00;    //Output compare register high value for Left Motor
     6e6:	10 92 29 01 	sts	0x0129, r1
    OCR5AL = 0xFF;    //Output compare register low value for Left Motor
     6ea:	80 93 28 01 	sts	0x0128, r24
    OCR5BH = 0x00;    //Output compare register high value for Right Motor
     6ee:	10 92 2b 01 	sts	0x012B, r1
    OCR5BL = 0xFF;    //Output compare register low value for Right Motor
     6f2:	80 93 2a 01 	sts	0x012A, r24
    OCR5CH = 0x00;    //Output compare register high value for Motor C1
     6f6:	10 92 2d 01 	sts	0x012D, r1
    OCR5CL = 0xFF;    //Output compare register low value for Motor C1
     6fa:	80 93 2c 01 	sts	0x012C, r24
    TCCR5A = 0xA9;    /*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
     6fe:	89 ea       	ldi	r24, 0xA9	; 169
     700:	80 93 20 01 	sts	0x0120, r24
                       For Overriding normal port functionality to OCRnA outputs.
                        {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/
    
    TCCR5B = 0x0B;    //WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
     704:	8b e0       	ldi	r24, 0x0B	; 11
     706:	80 83       	st	Z, r24
}
     708:	08 95       	ret

0000070a <timer1_init>:
//prescale:256
// WGM: 7) PWM 10bit fast, TOP=0x03FF
// actual value: 52.25Hz 
void timer1_init(void)
{
 TCCR1B = 0x00; //stop
     70a:	e1 e8       	ldi	r30, 0x81	; 129
     70c:	f0 e0       	ldi	r31, 0x00	; 0
     70e:	10 82       	st	Z, r1
 TCNT1H = 0xFC; //Counter high value to which OCR1xH value is to be compared with
     710:	8c ef       	ldi	r24, 0xFC	; 252
     712:	80 93 85 00 	sts	0x0085, r24
 TCNT1L = 0x01;    //Counter low value to which OCR1xH value is to be compared with
     716:	81 e0       	ldi	r24, 0x01	; 1
     718:	80 93 84 00 	sts	0x0084, r24
 OCR1AH = 0x03;    //Output compare Register high value for servo 1
     71c:	93 e0       	ldi	r25, 0x03	; 3
     71e:	90 93 89 00 	sts	0x0089, r25
 OCR1AL = 0xFF;    //Output Compare Register low Value For servo 1
     722:	8f ef       	ldi	r24, 0xFF	; 255
     724:	80 93 88 00 	sts	0x0088, r24
 OCR1BH = 0x03;    //Output compare Register high value for servo 2
     728:	90 93 8b 00 	sts	0x008B, r25
 OCR1BL = 0xFF;    //Output Compare Register low Value For servo 2
     72c:	80 93 8a 00 	sts	0x008A, r24
 OCR1CH = 0x03;    //Output compare Register high value for servo 3
     730:	90 93 8d 00 	sts	0x008D, r25
 OCR1CL = 0xFF;    //Output Compare Register low Value For servo 3
     734:	80 93 8c 00 	sts	0x008C, r24
 ICR1H  = 0x03;    
     738:	90 93 87 00 	sts	0x0087, r25
 ICR1L  = 0xFF;
     73c:	80 93 86 00 	sts	0x0086, r24
 TCCR1A = 0xAB; /*{COM1A1=1, COM1A0=0; COM1B1=1, COM1B0=0; COM1C1=1 COM1C0=0}
     740:	8b ea       	ldi	r24, 0xAB	; 171
     742:	80 93 80 00 	sts	0x0080, r24
                     For Overriding normal port functionality to OCRnA outputs.
                  {WGM11=1, WGM10=1} Along With WGM12 in TCCR1B for Selecting FAST PWM Mode*/
 TCCR1C = 0x00;
     746:	10 92 82 00 	sts	0x0082, r1
 TCCR1B = 0x0C; //WGM12=1; CS12=1, CS11=0, CS10=0 (Prescaler=256)
     74a:	8c e0       	ldi	r24, 0x0C	; 12
     74c:	80 83       	st	Z, r24
}
     74e:	08 95       	ret

00000750 <USART_Init>:

/*******************************************FUNCTIONS OF USART FOR COMMUNICATION WITH RASPBERRY PI*************************************/

void USART_Init () {
    UCSR2A=0x00;
     750:	10 92 d0 00 	sts	0x00D0, r1
    UCSR2B=0x00;
     754:	e1 ed       	ldi	r30, 0xD1	; 209
     756:	f0 e0       	ldi	r31, 0x00	; 0
     758:	10 82       	st	Z, r1
    //Setting baud rate to 9600
    UBRR2L=0x5F;
     75a:	8f e5       	ldi	r24, 0x5F	; 95
     75c:	80 93 d4 00 	sts	0x00D4, r24
    UBRR2H=0x00;
     760:	10 92 d5 00 	sts	0x00D5, r1
    //Enable the receiver and transmitter
    UCSR2B = (1 << RXEN2) | (1 << TXEN2);
     764:	88 e1       	ldi	r24, 0x18	; 24
     766:	80 83       	st	Z, r24
    //Set 1 stop bits and data bit length is 8-bit
    UCSR2C = (3 << UCSZ20);
     768:	e2 ed       	ldi	r30, 0xD2	; 210
     76a:	f0 e0       	ldi	r31, 0x00	; 0
     76c:	86 e0       	ldi	r24, 0x06	; 6
     76e:	80 83       	st	Z, r24
    UCSR2C &= ~(1 << USBS2);
     770:	80 81       	ld	r24, Z
     772:	87 7f       	andi	r24, 0xF7	; 247
     774:	80 83       	st	Z, r24
}
     776:	08 95       	ret

00000778 <USART_Transmit>:

void USART_Transmit (unsigned char data) {
    //Wait until the Transmitter is ready
    while (! (UCSR2A & (1 << UDRE2)) );
     778:	e0 ed       	ldi	r30, 0xD0	; 208
     77a:	f0 e0       	ldi	r31, 0x00	; 0
     77c:	90 81       	ld	r25, Z
     77e:	95 ff       	sbrs	r25, 5
     780:	fd cf       	rjmp	.-6      	; 0x77c <USART_Transmit+0x4>
    //Make the 9th bit 0 for the moment
    UCSR2B &=~(1 << TXB82);
     782:	e1 ed       	ldi	r30, 0xD1	; 209
     784:	f0 e0       	ldi	r31, 0x00	; 0
     786:	90 81       	ld	r25, Z
     788:	9e 7f       	andi	r25, 0xFE	; 254
     78a:	90 83       	st	Z, r25
    //If the 9th bit of the data is a 1
    if (data & 0x0100)
    //Set the TXB8 bit to 1
    UCSR2B |= (1 << TXB82);
    //Get that data out here!
    UDR2 = data;
     78c:	80 93 d6 00 	sts	0x00D6, r24
}
     790:	08 95       	ret

00000792 <USART_Receive>:

unsigned char USART_Receive() {
    while ( !(UCSR2A & (1 << RXC2)) ); //Wait for the RXC to not have 0
     792:	e0 ed       	ldi	r30, 0xD0	; 208
     794:	f0 e0       	ldi	r31, 0x00	; 0
     796:	80 81       	ld	r24, Z
     798:	88 23       	and	r24, r24
     79a:	ec f7       	brge	.-6      	; 0x796 <USART_Receive+0x4>
    return UDR2; //Get that data out there and back to the main program!
     79c:	80 91 d6 00 	lds	r24, 0x00D6
}
     7a0:	08 95       	ret

000007a2 <velocity>:
/*******************************************END OF USART*******************************************************************************/

//function to set the velocity of left and right motor
void velocity (unsigned char left_motor, unsigned char right_motor)
{
    OCR5AL = (unsigned char)left_motor;
     7a2:	80 93 28 01 	sts	0x0128, r24
    OCR5BL = (unsigned char)right_motor;
     7a6:	60 93 2a 01 	sts	0x012A, r22
}
     7aa:	08 95       	ret

000007ac <linear_distance_mm>:
void linear_distance_mm(unsigned int DistanceInMM)
{
    float ReqdShaftCount = 0;
    unsigned long int ReqdShaftCountInt = 0;

    ReqdShaftCount = DistanceInMM / 5.338; // division by resolution to get shaft count
     7ac:	bc 01       	movw	r22, r24
     7ae:	80 e0       	ldi	r24, 0x00	; 0
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <__floatunsisf>
     7b6:	25 ee       	ldi	r18, 0xE5	; 229
     7b8:	30 ed       	ldi	r19, 0xD0	; 208
     7ba:	4a ea       	ldi	r20, 0xAA	; 170
     7bc:	50 e4       	ldi	r21, 0x40	; 64
     7be:	0e 94 40 11 	call	0x2280	; 0x2280 <__divsf3>
    ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
     7c2:	0e 94 a8 11 	call	0x2350	; 0x2350 <__fixunssfsi>
     7c6:	46 2f       	mov	r20, r22
     7c8:	57 2f       	mov	r21, r23
     7ca:	68 2f       	mov	r22, r24
     7cc:	79 2f       	mov	r23, r25
    
    ShaftCountRight = 0;
     7ce:	10 92 0c 02 	sts	0x020C, r1
     7d2:	10 92 0d 02 	sts	0x020D, r1
     7d6:	10 92 0e 02 	sts	0x020E, r1
     7da:	10 92 0f 02 	sts	0x020F, r1
    while(1)
    {
        if(ShaftCountRight > ReqdShaftCountInt)
     7de:	80 91 0c 02 	lds	r24, 0x020C
     7e2:	90 91 0d 02 	lds	r25, 0x020D
     7e6:	a0 91 0e 02 	lds	r26, 0x020E
     7ea:	b0 91 0f 02 	lds	r27, 0x020F
     7ee:	48 17       	cp	r20, r24
     7f0:	59 07       	cpc	r21, r25
     7f2:	6a 07       	cpc	r22, r26
     7f4:	7b 07       	cpc	r23, r27
     7f6:	98 f7       	brcc	.-26     	; 0x7de <linear_distance_mm+0x32>
        {
            break;
        }
    }
    stop(); //Stop robot
     7f8:	0e 94 b4 02 	call	0x568	; 0x568 <stop>
}
     7fc:	08 95       	ret

000007fe <back_mm>:
}
//////////////////////////////////////////////////

/////////////////
void back_mm(unsigned int DistanceInMM)
{
     7fe:	cf 93       	push	r28
     800:	df 93       	push	r29
     802:	ec 01       	movw	r28, r24
	back();
     804:	0e 94 b8 02 	call	0x570	; 0x570 <back>
	linear_distance_mm(DistanceInMM);
     808:	ce 01       	movw	r24, r28
     80a:	0e 94 d6 03 	call	0x7ac	; 0x7ac <linear_distance_mm>
}
     80e:	df 91       	pop	r29
     810:	cf 91       	pop	r28
     812:	08 95       	ret

00000814 <forward_mm>:
    stop(); //Stop robot
}

//function to move linear distance forward in mm
void forward_mm(unsigned int DistanceInMM)
{
     814:	cf 93       	push	r28
     816:	df 93       	push	r29
     818:	ec 01       	movw	r28, r24
    forward();
     81a:	0e 94 a0 02 	call	0x540	; 0x540 <forward>
    linear_distance_mm(DistanceInMM);
     81e:	ce 01       	movw	r24, r28
     820:	0e 94 d6 03 	call	0x7ac	; 0x7ac <linear_distance_mm>

}
     824:	df 91       	pop	r29
     826:	cf 91       	pop	r28
     828:	08 95       	ret

0000082a <init_devices>:

void init_devices()
{
    cli(); //Clears the global interrupt
     82a:	f8 94       	cli
    port_init();  //Initializes all the ports
     82c:	0e 94 2b 02 	call	0x456	; 0x456 <port_init>
    adc_init();  //Initializes ADC
     830:	0e 94 3a 03 	call	0x674	; 0x674 <adc_init>
    timer5_init();  //Initializes timer for motor
     834:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <timer5_init>
    timer1_init(); //Initializes timer for servo
     838:	0e 94 85 03 	call	0x70a	; 0x70a <timer1_init>
    left_position_encoder_interrupt_init(); //initializes left encoder interrupt
     83c:	0e 94 3e 02 	call	0x47c	; 0x47c <left_position_encoder_interrupt_init>
    right_position_encoder_interrupt_init(); //initializes right encoder interrupt
     840:	0e 94 47 02 	call	0x48e	; 0x48e <right_position_encoder_interrupt_init>
    USART_Init(); //Initialize UART2 for serial communication
     844:	0e 94 a8 03 	call	0x750	; 0x750 <USART_Init>
    sei();   // Enables the global interrupt
     848:	78 94       	sei
}
     84a:	08 95       	ret

0000084c <print_sensor>:
    servo_1(39);
    _delay_ms(200);
}
//function to print sensors values on lcd
void print_sensor(char row, char coloumn,unsigned char channel)
{
     84c:	cf 93       	push	r28
     84e:	df 93       	push	r29
     850:	d8 2f       	mov	r29, r24
     852:	c6 2f       	mov	r28, r22
     854:	84 2f       	mov	r24, r20
    ADC_Value = ADC_Conversion(channel);
     856:	0e 94 47 03 	call	0x68e	; 0x68e <ADC_Conversion>
     85a:	48 2f       	mov	r20, r24
     85c:	80 93 7e 02 	sts	0x027E, r24
    lcd_print(row, coloumn, ADC_Value, 3);
     860:	8d 2f       	mov	r24, r29
     862:	6c 2f       	mov	r22, r28
     864:	50 e0       	ldi	r21, 0x00	; 0
     866:	23 e0       	ldi	r18, 0x03	; 3
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	0e 94 6d 01 	call	0x2da	; 0x2da <lcd_print>
}
     86e:	df 91       	pop	r29
     870:	cf 91       	pop	r28
     872:	08 95       	ret

00000874 <Initialize_white_sensors>:

/******************************************************Functions to move the bot in specific direction******************************************/
 void Initialize_white_sensors()
 {
     Left_white_line = ADC_Conversion(3);    //Getting data of Left WL Sensor
     874:	83 e0       	ldi	r24, 0x03	; 3
     876:	0e 94 47 03 	call	0x68e	; 0x68e <ADC_Conversion>
     87a:	80 93 0a 02 	sts	0x020A, r24
     Center_white_line = ADC_Conversion(2);    //Getting data of Center WL Sensor
     87e:	82 e0       	ldi	r24, 0x02	; 2
     880:	0e 94 47 03 	call	0x68e	; 0x68e <ADC_Conversion>
     884:	80 93 09 02 	sts	0x0209, r24
     Right_white_line = ADC_Conversion(1);    //Getting data of Right WL Sensor
     888:	81 e0       	ldi	r24, 0x01	; 1
     88a:	0e 94 47 03 	call	0x68e	; 0x68e <ADC_Conversion>
     88e:	80 93 08 02 	sts	0x0208, r24
     
     print_sensor(1,6,3);    //Prints value of White Line Sensor1
     892:	81 e0       	ldi	r24, 0x01	; 1
     894:	66 e0       	ldi	r22, 0x06	; 6
     896:	43 e0       	ldi	r20, 0x03	; 3
     898:	0e 94 26 04 	call	0x84c	; 0x84c <print_sensor>
     print_sensor(1,10,2);    //Prints Value of White Line Sensor2
     89c:	81 e0       	ldi	r24, 0x01	; 1
     89e:	6a e0       	ldi	r22, 0x0A	; 10
     8a0:	42 e0       	ldi	r20, 0x02	; 2
     8a2:	0e 94 26 04 	call	0x84c	; 0x84c <print_sensor>
     print_sensor(1,14,1);    //Prints Value of White Line Sensor3d
     8a6:	81 e0       	ldi	r24, 0x01	; 1
     8a8:	6e e0       	ldi	r22, 0x0E	; 14
     8aa:	41 e0       	ldi	r20, 0x01	; 1
     8ac:	0e 94 26 04 	call	0x84c	; 0x84c <print_sensor>
 }
     8b0:	08 95       	ret

000008b2 <check_l>:
          in left and move 5-5 degree until Centre_white_line is on black till 30 degree and if not found black in between that then it start 
          rotating right 5-5 degree till 60 degree
 * Example Call: check_l()
 */
void check_l()
{
     8b2:	0f 93       	push	r16
     8b4:	1f 93       	push	r17
     8b6:	cf 93       	push	r28
     8b8:	df 93       	push	r29
    int l=5;                                    //left_degree error variable
    int r=5;                                    //right_degree error variable
    unsigned int a=5;                    //fix value of angle which will be used to remove the error
    Initialize_white_sensors();
     8ba:	0e 94 3a 04 	call	0x874	; 0x874 <Initialize_white_sensors>
 * Example Call: check_l()
 */
void check_l()
{
    int l=5;                                    //left_degree error variable
    int r=5;                                    //right_degree error variable
     8be:	c5 e0       	ldi	r28, 0x05	; 5
     8c0:	d0 e0       	ldi	r29, 0x00	; 0
          rotating right 5-5 degree till 60 degree
 * Example Call: check_l()
 */
void check_l()
{
    int l=5;                                    //left_degree error variable
     8c2:	05 e0       	ldi	r16, 0x05	; 5
     8c4:	10 e0       	ldi	r17, 0x00	; 0
    int r=5;                                    //right_degree error variable
    unsigned int a=5;                    //fix value of angle which will be used to remove the error
    Initialize_white_sensors();
    while(!(Center_white_line>0x10))
     8c6:	6b c0       	rjmp	.+214    	; 0x99e <check_l+0xec>
    {
        
        
        Initialize_white_sensors();
     8c8:	0e 94 3a 04 	call	0x874	; 0x874 <Initialize_white_sensors>
        
        if(Left_white_line<0x10&&Center_white_line<0x10&&Right_white_line<0x10&&check==1)
     8cc:	80 91 0a 02 	lds	r24, 0x020A
     8d0:	80 31       	cpi	r24, 0x10	; 16
     8d2:	08 f0       	brcs	.+2      	; 0x8d6 <check_l+0x24>
     8d4:	69 c0       	rjmp	.+210    	; 0x9a8 <check_l+0xf6>
     8d6:	80 91 09 02 	lds	r24, 0x0209
     8da:	80 31       	cpi	r24, 0x10	; 16
     8dc:	08 f0       	brcs	.+2      	; 0x8e0 <check_l+0x2e>
     8de:	64 c0       	rjmp	.+200    	; 0x9a8 <check_l+0xf6>
     8e0:	80 91 08 02 	lds	r24, 0x0208
     8e4:	80 31       	cpi	r24, 0x10	; 16
     8e6:	60 f5       	brcc	.+88     	; 0x940 <check_l+0x8e>
     8e8:	80 91 85 02 	lds	r24, 0x0285
     8ec:	90 91 86 02 	lds	r25, 0x0286
     8f0:	81 30       	cpi	r24, 0x01	; 1
     8f2:	91 05       	cpc	r25, r1
     8f4:	29 f5       	brne	.+74     	; 0x940 <check_l+0x8e>
        {
            
            
            if(l<90)
     8f6:	0a 35       	cpi	r16, 0x5A	; 90
     8f8:	11 05       	cpc	r17, r1
     8fa:	84 f4       	brge	.+32     	; 0x91c <check_l+0x6a>
            {
                left_degrees(a);
     8fc:	85 e0       	ldi	r24, 0x05	; 5
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	0e 94 2f 03 	call	0x65e	; 0x65e <left_degrees>
                l=l+5;
     904:	0b 5f       	subi	r16, 0xFB	; 251
     906:	1f 4f       	sbci	r17, 0xFF	; 255
     908:	8f ef       	ldi	r24, 0xFF	; 255
     90a:	9f e7       	ldi	r25, 0x7F	; 127
     90c:	a4 e0       	ldi	r26, 0x04	; 4
     90e:	81 50       	subi	r24, 0x01	; 1
     910:	90 40       	sbci	r25, 0x00	; 0
     912:	a0 40       	sbci	r26, 0x00	; 0
     914:	e1 f7       	brne	.-8      	; 0x90e <check_l+0x5c>
     916:	00 c0       	rjmp	.+0      	; 0x918 <check_l+0x66>
     918:	00 00       	nop
     91a:	41 c0       	rjmp	.+130    	; 0x99e <check_l+0xec>
                _delay_ms(100);
            }
            else if(r<=100&&l>=90)
     91c:	c5 36       	cpi	r28, 0x65	; 101
     91e:	d1 05       	cpc	r29, r1
     920:	f4 f5       	brge	.+124    	; 0x99e <check_l+0xec>
            {
                r=r+5;
     922:	25 96       	adiw	r28, 0x05	; 5
                right_degrees(a);
     924:	85 e0       	ldi	r24, 0x05	; 5
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	0e 94 24 03 	call	0x648	; 0x648 <right_degrees>
     92c:	8f ef       	ldi	r24, 0xFF	; 255
     92e:	9f e7       	ldi	r25, 0x7F	; 127
     930:	a4 e0       	ldi	r26, 0x04	; 4
     932:	81 50       	subi	r24, 0x01	; 1
     934:	90 40       	sbci	r25, 0x00	; 0
     936:	a0 40       	sbci	r26, 0x00	; 0
     938:	e1 f7       	brne	.-8      	; 0x932 <check_l+0x80>
     93a:	00 c0       	rjmp	.+0      	; 0x93c <check_l+0x8a>
     93c:	00 00       	nop
     93e:	2f c0       	rjmp	.+94     	; 0x99e <check_l+0xec>
                _delay_ms(100);
            }
            
        }
        else if(Left_white_line<0x10&&Center_white_line<0x10&&Right_white_line<0x10&&check==2)
     940:	80 91 08 02 	lds	r24, 0x0208
     944:	80 31       	cpi	r24, 0x10	; 16
     946:	80 f5       	brcc	.+96     	; 0x9a8 <check_l+0xf6>
     948:	80 91 85 02 	lds	r24, 0x0285
     94c:	90 91 86 02 	lds	r25, 0x0286
     950:	82 30       	cpi	r24, 0x02	; 2
     952:	91 05       	cpc	r25, r1
     954:	49 f5       	brne	.+82     	; 0x9a8 <check_l+0xf6>
        {
            if(r<90)
     956:	ca 35       	cpi	r28, 0x5A	; 90
     958:	d1 05       	cpc	r29, r1
     95a:	7c f4       	brge	.+30     	; 0x97a <check_l+0xc8>
            {
                right_degrees(a);
     95c:	85 e0       	ldi	r24, 0x05	; 5
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	0e 94 24 03 	call	0x648	; 0x648 <right_degrees>
                r=r+5;
     964:	25 96       	adiw	r28, 0x05	; 5
     966:	8f ef       	ldi	r24, 0xFF	; 255
     968:	9f e7       	ldi	r25, 0x7F	; 127
     96a:	a4 e0       	ldi	r26, 0x04	; 4
     96c:	81 50       	subi	r24, 0x01	; 1
     96e:	90 40       	sbci	r25, 0x00	; 0
     970:	a0 40       	sbci	r26, 0x00	; 0
     972:	e1 f7       	brne	.-8      	; 0x96c <check_l+0xba>
     974:	00 c0       	rjmp	.+0      	; 0x976 <check_l+0xc4>
     976:	00 00       	nop
     978:	12 c0       	rjmp	.+36     	; 0x99e <check_l+0xec>
                _delay_ms(100);
            }
            else if(l<100&&r>=90)
     97a:	04 36       	cpi	r16, 0x64	; 100
     97c:	11 05       	cpc	r17, r1
     97e:	7c f4       	brge	.+30     	; 0x99e <check_l+0xec>
            {
                l=l+5;
     980:	0b 5f       	subi	r16, 0xFB	; 251
     982:	1f 4f       	sbci	r17, 0xFF	; 255
                left_degrees(a);
     984:	85 e0       	ldi	r24, 0x05	; 5
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	0e 94 2f 03 	call	0x65e	; 0x65e <left_degrees>
     98c:	8f ef       	ldi	r24, 0xFF	; 255
     98e:	9f e7       	ldi	r25, 0x7F	; 127
     990:	a4 e0       	ldi	r26, 0x04	; 4
     992:	81 50       	subi	r24, 0x01	; 1
     994:	90 40       	sbci	r25, 0x00	; 0
     996:	a0 40       	sbci	r26, 0x00	; 0
     998:	e1 f7       	brne	.-8      	; 0x992 <check_l+0xe0>
     99a:	00 c0       	rjmp	.+0      	; 0x99c <check_l+0xea>
     99c:	00 00       	nop
{
    int l=5;                                    //left_degree error variable
    int r=5;                                    //right_degree error variable
    unsigned int a=5;                    //fix value of angle which will be used to remove the error
    Initialize_white_sensors();
    while(!(Center_white_line>0x10))
     99e:	80 91 09 02 	lds	r24, 0x0209
     9a2:	81 31       	cpi	r24, 0x11	; 17
     9a4:	08 f4       	brcc	.+2      	; 0x9a8 <check_l+0xf6>
     9a6:	90 cf       	rjmp	.-224    	; 0x8c8 <check_l+0x16>
            
        }
        else
        break;
    }
}
     9a8:	df 91       	pop	r29
     9aa:	cf 91       	pop	r28
     9ac:	1f 91       	pop	r17
     9ae:	0f 91       	pop	r16
     9b0:	08 95       	ret

000009b2 <setangle>:
 * Logic: let current angle is 20 and we want to rotate to 90 assuming north to be 0 degree. Then rotationAngle will be = 90-20=50 degree.
          if rotationAngle is +ve then it will rotate by left_degree else using right_degree
 * Example Call: setangle(70)
 */
void setangle(signed int angle)
{
     9b2:	cf 93       	push	r28
     9b4:	df 93       	push	r29
     9b6:	ac 01       	movw	r20, r24
    signed int rotateAngle=angle-ca;
     9b8:	80 91 02 02 	lds	r24, 0x0202
     9bc:	90 91 03 02 	lds	r25, 0x0203
     9c0:	ea 01       	movw	r28, r20
     9c2:	c8 1b       	sub	r28, r24
     9c4:	d9 0b       	sbc	r29, r25
    ca=ca+rotateAngle;
     9c6:	50 93 03 02 	sts	0x0203, r21
     9ca:	40 93 02 02 	sts	0x0202, r20
    lcd_print(1,1,ca,3);
     9ce:	81 e0       	ldi	r24, 0x01	; 1
     9d0:	61 e0       	ldi	r22, 0x01	; 1
     9d2:	23 e0       	ldi	r18, 0x03	; 3
     9d4:	30 e0       	ldi	r19, 0x00	; 0
     9d6:	0e 94 6d 01 	call	0x2da	; 0x2da <lcd_print>

    if (rotateAngle>0)
     9da:	1c 16       	cp	r1, r28
     9dc:	1d 06       	cpc	r1, r29
     9de:	0c f5       	brge	.+66     	; 0xa22 <setangle+0x70>
    {
        if(rotateAngle==270)
     9e0:	21 e0       	ldi	r18, 0x01	; 1
     9e2:	ce 30       	cpi	r28, 0x0E	; 14
     9e4:	d2 07       	cpc	r29, r18
     9e6:	79 f4       	brne	.+30     	; 0xa06 <setangle+0x54>
        {
            right_degrees(90);
     9e8:	8a e5       	ldi	r24, 0x5A	; 90
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	0e 94 24 03 	call	0x648	; 0x648 <right_degrees>
            check=2;
     9f0:	82 e0       	ldi	r24, 0x02	; 2
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	90 93 86 02 	sts	0x0286, r25
     9f8:	80 93 85 02 	sts	0x0285, r24
            stop();
     9fc:	0e 94 b4 02 	call	0x568	; 0x568 <stop>
            check_l();
     a00:	0e 94 59 04 	call	0x8b2	; 0x8b2 <check_l>
     a04:	34 c0       	rjmp	.+104    	; 0xa6e <setangle+0xbc>
        }
        else
        {
            left_degrees(rotateAngle); //Rotate left by 90 degrees
     a06:	ce 01       	movw	r24, r28
     a08:	0e 94 2f 03 	call	0x65e	; 0x65e <left_degrees>
            check=1;
     a0c:	81 e0       	ldi	r24, 0x01	; 1
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	90 93 86 02 	sts	0x0286, r25
     a14:	80 93 85 02 	sts	0x0285, r24
            stop();
     a18:	0e 94 b4 02 	call	0x568	; 0x568 <stop>
            check_l();
     a1c:	0e 94 59 04 	call	0x8b2	; 0x8b2 <check_l>
     a20:	26 c0       	rjmp	.+76     	; 0xa6e <setangle+0xbc>
        
    }

    else
    {
        if((abs(rotateAngle))==270)
     a22:	ce 01       	movw	r24, r28
     a24:	dd 23       	and	r29, r29
     a26:	24 f4       	brge	.+8      	; 0xa30 <setangle+0x7e>
     a28:	88 27       	eor	r24, r24
     a2a:	99 27       	eor	r25, r25
     a2c:	8c 1b       	sub	r24, r28
     a2e:	9d 0b       	sbc	r25, r29
     a30:	a1 e0       	ldi	r26, 0x01	; 1
     a32:	8e 30       	cpi	r24, 0x0E	; 14
     a34:	9a 07       	cpc	r25, r26
     a36:	79 f4       	brne	.+30     	; 0xa56 <setangle+0xa4>
        {
            left_degrees(90);
     a38:	8a e5       	ldi	r24, 0x5A	; 90
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	0e 94 2f 03 	call	0x65e	; 0x65e <left_degrees>
            check=1;
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	90 93 86 02 	sts	0x0286, r25
     a48:	80 93 85 02 	sts	0x0285, r24
            stop();
     a4c:	0e 94 b4 02 	call	0x568	; 0x568 <stop>
            check_l();
     a50:	0e 94 59 04 	call	0x8b2	; 0x8b2 <check_l>
     a54:	0c c0       	rjmp	.+24     	; 0xa6e <setangle+0xbc>
        }
        else
        {
            right_degrees(abs(rotateAngle)); //Rotate right by 90 degrees
     a56:	0e 94 24 03 	call	0x648	; 0x648 <right_degrees>
            check=2;
     a5a:	82 e0       	ldi	r24, 0x02	; 2
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	90 93 86 02 	sts	0x0286, r25
     a62:	80 93 85 02 	sts	0x0285, r24
            stop();
     a66:	0e 94 b4 02 	call	0x568	; 0x568 <stop>
            check_l();
     a6a:	0e 94 59 04 	call	0x8b2	; 0x8b2 <check_l>
        }
        
        
    }
    stop();
     a6e:	0e 94 b4 02 	call	0x568	; 0x568 <stop>
     a72:	8f ef       	ldi	r24, 0xFF	; 255
     a74:	9f ef       	ldi	r25, 0xFF	; 255
     a76:	a1 e1       	ldi	r26, 0x11	; 17
     a78:	81 50       	subi	r24, 0x01	; 1
     a7a:	90 40       	sbci	r25, 0x00	; 0
     a7c:	a0 40       	sbci	r26, 0x00	; 0
     a7e:	e1 f7       	brne	.-8      	; 0xa78 <setangle+0xc6>
     a80:	00 c0       	rjmp	.+0      	; 0xa82 <setangle+0xd0>
     a82:	00 00       	nop
    _delay_ms(400);
    
    
}
     a84:	df 91       	pop	r29
     a86:	cf 91       	pop	r28
     a88:	08 95       	ret

00000a8a <move>:
             line then turn right.
 
  * Example Call: move();
  */
void move(void)
{
     a8a:	ef 92       	push	r14
     a8c:	ff 92       	push	r15
     a8e:	0f 93       	push	r16
     a90:	1f 93       	push	r17
     a92:	cf 93       	push	r28
            check=1;
        }

        else if((Center_white_line>0x010 && Right_white_line>0x010 && Left_white_line<=0x010) )
        {
            flag=1;
     a94:	c1 e0       	ldi	r28, 0x01	; 1
            forward();
            velocity(200,170);
            check=2;
     a96:	02 e0       	ldi	r16, 0x02	; 2
     a98:	10 e0       	ldi	r17, 0x00	; 0
        else if((Center_white_line<=0x010 && Right_white_line<=0x010 && Left_white_line>0x10))
        {
            flag=1;
            forward();
            velocity(170,200);
            check=1;
     a9a:	ee 24       	eor	r14, r14
     a9c:	ff 24       	eor	r15, r15
     a9e:	e3 94       	inc	r14
  */
void move(void)
{
    while(1) 
    {
        Initialize_white_sensors();
     aa0:	0e 94 3a 04 	call	0x874	; 0x874 <Initialize_white_sensors>

        flag=0;
     aa4:	10 92 0b 02 	sts	0x020B, r1

        

        if((Center_white_line>0x016 && Left_white_line>0x014)||(Center_white_line>0x016&&Right_white_line>0x014))
     aa8:	80 91 09 02 	lds	r24, 0x0209
     aac:	87 31       	cpi	r24, 0x17	; 23
     aae:	08 f1       	brcs	.+66     	; 0xaf2 <move+0x68>
     ab0:	90 91 0a 02 	lds	r25, 0x020A
     ab4:	95 31       	cpi	r25, 0x15	; 21
     ab6:	20 f4       	brcc	.+8      	; 0xac0 <move+0x36>
     ab8:	90 91 08 02 	lds	r25, 0x0208
     abc:	95 31       	cpi	r25, 0x15	; 21
     abe:	c8 f0       	brcs	.+50     	; 0xaf2 <move+0x68>
        {
            buzzer_on();
     ac0:	0e 94 62 03 	call	0x6c4	; 0x6c4 <buzzer_on>
     ac4:	8f ef       	ldi	r24, 0xFF	; 255
     ac6:	9f e7       	ldi	r25, 0x7F	; 127
     ac8:	a4 e0       	ldi	r26, 0x04	; 4
     aca:	81 50       	subi	r24, 0x01	; 1
     acc:	90 40       	sbci	r25, 0x00	; 0
     ace:	a0 40       	sbci	r26, 0x00	; 0
     ad0:	e1 f7       	brne	.-8      	; 0xaca <move+0x40>
     ad2:	00 c0       	rjmp	.+0      	; 0xad4 <move+0x4a>
     ad4:	00 00       	nop
            _delay_ms(100);
            buzzer_off();
     ad6:	0e 94 66 03 	call	0x6cc	; 0x6cc <buzzer_off>
            forward_mm(40);
     ada:	88 e2       	ldi	r24, 0x28	; 40
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	0e 94 0a 04 	call	0x814	; 0x814 <forward_mm>
            stop();
     ae2:	0e 94 b4 02 	call	0x568	; 0x568 <stop>
            check=2;
        }

        
    }
}
     ae6:	cf 91       	pop	r28
     ae8:	1f 91       	pop	r17
     aea:	0f 91       	pop	r16
     aec:	ff 90       	pop	r15
     aee:	ef 90       	pop	r14
     af0:	08 95       	ret
            forward_mm(40);
            stop();
            break;
            
        }
        else if (Center_white_line<=0x010 && Right_white_line<=0x010 && Left_white_line<=0x010)
     af2:	81 31       	cpi	r24, 0x11	; 17
     af4:	08 f0       	brcs	.+2      	; 0xaf8 <move+0x6e>
     af6:	46 c0       	rjmp	.+140    	; 0xb84 <move+0xfa>
     af8:	90 91 08 02 	lds	r25, 0x0208
     afc:	91 31       	cpi	r25, 0x11	; 17
     afe:	68 f5       	brcc	.+90     	; 0xb5a <move+0xd0>
     b00:	20 91 0a 02 	lds	r18, 0x020A
     b04:	21 31       	cpi	r18, 0x11	; 17
     b06:	08 f0       	brcs	.+2      	; 0xb0a <move+0x80>
     b08:	85 c0       	rjmp	.+266    	; 0xc14 <move+0x18a>
        {
            if (Center_white_line>Left_white_line && Center_white_line>Right_white_line)
     b0a:	28 17       	cp	r18, r24
     b0c:	48 f4       	brcc	.+18     	; 0xb20 <move+0x96>
     b0e:	98 17       	cp	r25, r24
     b10:	38 f4       	brcc	.+14     	; 0xb20 <move+0x96>
            {
                forward();
     b12:	0e 94 a0 02 	call	0x540	; 0x540 <forward>
                velocity(150,150);
     b16:	86 e9       	ldi	r24, 0x96	; 150
     b18:	66 e9       	ldi	r22, 0x96	; 150
     b1a:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <velocity>
     b1e:	c0 cf       	rjmp	.-128    	; 0xaa0 <move+0x16>
                
        
            }
            
            else if (Right_white_line > Center_white_line)
     b20:	89 17       	cp	r24, r25
     b22:	58 f4       	brcc	.+22     	; 0xb3a <move+0xb0>
            {
                forward();
     b24:	0e 94 a0 02 	call	0x540	; 0x540 <forward>
                velocity(160,130);
     b28:	80 ea       	ldi	r24, 0xA0	; 160
     b2a:	62 e8       	ldi	r22, 0x82	; 130
     b2c:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <velocity>
                check=2;
     b30:	10 93 86 02 	sts	0x0286, r17
     b34:	00 93 85 02 	sts	0x0285, r16
     b38:	b3 cf       	rjmp	.-154    	; 0xaa0 <move+0x16>
            }
            else if (Left_white_line > Center_white_line)
     b3a:	82 17       	cp	r24, r18
     b3c:	58 f4       	brcc	.+22     	; 0xb54 <move+0xca>
            {
                forward();
     b3e:	0e 94 a0 02 	call	0x540	; 0x540 <forward>
                velocity(130,160);
     b42:	82 e8       	ldi	r24, 0x82	; 130
     b44:	60 ea       	ldi	r22, 0xA0	; 160
     b46:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <velocity>
                check=1;
     b4a:	f0 92 86 02 	sts	0x0286, r15
     b4e:	e0 92 85 02 	sts	0x0285, r14
     b52:	a6 cf       	rjmp	.-180    	; 0xaa0 <move+0x16>
            }
            else
            {    
            check_l();
     b54:	0e 94 59 04 	call	0x8b2	; 0x8b2 <check_l>
     b58:	a3 cf       	rjmp	.-186    	; 0xaa0 <move+0x16>
            
            
        }
        
        
        else if(Center_white_line<=0x010 && Right_white_line>0x010 && Left_white_line>0x010)
     b5a:	80 91 0a 02 	lds	r24, 0x020A
     b5e:	81 31       	cpi	r24, 0x11	; 17
     b60:	08 f4       	brcc	.+2      	; 0xb64 <move+0xda>
     b62:	64 c0       	rjmp	.+200    	; 0xc2c <move+0x1a2>
        {
            if (Right_white_line>Left_white_line)
     b64:	89 17       	cp	r24, r25
     b66:	38 f4       	brcc	.+14     	; 0xb76 <move+0xec>
            {
                
                forward();
     b68:	0e 94 a0 02 	call	0x540	; 0x540 <forward>
                velocity(200,170);
     b6c:	88 ec       	ldi	r24, 0xC8	; 200
     b6e:	6a ea       	ldi	r22, 0xAA	; 170
     b70:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <velocity>
     b74:	95 cf       	rjmp	.-214    	; 0xaa0 <move+0x16>
            }
            else
            {
                forward();
     b76:	0e 94 a0 02 	call	0x540	; 0x540 <forward>
                velocity(170,200);
     b7a:	8a ea       	ldi	r24, 0xAA	; 170
     b7c:	68 ec       	ldi	r22, 0xC8	; 200
     b7e:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <velocity>
     b82:	8e cf       	rjmp	.-228    	; 0xaa0 <move+0x16>
            }
        }

        else if(Center_white_line>0x10 && Right_white_line<=0x010 && Left_white_line<=0x010)
     b84:	80 91 08 02 	lds	r24, 0x0208
     b88:	81 31       	cpi	r24, 0x11	; 17
     b8a:	70 f4       	brcc	.+28     	; 0xba8 <move+0x11e>
     b8c:	80 91 0a 02 	lds	r24, 0x020A
     b90:	81 31       	cpi	r24, 0x11	; 17
     b92:	08 f0       	brcs	.+2      	; 0xb96 <move+0x10c>
     b94:	45 c0       	rjmp	.+138    	; 0xc20 <move+0x196>
        {
            flag=1;
     b96:	c0 93 0b 02 	sts	0x020B, r28
            forward();
     b9a:	0e 94 a0 02 	call	0x540	; 0x540 <forward>
            velocity(200,200);
     b9e:	88 ec       	ldi	r24, 0xC8	; 200
     ba0:	68 ec       	ldi	r22, 0xC8	; 200
     ba2:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <velocity>
     ba6:	7c cf       	rjmp	.-264    	; 0xaa0 <move+0x16>
            forward();
            velocity(170,200);
            check=1;
        }

        else if((Center_white_line>0x010 && Right_white_line>0x010 && Left_white_line<=0x010) )
     ba8:	80 91 0a 02 	lds	r24, 0x020A
     bac:	81 31       	cpi	r24, 0x11	; 17
     bae:	08 f0       	brcs	.+2      	; 0xbb2 <move+0x128>
     bb0:	77 cf       	rjmp	.-274    	; 0xaa0 <move+0x16>
     bb2:	16 c0       	rjmp	.+44     	; 0xbe0 <move+0x156>
            velocity(200,200);
        }

        else if((Center_white_line>0x010 && Right_white_line<=0x10 && Left_white_line>0x010) )
        {
            flag=1;
     bb4:	c0 93 0b 02 	sts	0x020B, r28
            forward();
     bb8:	0e 94 a0 02 	call	0x540	; 0x540 <forward>
            velocity(170,200);
     bbc:	8a ea       	ldi	r24, 0xAA	; 170
     bbe:	68 ec       	ldi	r22, 0xC8	; 200
     bc0:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <velocity>
            check==1;
     bc4:	6d cf       	rjmp	.-294    	; 0xaa0 <move+0x16>
        }
        else if((Center_white_line<=0x010 && Right_white_line<=0x010 && Left_white_line>0x10))
        {
            flag=1;
     bc6:	c0 93 0b 02 	sts	0x020B, r28
            forward();
     bca:	0e 94 a0 02 	call	0x540	; 0x540 <forward>
            velocity(170,200);
     bce:	8a ea       	ldi	r24, 0xAA	; 170
     bd0:	68 ec       	ldi	r22, 0xC8	; 200
     bd2:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <velocity>
            check=1;
     bd6:	f0 92 86 02 	sts	0x0286, r15
     bda:	e0 92 85 02 	sts	0x0285, r14
     bde:	60 cf       	rjmp	.-320    	; 0xaa0 <move+0x16>
        }

        else if((Center_white_line>0x010 && Right_white_line>0x010 && Left_white_line<=0x010) )
        {
            flag=1;
     be0:	c0 93 0b 02 	sts	0x020B, r28
            forward();
     be4:	0e 94 a0 02 	call	0x540	; 0x540 <forward>
            velocity(200,170);
     be8:	88 ec       	ldi	r24, 0xC8	; 200
     bea:	6a ea       	ldi	r22, 0xAA	; 170
     bec:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <velocity>
            check=2;
     bf0:	10 93 86 02 	sts	0x0286, r17
     bf4:	00 93 85 02 	sts	0x0285, r16
     bf8:	53 cf       	rjmp	.-346    	; 0xaa0 <move+0x16>
        }
        else if((Center_white_line<=0x010 && Right_white_line>0x010 && Left_white_line<=0x010)  )
        {
            flag=1;
     bfa:	c0 93 0b 02 	sts	0x020B, r28
            forward();
     bfe:	0e 94 a0 02 	call	0x540	; 0x540 <forward>
            velocity(200,170);
     c02:	88 ec       	ldi	r24, 0xC8	; 200
     c04:	6a ea       	ldi	r22, 0xAA	; 170
     c06:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <velocity>
            check=2;
     c0a:	10 93 86 02 	sts	0x0286, r17
     c0e:	00 93 85 02 	sts	0x0285, r16
     c12:	46 cf       	rjmp	.-372    	; 0xaa0 <move+0x16>
            flag=1;
            forward();
            velocity(170,200);
            check==1;
        }
        else if((Center_white_line<=0x010 && Right_white_line<=0x010 && Left_white_line>0x10))
     c14:	80 91 0a 02 	lds	r24, 0x020A
     c18:	81 31       	cpi	r24, 0x11	; 17
     c1a:	08 f4       	brcc	.+2      	; 0xc1e <move+0x194>
     c1c:	41 cf       	rjmp	.-382    	; 0xaa0 <move+0x16>
     c1e:	d3 cf       	rjmp	.-90     	; 0xbc6 <move+0x13c>
            flag=1;
            forward();
            velocity(200,200);
        }

        else if((Center_white_line>0x010 && Right_white_line<=0x10 && Left_white_line>0x010) )
     c20:	80 91 0a 02 	lds	r24, 0x020A
     c24:	81 31       	cpi	r24, 0x11	; 17
     c26:	08 f4       	brcc	.+2      	; 0xc2a <move+0x1a0>
     c28:	3b cf       	rjmp	.-394    	; 0xaa0 <move+0x16>
     c2a:	c4 cf       	rjmp	.-120    	; 0xbb4 <move+0x12a>
            flag=1;
            forward();
            velocity(200,170);
            check=2;
        }
        else if((Center_white_line<=0x010 && Right_white_line>0x010 && Left_white_line<=0x010)  )
     c2c:	80 91 0a 02 	lds	r24, 0x020A
     c30:	81 31       	cpi	r24, 0x11	; 17
     c32:	08 f0       	brcs	.+2      	; 0xc36 <move+0x1ac>
     c34:	35 cf       	rjmp	.-406    	; 0xaa0 <move+0x16>
     c36:	e1 cf       	rjmp	.-62     	; 0xbfa <move+0x170>

00000c38 <move1>:
             line then turn right.
 
  * Example Call: move1();
  */
void move1(void)
{
     c38:	ef 92       	push	r14
     c3a:	ff 92       	push	r15
     c3c:	0f 93       	push	r16
     c3e:	1f 93       	push	r17
     c40:	cf 93       	push	r28
            velocity(200,150);
            check=2;
        }
        if((Center_white_line<=0x010 && Right_white_line>0x010 && Left_white_line<=0x010)  )
        {
            flag=1;
     c42:	c1 e0       	ldi	r28, 0x01	; 1
            forward();
            velocity(200,150);
            check=2;
     c44:	02 e0       	ldi	r16, 0x02	; 2
     c46:	10 e0       	ldi	r17, 0x00	; 0
        if((Center_white_line<=0x010 && Right_white_line<=0x010 && Left_white_line>0x10))
        {
            flag=1;
            forward();
            velocity(150,200);
            check=1;
     c48:	ee 24       	eor	r14, r14
     c4a:	ff 24       	eor	r15, r15
     c4c:	e3 94       	inc	r14
  */
void move1(void)
{
    while(1) 
    {
        Initialize_white_sensors();
     c4e:	0e 94 3a 04 	call	0x874	; 0x874 <Initialize_white_sensors>

        flag=0;
     c52:	10 92 0b 02 	sts	0x020B, r1



        if((Center_white_line>0x016 && Left_white_line>0x014)||(Center_white_line>0x016&&Right_white_line>0x014))
     c56:	80 91 09 02 	lds	r24, 0x0209
     c5a:	87 31       	cpi	r24, 0x17	; 23
     c5c:	c8 f0       	brcs	.+50     	; 0xc90 <move1+0x58>
     c5e:	90 91 0a 02 	lds	r25, 0x020A
     c62:	95 31       	cpi	r25, 0x15	; 21
     c64:	20 f4       	brcc	.+8      	; 0xc6e <move1+0x36>
     c66:	90 91 08 02 	lds	r25, 0x0208
     c6a:	95 31       	cpi	r25, 0x15	; 21
     c6c:	88 f0       	brcs	.+34     	; 0xc90 <move1+0x58>
        {
            stop();
     c6e:	0e 94 b4 02 	call	0x568	; 0x568 <stop>
     c72:	8f ef       	ldi	r24, 0xFF	; 255
     c74:	9f e7       	ldi	r25, 0x7F	; 127
     c76:	a4 e0       	ldi	r26, 0x04	; 4
     c78:	81 50       	subi	r24, 0x01	; 1
     c7a:	90 40       	sbci	r25, 0x00	; 0
     c7c:	a0 40       	sbci	r26, 0x00	; 0
     c7e:	e1 f7       	brne	.-8      	; 0xc78 <move1+0x40>
     c80:	00 c0       	rjmp	.+0      	; 0xc82 <move1+0x4a>
     c82:	00 00       	nop
            check=2;
        }

        
    }
}
     c84:	cf 91       	pop	r28
     c86:	1f 91       	pop	r17
     c88:	0f 91       	pop	r16
     c8a:	ff 90       	pop	r15
     c8c:	ef 90       	pop	r14
     c8e:	08 95       	ret
            stop();
            _delay_ms(100);
            break;
            
        }
        if (Center_white_line<=0x010 && Right_white_line<=0x010 && Left_white_line<=0x010)
     c90:	81 31       	cpi	r24, 0x11	; 17
     c92:	08 f0       	brcs	.+2      	; 0xc96 <move1+0x5e>
     c94:	50 c0       	rjmp	.+160    	; 0xd36 <move1+0xfe>
     c96:	90 91 08 02 	lds	r25, 0x0208
     c9a:	91 31       	cpi	r25, 0x11	; 17
     c9c:	08 f0       	brcs	.+2      	; 0xca0 <move1+0x68>
     c9e:	c2 c0       	rjmp	.+388    	; 0xe24 <move1+0x1ec>
     ca0:	20 91 0a 02 	lds	r18, 0x020A
     ca4:	21 31       	cpi	r18, 0x11	; 17
     ca6:	08 f0       	brcs	.+2      	; 0xcaa <move1+0x72>
     ca8:	73 c0       	rjmp	.+230    	; 0xd90 <move1+0x158>
        {
            if (Center_white_line>Left_white_line && Center_white_line>Right_white_line)
     caa:	28 17       	cp	r18, r24
     cac:	40 f4       	brcc	.+16     	; 0xcbe <move1+0x86>
     cae:	98 17       	cp	r25, r24
     cb0:	30 f4       	brcc	.+12     	; 0xcbe <move1+0x86>
            {
                forward();
     cb2:	0e 94 a0 02 	call	0x540	; 0x540 <forward>
                velocity(150,150);
     cb6:	86 e9       	ldi	r24, 0x96	; 150
     cb8:	66 e9       	ldi	r22, 0x96	; 150
     cba:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <velocity>
        
            }
            
            if (Right_white_line > Center_white_line)
     cbe:	90 91 08 02 	lds	r25, 0x0208
     cc2:	80 91 09 02 	lds	r24, 0x0209
     cc6:	89 17       	cp	r24, r25
     cc8:	30 f4       	brcc	.+12     	; 0xcd6 <move1+0x9e>
            {
                forward();
     cca:	0e 94 a0 02 	call	0x540	; 0x540 <forward>
                velocity(150,100);
     cce:	86 e9       	ldi	r24, 0x96	; 150
     cd0:	64 e6       	ldi	r22, 0x64	; 100
     cd2:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <velocity>
            }
            if (Left_white_line > Center_white_line)
     cd6:	90 91 0a 02 	lds	r25, 0x020A
     cda:	80 91 09 02 	lds	r24, 0x0209
     cde:	89 17       	cp	r24, r25
     ce0:	38 f4       	brcc	.+14     	; 0xcf0 <move1+0xb8>
            {
                forward();
     ce2:	0e 94 a0 02 	call	0x540	; 0x540 <forward>
                velocity(100,150);
     ce6:	84 e6       	ldi	r24, 0x64	; 100
     ce8:	66 e9       	ldi	r22, 0x96	; 150
     cea:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <velocity>
     cee:	02 c0       	rjmp	.+4      	; 0xcf4 <move1+0xbc>
            }
            else
            check_l();
     cf0:	0e 94 59 04 	call	0x8b2	; 0x8b2 <check_l>
            
            
        }
        
        
        if(Center_white_line<=0x010 && Right_white_line>0x010 && Left_white_line>0x010)
     cf4:	80 91 09 02 	lds	r24, 0x0209
     cf8:	81 31       	cpi	r24, 0x11	; 17
     cfa:	e8 f4       	brcc	.+58     	; 0xd36 <move1+0xfe>
     cfc:	90 91 08 02 	lds	r25, 0x0208
     d00:	91 31       	cpi	r25, 0x11	; 17
     d02:	08 f4       	brcc	.+2      	; 0xd06 <move1+0xce>
     d04:	45 c0       	rjmp	.+138    	; 0xd90 <move1+0x158>
     d06:	80 91 0a 02 	lds	r24, 0x020A
     d0a:	81 31       	cpi	r24, 0x11	; 17
     d0c:	08 f4       	brcc	.+2      	; 0xd10 <move1+0xd8>
     d0e:	40 c0       	rjmp	.+128    	; 0xd90 <move1+0x158>
        {
            if (Right_white_line>Left_white_line)
     d10:	89 17       	cp	r24, r25
     d12:	38 f4       	brcc	.+14     	; 0xd22 <move1+0xea>
            {
                
                forward();
     d14:	0e 94 a0 02 	call	0x540	; 0x540 <forward>
                velocity(200,150);
     d18:	88 ec       	ldi	r24, 0xC8	; 200
     d1a:	66 e9       	ldi	r22, 0x96	; 150
     d1c:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <velocity>
     d20:	06 c0       	rjmp	.+12     	; 0xd2e <move1+0xf6>
            }
            else
            {
                forward();
     d22:	0e 94 a0 02 	call	0x540	; 0x540 <forward>
                velocity(150,200);
     d26:	86 e9       	ldi	r24, 0x96	; 150
     d28:	68 ec       	ldi	r22, 0xC8	; 200
     d2a:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <velocity>
            }
        }

        if(Center_white_line>0x10 && Right_white_line<=0x010 && Left_white_line<=0x010)
     d2e:	80 91 09 02 	lds	r24, 0x0209
     d32:	81 31       	cpi	r24, 0x11	; 17
     d34:	68 f1       	brcs	.+90     	; 0xd90 <move1+0x158>
     d36:	80 91 08 02 	lds	r24, 0x0208
     d3a:	81 31       	cpi	r24, 0x11	; 17
     d3c:	08 f0       	brcs	.+2      	; 0xd40 <move1+0x108>
     d3e:	40 c0       	rjmp	.+128    	; 0xdc0 <move1+0x188>
     d40:	80 91 0a 02 	lds	r24, 0x020A
     d44:	81 31       	cpi	r24, 0x11	; 17
     d46:	80 f4       	brcc	.+32     	; 0xd68 <move1+0x130>
        {
            flag=1;
     d48:	c0 93 0b 02 	sts	0x020B, r28
            forward();
     d4c:	0e 94 a0 02 	call	0x540	; 0x540 <forward>
            velocity(200,200);
     d50:	88 ec       	ldi	r24, 0xC8	; 200
     d52:	68 ec       	ldi	r22, 0xC8	; 200
     d54:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <velocity>
        }

        if((Center_white_line>0x010 && Right_white_line<=0x10 && Left_white_line>0x010) )
     d58:	80 91 09 02 	lds	r24, 0x0209
     d5c:	81 31       	cpi	r24, 0x11	; 17
     d5e:	c0 f0       	brcs	.+48     	; 0xd90 <move1+0x158>
     d60:	80 91 08 02 	lds	r24, 0x0208
     d64:	81 31       	cpi	r24, 0x11	; 17
     d66:	60 f5       	brcc	.+88     	; 0xdc0 <move1+0x188>
     d68:	80 91 0a 02 	lds	r24, 0x020A
     d6c:	81 31       	cpi	r24, 0x11	; 17
     d6e:	40 f1       	brcs	.+80     	; 0xdc0 <move1+0x188>
        {
            flag=1;
     d70:	c0 93 0b 02 	sts	0x020B, r28
            forward();
     d74:	0e 94 a0 02 	call	0x540	; 0x540 <forward>
            velocity(150,200);
     d78:	86 e9       	ldi	r24, 0x96	; 150
     d7a:	68 ec       	ldi	r22, 0xC8	; 200
     d7c:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <velocity>
            check=1;
     d80:	f0 92 86 02 	sts	0x0286, r15
     d84:	e0 92 85 02 	sts	0x0285, r14
        }
        if((Center_white_line<=0x010 && Right_white_line<=0x010 && Left_white_line>0x10))
     d88:	80 91 09 02 	lds	r24, 0x0209
     d8c:	81 31       	cpi	r24, 0x11	; 17
     d8e:	c0 f4       	brcc	.+48     	; 0xdc0 <move1+0x188>
     d90:	80 91 08 02 	lds	r24, 0x0208
     d94:	81 31       	cpi	r24, 0x11	; 17
     d96:	78 f5       	brcc	.+94     	; 0xdf6 <move1+0x1be>
     d98:	80 91 0a 02 	lds	r24, 0x020A
     d9c:	81 31       	cpi	r24, 0x11	; 17
     d9e:	58 f1       	brcs	.+86     	; 0xdf6 <move1+0x1be>
        {
            flag=1;
     da0:	c0 93 0b 02 	sts	0x020B, r28
            forward();
     da4:	0e 94 a0 02 	call	0x540	; 0x540 <forward>
            velocity(150,200);
     da8:	86 e9       	ldi	r24, 0x96	; 150
     daa:	68 ec       	ldi	r22, 0xC8	; 200
     dac:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <velocity>
            check=1;
     db0:	f0 92 86 02 	sts	0x0286, r15
     db4:	e0 92 85 02 	sts	0x0285, r14
        }

        if((Center_white_line>0x010 && Right_white_line>0x010 && Left_white_line<=0x010) )
     db8:	80 91 09 02 	lds	r24, 0x0209
     dbc:	81 31       	cpi	r24, 0x11	; 17
     dbe:	d8 f0       	brcs	.+54     	; 0xdf6 <move1+0x1be>
     dc0:	80 91 08 02 	lds	r24, 0x0208
     dc4:	81 31       	cpi	r24, 0x11	; 17
     dc6:	08 f4       	brcc	.+2      	; 0xdca <move1+0x192>
     dc8:	42 cf       	rjmp	.-380    	; 0xc4e <move1+0x16>
     dca:	80 91 0a 02 	lds	r24, 0x020A
     dce:	81 31       	cpi	r24, 0x11	; 17
     dd0:	08 f0       	brcs	.+2      	; 0xdd4 <move1+0x19c>
     dd2:	3d cf       	rjmp	.-390    	; 0xc4e <move1+0x16>
        {
            flag=1;
     dd4:	c0 93 0b 02 	sts	0x020B, r28
            forward();
     dd8:	0e 94 a0 02 	call	0x540	; 0x540 <forward>
            velocity(200,150);
     ddc:	88 ec       	ldi	r24, 0xC8	; 200
     dde:	66 e9       	ldi	r22, 0x96	; 150
     de0:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <velocity>
            check=2;
     de4:	10 93 86 02 	sts	0x0286, r17
     de8:	00 93 85 02 	sts	0x0285, r16
        }
        if((Center_white_line<=0x010 && Right_white_line>0x010 && Left_white_line<=0x010)  )
     dec:	80 91 09 02 	lds	r24, 0x0209
     df0:	81 31       	cpi	r24, 0x11	; 17
     df2:	08 f0       	brcs	.+2      	; 0xdf6 <move1+0x1be>
     df4:	2c cf       	rjmp	.-424    	; 0xc4e <move1+0x16>
     df6:	80 91 08 02 	lds	r24, 0x0208
     dfa:	81 31       	cpi	r24, 0x11	; 17
     dfc:	08 f4       	brcc	.+2      	; 0xe00 <move1+0x1c8>
     dfe:	27 cf       	rjmp	.-434    	; 0xc4e <move1+0x16>
     e00:	80 91 0a 02 	lds	r24, 0x020A
     e04:	81 31       	cpi	r24, 0x11	; 17
     e06:	08 f0       	brcs	.+2      	; 0xe0a <move1+0x1d2>
     e08:	22 cf       	rjmp	.-444    	; 0xc4e <move1+0x16>
        {
            flag=1;
     e0a:	c0 93 0b 02 	sts	0x020B, r28
            forward();
     e0e:	0e 94 a0 02 	call	0x540	; 0x540 <forward>
            velocity(200,150);
     e12:	88 ec       	ldi	r24, 0xC8	; 200
     e14:	66 e9       	ldi	r22, 0x96	; 150
     e16:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <velocity>
            check=2;
     e1a:	10 93 86 02 	sts	0x0286, r17
     e1e:	00 93 85 02 	sts	0x0285, r16
     e22:	15 cf       	rjmp	.-470    	; 0xc4e <move1+0x16>
            
            
        }
        
        
        if(Center_white_line<=0x010 && Right_white_line>0x010 && Left_white_line>0x010)
     e24:	90 91 08 02 	lds	r25, 0x0208
     e28:	6e cf       	rjmp	.-292    	; 0xd06 <move1+0xce>

00000e2a <moveEast>:
  * Output:  set direction of bot towards east and call move function to follow line along east until next node detected
  * Example Call: moveEast()
  */
void moveEast()
{
    setangle(270); //Rotate robot towards east i.e. towards East direction
     e2a:	8e e0       	ldi	r24, 0x0E	; 14
     e2c:	91 e0       	ldi	r25, 0x01	; 1
     e2e:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <setangle>
     e32:	8f ef       	ldi	r24, 0xFF	; 255
     e34:	9f e7       	ldi	r25, 0x7F	; 127
     e36:	a6 e1       	ldi	r26, 0x16	; 22
     e38:	81 50       	subi	r24, 0x01	; 1
     e3a:	90 40       	sbci	r25, 0x00	; 0
     e3c:	a0 40       	sbci	r26, 0x00	; 0
     e3e:	e1 f7       	brne	.-8      	; 0xe38 <moveEast+0xe>
     e40:	00 c0       	rjmp	.+0      	; 0xe42 <moveEast+0x18>
     e42:	00 00       	nop
    _delay_ms(500);
    move(); //move the bot till next node is found
     e44:	0e 94 45 05 	call	0xa8a	; 0xa8a <move>
    cx++;    //increment of x-coordinate in east direction
     e48:	40 91 06 02 	lds	r20, 0x0206
     e4c:	50 91 07 02 	lds	r21, 0x0207
     e50:	4f 5f       	subi	r20, 0xFF	; 255
     e52:	5f 4f       	sbci	r21, 0xFF	; 255
     e54:	50 93 07 02 	sts	0x0207, r21
     e58:	40 93 06 02 	sts	0x0206, r20
    lcd_print(2,1,cx,1);    
     e5c:	82 e0       	ldi	r24, 0x02	; 2
     e5e:	61 e0       	ldi	r22, 0x01	; 1
     e60:	21 e0       	ldi	r18, 0x01	; 1
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	0e 94 6d 01 	call	0x2da	; 0x2da <lcd_print>
    lcd_print(2,3,cy,1);
     e68:	40 91 04 02 	lds	r20, 0x0204
     e6c:	50 91 05 02 	lds	r21, 0x0205
     e70:	82 e0       	ldi	r24, 0x02	; 2
     e72:	63 e0       	ldi	r22, 0x03	; 3
     e74:	21 e0       	ldi	r18, 0x01	; 1
     e76:	30 e0       	ldi	r19, 0x00	; 0
     e78:	0e 94 6d 01 	call	0x2da	; 0x2da <lcd_print>
     e7c:	a6 e6       	ldi	r26, 0x66	; 102
     e7e:	be e0       	ldi	r27, 0x0E	; 14
     e80:	11 97       	sbiw	r26, 0x01	; 1
     e82:	f1 f7       	brne	.-4      	; 0xe80 <moveEast+0x56>
     e84:	00 00       	nop
    _delay_ms(1);
    visited[cx][cy]=1;    //make the traversed node one
     e86:	80 91 06 02 	lds	r24, 0x0206
     e8a:	90 91 07 02 	lds	r25, 0x0207
     e8e:	fc 01       	movw	r30, r24
     e90:	ee 0f       	add	r30, r30
     e92:	ff 1f       	adc	r31, r31
     e94:	ee 0f       	add	r30, r30
     e96:	ff 1f       	adc	r31, r31
     e98:	ee 0f       	add	r30, r30
     e9a:	ff 1f       	adc	r31, r31
     e9c:	e8 1b       	sub	r30, r24
     e9e:	f9 0b       	sbc	r31, r25
     ea0:	80 91 04 02 	lds	r24, 0x0204
     ea4:	90 91 05 02 	lds	r25, 0x0205
     ea8:	e8 0f       	add	r30, r24
     eaa:	f9 1f       	adc	r31, r25
     eac:	ee 0f       	add	r30, r30
     eae:	ff 1f       	adc	r31, r31
     eb0:	ec 5e       	subi	r30, 0xEC	; 236
     eb2:	fd 4f       	sbci	r31, 0xFD	; 253
     eb4:	81 e0       	ldi	r24, 0x01	; 1
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	91 83       	std	Z+1, r25	; 0x01
     eba:	80 83       	st	Z, r24
}
     ebc:	08 95       	ret

00000ebe <moveWest>:
   * Output:  set direction of bot towards east and call move function to follow line along east until next node detected
   * Example Call: moveWest()
   */
 void moveWest()
{
    setangle(90); //Rotate robot left by 90 degree i.e. towards West direction
     ebe:	8a e5       	ldi	r24, 0x5A	; 90
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <setangle>
     ec6:	8f ef       	ldi	r24, 0xFF	; 255
     ec8:	9f e7       	ldi	r25, 0x7F	; 127
     eca:	a6 e1       	ldi	r26, 0x16	; 22
     ecc:	81 50       	subi	r24, 0x01	; 1
     ece:	90 40       	sbci	r25, 0x00	; 0
     ed0:	a0 40       	sbci	r26, 0x00	; 0
     ed2:	e1 f7       	brne	.-8      	; 0xecc <moveWest+0xe>
     ed4:	00 c0       	rjmp	.+0      	; 0xed6 <moveWest+0x18>
     ed6:	00 00       	nop
    _delay_ms(500);
    move (); //move the bot till next node is found
     ed8:	0e 94 45 05 	call	0xa8a	; 0xa8a <move>
    cx--;    //decrement in x-coordinate in West direction
     edc:	40 91 06 02 	lds	r20, 0x0206
     ee0:	50 91 07 02 	lds	r21, 0x0207
     ee4:	41 50       	subi	r20, 0x01	; 1
     ee6:	50 40       	sbci	r21, 0x00	; 0
     ee8:	50 93 07 02 	sts	0x0207, r21
     eec:	40 93 06 02 	sts	0x0206, r20
    lcd_print(2,1,cx,1);    
     ef0:	82 e0       	ldi	r24, 0x02	; 2
     ef2:	61 e0       	ldi	r22, 0x01	; 1
     ef4:	21 e0       	ldi	r18, 0x01	; 1
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	0e 94 6d 01 	call	0x2da	; 0x2da <lcd_print>
    lcd_print(2,3,cy,1);
     efc:	40 91 04 02 	lds	r20, 0x0204
     f00:	50 91 05 02 	lds	r21, 0x0205
     f04:	82 e0       	ldi	r24, 0x02	; 2
     f06:	63 e0       	ldi	r22, 0x03	; 3
     f08:	21 e0       	ldi	r18, 0x01	; 1
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	0e 94 6d 01 	call	0x2da	; 0x2da <lcd_print>
     f10:	a6 e6       	ldi	r26, 0x66	; 102
     f12:	be e0       	ldi	r27, 0x0E	; 14
     f14:	11 97       	sbiw	r26, 0x01	; 1
     f16:	f1 f7       	brne	.-4      	; 0xf14 <moveWest+0x56>
     f18:	00 00       	nop
    _delay_ms(1);
    visited[cx][cy]=1;  //make the traversed node one
     f1a:	80 91 06 02 	lds	r24, 0x0206
     f1e:	90 91 07 02 	lds	r25, 0x0207
     f22:	fc 01       	movw	r30, r24
     f24:	ee 0f       	add	r30, r30
     f26:	ff 1f       	adc	r31, r31
     f28:	ee 0f       	add	r30, r30
     f2a:	ff 1f       	adc	r31, r31
     f2c:	ee 0f       	add	r30, r30
     f2e:	ff 1f       	adc	r31, r31
     f30:	e8 1b       	sub	r30, r24
     f32:	f9 0b       	sbc	r31, r25
     f34:	80 91 04 02 	lds	r24, 0x0204
     f38:	90 91 05 02 	lds	r25, 0x0205
     f3c:	e8 0f       	add	r30, r24
     f3e:	f9 1f       	adc	r31, r25
     f40:	ee 0f       	add	r30, r30
     f42:	ff 1f       	adc	r31, r31
     f44:	ec 5e       	subi	r30, 0xEC	; 236
     f46:	fd 4f       	sbci	r31, 0xFD	; 253
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	91 83       	std	Z+1, r25	; 0x01
     f4e:	80 83       	st	Z, r24
}
     f50:	08 95       	ret

00000f52 <moveNorth>:
   * Output:  set direction of bot towards east and call move function to follow line along east until next node detected
   * Example Call: moveNorth()
   */
void moveNorth()
{
    setangle(0); //Rotate robot left by 0 degrees i.e toward north
     f52:	80 e0       	ldi	r24, 0x00	; 0
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <setangle>
     f5a:	8f ef       	ldi	r24, 0xFF	; 255
     f5c:	9f e7       	ldi	r25, 0x7F	; 127
     f5e:	a6 e1       	ldi	r26, 0x16	; 22
     f60:	81 50       	subi	r24, 0x01	; 1
     f62:	90 40       	sbci	r25, 0x00	; 0
     f64:	a0 40       	sbci	r26, 0x00	; 0
     f66:	e1 f7       	brne	.-8      	; 0xf60 <moveNorth+0xe>
     f68:	00 c0       	rjmp	.+0      	; 0xf6a <moveNorth+0x18>
     f6a:	00 00       	nop
    _delay_ms(500);
    move (); //move the bot till next node is found
     f6c:	0e 94 45 05 	call	0xa8a	; 0xa8a <move>
    cy++;  //increment in y-coordinate in North direction
     f70:	80 91 04 02 	lds	r24, 0x0204
     f74:	90 91 05 02 	lds	r25, 0x0205
     f78:	01 96       	adiw	r24, 0x01	; 1
     f7a:	90 93 05 02 	sts	0x0205, r25
     f7e:	80 93 04 02 	sts	0x0204, r24
    lcd_print(2,1,cx,1);    
     f82:	40 91 06 02 	lds	r20, 0x0206
     f86:	50 91 07 02 	lds	r21, 0x0207
     f8a:	82 e0       	ldi	r24, 0x02	; 2
     f8c:	61 e0       	ldi	r22, 0x01	; 1
     f8e:	21 e0       	ldi	r18, 0x01	; 1
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	0e 94 6d 01 	call	0x2da	; 0x2da <lcd_print>
    lcd_print(2,3,cy,1);
     f96:	40 91 04 02 	lds	r20, 0x0204
     f9a:	50 91 05 02 	lds	r21, 0x0205
     f9e:	82 e0       	ldi	r24, 0x02	; 2
     fa0:	63 e0       	ldi	r22, 0x03	; 3
     fa2:	21 e0       	ldi	r18, 0x01	; 1
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	0e 94 6d 01 	call	0x2da	; 0x2da <lcd_print>
     faa:	a6 e6       	ldi	r26, 0x66	; 102
     fac:	be e0       	ldi	r27, 0x0E	; 14
     fae:	11 97       	sbiw	r26, 0x01	; 1
     fb0:	f1 f7       	brne	.-4      	; 0xfae <moveNorth+0x5c>
     fb2:	00 00       	nop
    _delay_ms(1);
    visited[cx][cy]=1;  //make the traversed node one
     fb4:	80 91 06 02 	lds	r24, 0x0206
     fb8:	90 91 07 02 	lds	r25, 0x0207
     fbc:	fc 01       	movw	r30, r24
     fbe:	ee 0f       	add	r30, r30
     fc0:	ff 1f       	adc	r31, r31
     fc2:	ee 0f       	add	r30, r30
     fc4:	ff 1f       	adc	r31, r31
     fc6:	ee 0f       	add	r30, r30
     fc8:	ff 1f       	adc	r31, r31
     fca:	e8 1b       	sub	r30, r24
     fcc:	f9 0b       	sbc	r31, r25
     fce:	80 91 04 02 	lds	r24, 0x0204
     fd2:	90 91 05 02 	lds	r25, 0x0205
     fd6:	e8 0f       	add	r30, r24
     fd8:	f9 1f       	adc	r31, r25
     fda:	ee 0f       	add	r30, r30
     fdc:	ff 1f       	adc	r31, r31
     fde:	ec 5e       	subi	r30, 0xEC	; 236
     fe0:	fd 4f       	sbci	r31, 0xFD	; 253
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	91 83       	std	Z+1, r25	; 0x01
     fe8:	80 83       	st	Z, r24

}
     fea:	08 95       	ret

00000fec <moveSouth>:
   * Output:  set direction of bot towards east and call move function to follow line along east until next node detected
   * Example Call: moveSouth()
   */
 void moveSouth()
{
    setangle(180); //Rotate robot left by 180 degrees i.e towards south
     fec:	84 eb       	ldi	r24, 0xB4	; 180
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <setangle>
     ff4:	8f ef       	ldi	r24, 0xFF	; 255
     ff6:	9f e7       	ldi	r25, 0x7F	; 127
     ff8:	a6 e1       	ldi	r26, 0x16	; 22
     ffa:	81 50       	subi	r24, 0x01	; 1
     ffc:	90 40       	sbci	r25, 0x00	; 0
     ffe:	a0 40       	sbci	r26, 0x00	; 0
    1000:	e1 f7       	brne	.-8      	; 0xffa <moveSouth+0xe>
    1002:	00 c0       	rjmp	.+0      	; 0x1004 <moveSouth+0x18>
    1004:	00 00       	nop
    _delay_ms(500);
    move ();  //calling move function to move till next node is not found
    1006:	0e 94 45 05 	call	0xa8a	; 0xa8a <move>
    cy--;     //decrement in y-coordinate in south direction
    100a:	80 91 04 02 	lds	r24, 0x0204
    100e:	90 91 05 02 	lds	r25, 0x0205
    1012:	01 97       	sbiw	r24, 0x01	; 1
    1014:	90 93 05 02 	sts	0x0205, r25
    1018:	80 93 04 02 	sts	0x0204, r24
    lcd_print(2,1,cx,1);    
    101c:	40 91 06 02 	lds	r20, 0x0206
    1020:	50 91 07 02 	lds	r21, 0x0207
    1024:	82 e0       	ldi	r24, 0x02	; 2
    1026:	61 e0       	ldi	r22, 0x01	; 1
    1028:	21 e0       	ldi	r18, 0x01	; 1
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	0e 94 6d 01 	call	0x2da	; 0x2da <lcd_print>
    lcd_print(2,3,cy,1);
    1030:	40 91 04 02 	lds	r20, 0x0204
    1034:	50 91 05 02 	lds	r21, 0x0205
    1038:	82 e0       	ldi	r24, 0x02	; 2
    103a:	63 e0       	ldi	r22, 0x03	; 3
    103c:	21 e0       	ldi	r18, 0x01	; 1
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	0e 94 6d 01 	call	0x2da	; 0x2da <lcd_print>
    1044:	a6 e6       	ldi	r26, 0x66	; 102
    1046:	be e0       	ldi	r27, 0x0E	; 14
    1048:	11 97       	sbiw	r26, 0x01	; 1
    104a:	f1 f7       	brne	.-4      	; 0x1048 <moveSouth+0x5c>
    104c:	00 00       	nop
    _delay_ms(1);
    visited[cx][cy]=1; //make the traversed node one
    104e:	80 91 06 02 	lds	r24, 0x0206
    1052:	90 91 07 02 	lds	r25, 0x0207
    1056:	fc 01       	movw	r30, r24
    1058:	ee 0f       	add	r30, r30
    105a:	ff 1f       	adc	r31, r31
    105c:	ee 0f       	add	r30, r30
    105e:	ff 1f       	adc	r31, r31
    1060:	ee 0f       	add	r30, r30
    1062:	ff 1f       	adc	r31, r31
    1064:	e8 1b       	sub	r30, r24
    1066:	f9 0b       	sbc	r31, r25
    1068:	80 91 04 02 	lds	r24, 0x0204
    106c:	90 91 05 02 	lds	r25, 0x0205
    1070:	e8 0f       	add	r30, r24
    1072:	f9 1f       	adc	r31, r25
    1074:	ee 0f       	add	r30, r30
    1076:	ff 1f       	adc	r31, r31
    1078:	ec 5e       	subi	r30, 0xEC	; 236
    107a:	fd 4f       	sbci	r31, 0xFD	; 253
    107c:	81 e0       	ldi	r24, 0x01	; 1
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	91 83       	std	Z+1, r25	; 0x01
    1082:	80 83       	st	Z, r24
}
    1084:	08 95       	ret

00001086 <matrixInitialise>:
  * Logic:     Two for loops are used to access all nodes of matrix and each point is a object of node this matrix keep data of points and help in 
             finding points which are accesible.
  * Example Call: matrixInitialise(5,2);
  */
 void matrixInitialise(int finalPointX,int finalPointY)
 {
    1086:	2f 92       	push	r2
    1088:	3f 92       	push	r3
    108a:	4f 92       	push	r4
    108c:	5f 92       	push	r5
    108e:	6f 92       	push	r6
    1090:	7f 92       	push	r7
    1092:	8f 92       	push	r8
    1094:	9f 92       	push	r9
    1096:	bf 92       	push	r11
    1098:	cf 92       	push	r12
    109a:	df 92       	push	r13
    109c:	ef 92       	push	r14
    109e:	ff 92       	push	r15
    10a0:	0f 93       	push	r16
    10a2:	1f 93       	push	r17
    10a4:	cf 93       	push	r28
    10a6:	df 93       	push	r29
    10a8:	cd b7       	in	r28, 0x3d	; 61
    10aa:	de b7       	in	r29, 0x3e	; 62
    10ac:	2a 97       	sbiw	r28, 0x0a	; 10
    10ae:	0f b6       	in	r0, 0x3f	; 63
    10b0:	f8 94       	cli
    10b2:	de bf       	out	0x3e, r29	; 62
    10b4:	0f be       	out	0x3f, r0	; 63
    10b6:	cd bf       	out	0x3d, r28	; 61
    10b8:	2c 01       	movw	r4, r24
    10ba:	7e 83       	std	Y+6, r23	; 0x06
    10bc:	6d 83       	std	Y+5, r22	; 0x05
     for(int j=0;j<7;j++)
    10be:	80 91 00 02 	lds	r24, 0x0200
    10c2:	90 91 01 02 	lds	r25, 0x0201
    10c6:	98 87       	std	Y+8, r25	; 0x08
    10c8:	8f 83       	std	Y+7, r24	; 0x07
  * Output:  This function initialize the nodes and calculate G value and displacement of the points, set point as obstacle or validity of point 
  * Logic:     Two for loops are used to access all nodes of matrix and each point is a object of node this matrix keep data of points and help in 
             finding points which are accesible.
  * Example Call: matrixInitialise(5,2);
  */
 void matrixInitialise(int finalPointX,int finalPointY)
    10ca:	4c 01       	movw	r8, r24
 {
     for(int j=0;j<7;j++)
    10cc:	cc 24       	eor	r12, r12
    10ce:	dd 24       	eor	r13, r13
    10d0:	36 01       	movw	r6, r12
    10d2:	5a 82       	std	Y+2, r5	; 0x02
    10d4:	49 82       	std	Y+1, r4	; 0x01
    10d6:	52 c0       	rjmp	.+164    	; 0x117c <matrixInitialise+0xf6>
  * Output:  This function initialize the nodes and calculate G value and displacement of the points, set point as obstacle or validity of point 
  * Logic:     Two for loops are used to access all nodes of matrix and each point is a object of node this matrix keep data of points and help in 
             finding points which are accesible.
  * Example Call: matrixInitialise(5,2);
  */
 void matrixInitialise(int finalPointX,int finalPointY)
    10d8:	e9 84       	ldd	r14, Y+9	; 0x09
    10da:	fa 84       	ldd	r15, Y+10	; 0x0a
 {
     for(int j=0;j<7;j++)
     {
         for(int i=0;i<7;i++)
         {
             matrix[i][j].x=i;
    10dc:	f7 01       	movw	r30, r14
    10de:	11 83       	std	Z+1, r17	; 0x01
    10e0:	00 83       	st	Z, r16
             matrix[i][j].y=j;
    10e2:	73 82       	std	Z+3, r7	; 0x03
    10e4:	62 82       	std	Z+2, r6	; 0x02
  * Output:  This function initialize the nodes and calculate G value and displacement of the points, set point as obstacle or validity of point 
  * Logic:     Two for loops are used to access all nodes of matrix and each point is a object of node this matrix keep data of points and help in 
             finding points which are accesible.
  * Example Call: matrixInitialise(5,2);
  */
 void matrixInitialise(int finalPointX,int finalPointY)
    10e6:	c8 01       	movw	r24, r16
    10e8:	88 0d       	add	r24, r8
    10ea:	99 1d       	adc	r25, r9
     {
         for(int i=0;i<7;i++)
         {
             matrix[i][j].x=i;
             matrix[i][j].y=j;
             matrix[i][j].nodeNo=nodeCount;
    10ec:	95 83       	std	Z+5, r25	; 0x05
    10ee:	84 83       	std	Z+4, r24	; 0x04
  * Output:  This function initialize the nodes and calculate G value and displacement of the points, set point as obstacle or validity of point 
  * Logic:     Two for loops are used to access all nodes of matrix and each point is a object of node this matrix keep data of points and help in 
             finding points which are accesible.
  * Example Call: matrixInitialise(5,2);
  */
 void matrixInitialise(int finalPointX,int finalPointY)
    10f0:	29 81       	ldd	r18, Y+1	; 0x01
    10f2:	3a 81       	ldd	r19, Y+2	; 0x02
    10f4:	20 1b       	sub	r18, r16
    10f6:	31 0b       	sbc	r19, r17
         for(int i=0;i<7;i++)
         {
             matrix[i][j].x=i;
             matrix[i][j].y=j;
             matrix[i][j].nodeNo=nodeCount;
             matrix[i][j].g=abs(finalPointX-i)+abs(finalPointY-j);
    10f8:	a9 01       	movw	r20, r18
    10fa:	22 f4       	brpl	.+8      	; 0x1104 <matrixInitialise+0x7e>
    10fc:	44 27       	eor	r20, r20
    10fe:	55 27       	eor	r21, r21
    1100:	42 1b       	sub	r20, r18
    1102:	53 0b       	sbc	r21, r19
    1104:	8c 2d       	mov	r24, r12
    1106:	9b 2d       	mov	r25, r11
    1108:	55 20       	and	r5, r5
    110a:	14 f4       	brge	.+4      	; 0x1110 <matrixInitialise+0x8a>
    110c:	8b 81       	ldd	r24, Y+3	; 0x03
    110e:	9c 81       	ldd	r25, Y+4	; 0x04
    1110:	84 0f       	add	r24, r20
    1112:	95 1f       	adc	r25, r21
    1114:	f7 01       	movw	r30, r14
    1116:	91 87       	std	Z+9, r25	; 0x09
    1118:	80 87       	std	Z+8, r24	; 0x08
             matrix[i][j].obstacle=0;
    111a:	15 86       	std	Z+13, r1	; 0x0d
    111c:	14 86       	std	Z+12, r1	; 0x0c
             matrix[i][j].visited=0;
    111e:	13 86       	std	Z+11, r1	; 0x0b
    1120:	12 86       	std	Z+10, r1	; 0x0a
             matrix[i][j].displacement= (finalPointX-i)*(finalPointX-i)+(finalPointY-j)*(finalPointY-j);
    1122:	22 9f       	mul	r18, r18
    1124:	b0 01       	movw	r22, r0
    1126:	23 9f       	mul	r18, r19
    1128:	70 0d       	add	r23, r0
    112a:	32 9f       	mul	r19, r18
    112c:	70 0d       	add	r23, r0
    112e:	11 24       	eor	r1, r1
    1130:	62 0d       	add	r22, r2
    1132:	73 1d       	adc	r23, r3
    1134:	88 27       	eor	r24, r24
    1136:	77 fd       	sbrc	r23, 7
    1138:	80 95       	com	r24
    113a:	98 2f       	mov	r25, r24
    113c:	0e 94 d6 11 	call	0x23ac	; 0x23ac <__floatsisf>
    1140:	dc 01       	movw	r26, r24
    1142:	cb 01       	movw	r24, r22
    1144:	f7 01       	movw	r30, r14
    1146:	80 8b       	std	Z+16, r24	; 0x10
    1148:	91 8b       	std	Z+17, r25	; 0x11
    114a:	a2 8b       	std	Z+18, r26	; 0x12
    114c:	b3 8b       	std	Z+19, r27	; 0x13
  */
 void matrixInitialise(int finalPointX,int finalPointY)
 {
     for(int j=0;j<7;j++)
     {
         for(int i=0;i<7;i++)
    114e:	0f 5f       	subi	r16, 0xFF	; 255
    1150:	1f 4f       	sbci	r17, 0xFF	; 255
    1152:	89 85       	ldd	r24, Y+9	; 0x09
    1154:	9a 85       	ldd	r25, Y+10	; 0x0a
    1156:	84 57       	subi	r24, 0x74	; 116
    1158:	9f 4f       	sbci	r25, 0xFF	; 255
    115a:	9a 87       	std	Y+10, r25	; 0x0a
    115c:	89 87       	std	Y+9, r24	; 0x09
    115e:	07 30       	cpi	r16, 0x07	; 7
    1160:	11 05       	cpc	r17, r1
    1162:	09 f0       	breq	.+2      	; 0x1166 <matrixInitialise+0xe0>
    1164:	b9 cf       	rjmp	.-142    	; 0x10d8 <matrixInitialise+0x52>
    1166:	e7 e0       	ldi	r30, 0x07	; 7
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	8e 0e       	add	r8, r30
    116c:	9f 1e       	adc	r9, r31
             finding points which are accesible.
  * Example Call: matrixInitialise(5,2);
  */
 void matrixInitialise(int finalPointX,int finalPointY)
 {
     for(int j=0;j<7;j++)
    116e:	08 94       	sec
    1170:	61 1c       	adc	r6, r1
    1172:	71 1c       	adc	r7, r1
    1174:	f7 e0       	ldi	r31, 0x07	; 7
    1176:	6f 16       	cp	r6, r31
    1178:	71 04       	cpc	r7, r1
    117a:	61 f1       	breq	.+88     	; 0x11d4 <matrixInitialise+0x14e>
  * Output:  This function initialize the nodes and calculate G value and displacement of the points, set point as obstacle or validity of point 
  * Logic:     Two for loops are used to access all nodes of matrix and each point is a object of node this matrix keep data of points and help in 
             finding points which are accesible.
  * Example Call: matrixInitialise(5,2);
  */
 void matrixInitialise(int finalPointX,int finalPointY)
    117c:	4d 80       	ldd	r4, Y+5	; 0x05
    117e:	5e 80       	ldd	r5, Y+6	; 0x06
    1180:	46 18       	sub	r4, r6
    1182:	57 08       	sbc	r5, r7
             matrix[i][j].y=j;
             matrix[i][j].nodeNo=nodeCount;
             matrix[i][j].g=abs(finalPointX-i)+abs(finalPointY-j);
             matrix[i][j].obstacle=0;
             matrix[i][j].visited=0;
             matrix[i][j].displacement= (finalPointX-i)*(finalPointX-i)+(finalPointY-j)*(finalPointY-j);
    1184:	44 9c       	mul	r4, r4
    1186:	10 01       	movw	r2, r0
    1188:	45 9c       	mul	r4, r5
    118a:	30 0c       	add	r3, r0
    118c:	54 9c       	mul	r5, r4
    118e:	30 0c       	add	r3, r0
    1190:	11 24       	eor	r1, r1
  * Output:  This function initialize the nodes and calculate G value and displacement of the points, set point as obstacle or validity of point 
  * Logic:     Two for loops are used to access all nodes of matrix and each point is a object of node this matrix keep data of points and help in 
             finding points which are accesible.
  * Example Call: matrixInitialise(5,2);
  */
 void matrixInitialise(int finalPointX,int finalPointY)
    1192:	c3 01       	movw	r24, r6
    1194:	88 0f       	add	r24, r24
    1196:	99 1f       	adc	r25, r25
    1198:	88 0f       	add	r24, r24
    119a:	99 1f       	adc	r25, r25
    119c:	9c 01       	movw	r18, r24
    119e:	22 0f       	add	r18, r18
    11a0:	33 1f       	adc	r19, r19
    11a2:	22 0f       	add	r18, r18
    11a4:	33 1f       	adc	r19, r19
    11a6:	82 0f       	add	r24, r18
    11a8:	93 1f       	adc	r25, r19
    11aa:	0f 2e       	mov	r0, r31
    11ac:	f9 e8       	ldi	r31, 0x89	; 137
    11ae:	ef 2e       	mov	r14, r31
    11b0:	f2 e0       	ldi	r31, 0x02	; 2
    11b2:	ff 2e       	mov	r15, r31
    11b4:	f0 2d       	mov	r31, r0
    11b6:	e8 0e       	add	r14, r24
    11b8:	f9 1e       	adc	r15, r25
    11ba:	00 e0       	ldi	r16, 0x00	; 0
    11bc:	10 e0       	ldi	r17, 0x00	; 0
         for(int i=0;i<7;i++)
         {
             matrix[i][j].x=i;
             matrix[i][j].y=j;
             matrix[i][j].nodeNo=nodeCount;
             matrix[i][j].g=abs(finalPointX-i)+abs(finalPointY-j);
    11be:	c4 2c       	mov	r12, r4
    11c0:	b5 2c       	mov	r11, r5
    11c2:	88 27       	eor	r24, r24
    11c4:	99 27       	eor	r25, r25
    11c6:	84 19       	sub	r24, r4
    11c8:	95 09       	sbc	r25, r5
    11ca:	9c 83       	std	Y+4, r25	; 0x04
    11cc:	8b 83       	std	Y+3, r24	; 0x03
    11ce:	fa 86       	std	Y+10, r15	; 0x0a
    11d0:	e9 86       	std	Y+9, r14	; 0x09
    11d2:	82 cf       	rjmp	.-252    	; 0x10d8 <matrixInitialise+0x52>
             matrix[i][j].obstacle=0;
             matrix[i][j].visited=0;
             matrix[i][j].displacement= (finalPointX-i)*(finalPointX-i)+(finalPointY-j)*(finalPointY-j);
    11d4:	8f 81       	ldd	r24, Y+7	; 0x07
    11d6:	98 85       	ldd	r25, Y+8	; 0x08
    11d8:	c1 96       	adiw	r24, 0x31	; 49
    11da:	90 93 01 02 	sts	0x0201, r25
    11de:	80 93 00 02 	sts	0x0200, r24
             nodeCount++;
         }
     }
     matrix[Tx[0]][Ty[0]].obstacle=2;
    11e2:	60 91 73 06 	lds	r22, 0x0673
    11e6:	70 91 74 06 	lds	r23, 0x0674
    11ea:	a9 e8       	ldi	r26, 0x89	; 137
    11ec:	b2 e0       	ldi	r27, 0x02	; 2
    11ee:	40 91 5d 06 	lds	r20, 0x065D
    11f2:	50 91 5e 06 	lds	r21, 0x065E
    11f6:	44 0f       	add	r20, r20
    11f8:	55 1f       	adc	r21, r21
    11fa:	44 0f       	add	r20, r20
    11fc:	55 1f       	adc	r21, r21
    11fe:	9a 01       	movw	r18, r20
    1200:	22 0f       	add	r18, r18
    1202:	33 1f       	adc	r19, r19
    1204:	22 0f       	add	r18, r18
    1206:	33 1f       	adc	r19, r19
    1208:	24 0f       	add	r18, r20
    120a:	35 1f       	adc	r19, r21
    120c:	4c e8       	ldi	r20, 0x8C	; 140
    120e:	50 e0       	ldi	r21, 0x00	; 0
    1210:	64 9f       	mul	r22, r20
    1212:	c0 01       	movw	r24, r0
    1214:	65 9f       	mul	r22, r21
    1216:	90 0d       	add	r25, r0
    1218:	74 9f       	mul	r23, r20
    121a:	90 0d       	add	r25, r0
    121c:	11 24       	eor	r1, r1
    121e:	82 0f       	add	r24, r18
    1220:	93 1f       	adc	r25, r19
    1222:	fd 01       	movw	r30, r26
    1224:	e8 0f       	add	r30, r24
    1226:	f9 1f       	adc	r31, r25
    1228:	62 e0       	ldi	r22, 0x02	; 2
    122a:	70 e0       	ldi	r23, 0x00	; 0
    122c:	75 87       	std	Z+13, r23	; 0x0d
    122e:	64 87       	std	Z+12, r22	; 0x0c
     matrix[Tx[1]][Ty[1]].obstacle=2;
    1230:	e0 91 75 06 	lds	r30, 0x0675
    1234:	f0 91 76 06 	lds	r31, 0x0676
    1238:	80 91 5f 06 	lds	r24, 0x065F
    123c:	90 91 60 06 	lds	r25, 0x0660
    1240:	88 0f       	add	r24, r24
    1242:	99 1f       	adc	r25, r25
    1244:	88 0f       	add	r24, r24
    1246:	99 1f       	adc	r25, r25
    1248:	9c 01       	movw	r18, r24
    124a:	22 0f       	add	r18, r18
    124c:	33 1f       	adc	r19, r19
    124e:	22 0f       	add	r18, r18
    1250:	33 1f       	adc	r19, r19
    1252:	28 0f       	add	r18, r24
    1254:	39 1f       	adc	r19, r25
    1256:	e4 9f       	mul	r30, r20
    1258:	c0 01       	movw	r24, r0
    125a:	e5 9f       	mul	r30, r21
    125c:	90 0d       	add	r25, r0
    125e:	f4 9f       	mul	r31, r20
    1260:	90 0d       	add	r25, r0
    1262:	11 24       	eor	r1, r1
    1264:	82 0f       	add	r24, r18
    1266:	93 1f       	adc	r25, r19
    1268:	fd 01       	movw	r30, r26
    126a:	e8 0f       	add	r30, r24
    126c:	f9 1f       	adc	r31, r25
    126e:	75 87       	std	Z+13, r23	; 0x0d
    1270:	64 87       	std	Z+12, r22	; 0x0c
     matrix[Tx[2]][Ty[2]].obstacle=2;
    1272:	e0 91 77 06 	lds	r30, 0x0677
    1276:	f0 91 78 06 	lds	r31, 0x0678
    127a:	80 91 61 06 	lds	r24, 0x0661
    127e:	90 91 62 06 	lds	r25, 0x0662
    1282:	88 0f       	add	r24, r24
    1284:	99 1f       	adc	r25, r25
    1286:	88 0f       	add	r24, r24
    1288:	99 1f       	adc	r25, r25
    128a:	9c 01       	movw	r18, r24
    128c:	22 0f       	add	r18, r18
    128e:	33 1f       	adc	r19, r19
    1290:	22 0f       	add	r18, r18
    1292:	33 1f       	adc	r19, r19
    1294:	28 0f       	add	r18, r24
    1296:	39 1f       	adc	r19, r25
    1298:	e4 9f       	mul	r30, r20
    129a:	c0 01       	movw	r24, r0
    129c:	e5 9f       	mul	r30, r21
    129e:	90 0d       	add	r25, r0
    12a0:	f4 9f       	mul	r31, r20
    12a2:	90 0d       	add	r25, r0
    12a4:	11 24       	eor	r1, r1
    12a6:	82 0f       	add	r24, r18
    12a8:	93 1f       	adc	r25, r19
    12aa:	a8 0f       	add	r26, r24
    12ac:	b9 1f       	adc	r27, r25
    12ae:	1d 96       	adiw	r26, 0x0d	; 13
    12b0:	7c 93       	st	X, r23
    12b2:	6e 93       	st	-X, r22
    12b4:	1c 97       	sbiw	r26, 0x0c	; 12
 }
    12b6:	2a 96       	adiw	r28, 0x0a	; 10
    12b8:	0f b6       	in	r0, 0x3f	; 63
    12ba:	f8 94       	cli
    12bc:	de bf       	out	0x3e, r29	; 62
    12be:	0f be       	out	0x3f, r0	; 63
    12c0:	cd bf       	out	0x3d, r28	; 61
    12c2:	df 91       	pop	r29
    12c4:	cf 91       	pop	r28
    12c6:	1f 91       	pop	r17
    12c8:	0f 91       	pop	r16
    12ca:	ff 90       	pop	r15
    12cc:	ef 90       	pop	r14
    12ce:	df 90       	pop	r13
    12d0:	cf 90       	pop	r12
    12d2:	bf 90       	pop	r11
    12d4:	9f 90       	pop	r9
    12d6:	8f 90       	pop	r8
    12d8:	7f 90       	pop	r7
    12da:	6f 90       	pop	r6
    12dc:	5f 90       	pop	r5
    12de:	4f 90       	pop	r4
    12e0:	3f 90       	pop	r3
    12e2:	2f 90       	pop	r2
    12e4:	08 95       	ret

000012e6 <inrange>:
   * Output:        output is 1 if obstacle is not present and point is inside matrix and not visited too 
   * Logic:            if value of x and y is between 0 and 7 and obstacle value is 0 and point is not visited then this value is true 
   * Example Call:  inrange(2,5)
   */
 int inrange(int x,int y)
 {
    12e6:	ac 01       	movw	r20, r24
     
     if((x<7&&x>=0)&&(y<7&&y>=0)&&(matrix[x][y].obstacle==0)&&(matrix[x][y].visited==0))
    12e8:	87 30       	cpi	r24, 0x07	; 7
    12ea:	91 05       	cpc	r25, r1
    12ec:	08 f0       	brcs	.+2      	; 0x12f0 <inrange+0xa>
    12ee:	46 c0       	rjmp	.+140    	; 0x137c <inrange+0x96>
    12f0:	67 30       	cpi	r22, 0x07	; 7
    12f2:	71 05       	cpc	r23, r1
    12f4:	08 f0       	brcs	.+2      	; 0x12f8 <inrange+0x12>
    12f6:	45 c0       	rjmp	.+138    	; 0x1382 <inrange+0x9c>
    12f8:	cb 01       	movw	r24, r22
    12fa:	88 0f       	add	r24, r24
    12fc:	99 1f       	adc	r25, r25
    12fe:	88 0f       	add	r24, r24
    1300:	99 1f       	adc	r25, r25
    1302:	9c 01       	movw	r18, r24
    1304:	22 0f       	add	r18, r18
    1306:	33 1f       	adc	r19, r19
    1308:	22 0f       	add	r18, r18
    130a:	33 1f       	adc	r19, r19
    130c:	fc 01       	movw	r30, r24
    130e:	e2 0f       	add	r30, r18
    1310:	f3 1f       	adc	r31, r19
    1312:	8c e8       	ldi	r24, 0x8C	; 140
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	48 9f       	mul	r20, r24
    1318:	90 01       	movw	r18, r0
    131a:	49 9f       	mul	r20, r25
    131c:	30 0d       	add	r19, r0
    131e:	58 9f       	mul	r21, r24
    1320:	30 0d       	add	r19, r0
    1322:	11 24       	eor	r1, r1
    1324:	e2 0f       	add	r30, r18
    1326:	f3 1f       	adc	r31, r19
    1328:	e7 57       	subi	r30, 0x77	; 119
    132a:	fd 4f       	sbci	r31, 0xFD	; 253
    132c:	84 85       	ldd	r24, Z+12	; 0x0c
    132e:	95 85       	ldd	r25, Z+13	; 0x0d
    1330:	00 97       	sbiw	r24, 0x00	; 0
    1332:	51 f5       	brne	.+84     	; 0x1388 <inrange+0xa2>
    1334:	cb 01       	movw	r24, r22
    1336:	88 0f       	add	r24, r24
    1338:	99 1f       	adc	r25, r25
    133a:	88 0f       	add	r24, r24
    133c:	99 1f       	adc	r25, r25
    133e:	9c 01       	movw	r18, r24
    1340:	22 0f       	add	r18, r18
    1342:	33 1f       	adc	r19, r19
    1344:	22 0f       	add	r18, r18
    1346:	33 1f       	adc	r19, r19
    1348:	28 0f       	add	r18, r24
    134a:	39 1f       	adc	r19, r25
    134c:	8c e8       	ldi	r24, 0x8C	; 140
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	48 9f       	mul	r20, r24
    1352:	b0 01       	movw	r22, r0
    1354:	49 9f       	mul	r20, r25
    1356:	70 0d       	add	r23, r0
    1358:	58 9f       	mul	r21, r24
    135a:	70 0d       	add	r23, r0
    135c:	11 24       	eor	r1, r1
    135e:	62 0f       	add	r22, r18
    1360:	73 1f       	adc	r23, r19
    1362:	fb 01       	movw	r30, r22
    1364:	e7 57       	subi	r30, 0x77	; 119
    1366:	fd 4f       	sbci	r31, 0xFD	; 253
   * Input:            x,y  these variable are coordinate of point  
   * Output:        output is 1 if obstacle is not present and point is inside matrix and not visited too 
   * Logic:            if value of x and y is between 0 and 7 and obstacle value is 0 and point is not visited then this value is true 
   * Example Call:  inrange(2,5)
   */
 int inrange(int x,int y)
    1368:	81 e0       	ldi	r24, 0x01	; 1
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	22 85       	ldd	r18, Z+10	; 0x0a
    136e:	33 85       	ldd	r19, Z+11	; 0x0b
    1370:	21 15       	cp	r18, r1
    1372:	31 05       	cpc	r19, r1
    1374:	59 f0       	breq	.+22     	; 0x138c <inrange+0xa6>
    1376:	80 e0       	ldi	r24, 0x00	; 0
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	08 95       	ret
 {
     
     if((x<7&&x>=0)&&(y<7&&y>=0)&&(matrix[x][y].obstacle==0)&&(matrix[x][y].visited==0))
     return 1;//true
     else return 0;
    137c:	80 e0       	ldi	r24, 0x00	; 0
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	08 95       	ret
    1382:	80 e0       	ldi	r24, 0x00	; 0
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	08 95       	ret
    1388:	80 e0       	ldi	r24, 0x00	; 0
    138a:	90 e0       	ldi	r25, 0x00	; 0
     
 }
    138c:	08 95       	ret

0000138e <isValid_and_smallg>:
   * Logic:                takes a point and check points to its east west north south , find valid points from these and return point point with least
                        G value and displacement. points which are out of range are given g value of 200 
   * Example Call:      isValid_and_smallg();
   */
 struct node isValid_and_smallg()
 {    struct node objw,obje,objn,objs;
    138e:	2f 92       	push	r2
    1390:	3f 92       	push	r3
    1392:	4f 92       	push	r4
    1394:	5f 92       	push	r5
    1396:	6f 92       	push	r6
    1398:	7f 92       	push	r7
    139a:	9f 92       	push	r9
    139c:	af 92       	push	r10
    139e:	bf 92       	push	r11
    13a0:	cf 92       	push	r12
    13a2:	df 92       	push	r13
    13a4:	ef 92       	push	r14
    13a6:	ff 92       	push	r15
    13a8:	0f 93       	push	r16
    13aa:	1f 93       	push	r17
    13ac:	cf 93       	push	r28
    13ae:	df 93       	push	r29
    13b0:	cd b7       	in	r28, 0x3d	; 61
    13b2:	de b7       	in	r29, 0x3e	; 62
    13b4:	c4 5b       	subi	r28, 0xB4	; 180
    13b6:	d0 40       	sbci	r29, 0x00	; 0
    13b8:	0f b6       	in	r0, 0x3f	; 63
    13ba:	f8 94       	cli
    13bc:	de bf       	out	0x3e, r29	; 62
    13be:	0f be       	out	0x3f, r0	; 63
    13c0:	cd bf       	out	0x3d, r28	; 61
    13c2:	1c 01       	movw	r2, r24
     struct node ar[4];
     
     if(inrange(cx-1,cy)==1)
    13c4:	c0 90 06 02 	lds	r12, 0x0206
    13c8:	d0 90 07 02 	lds	r13, 0x0207
    13cc:	86 01       	movw	r16, r12
    13ce:	01 50       	subi	r16, 0x01	; 1
    13d0:	10 40       	sbci	r17, 0x00	; 0
    13d2:	e0 90 04 02 	lds	r14, 0x0204
    13d6:	f0 90 05 02 	lds	r15, 0x0205
    13da:	c8 01       	movw	r24, r16
    13dc:	b7 01       	movw	r22, r14
    13de:	0e 94 73 09 	call	0x12e6	; 0x12e6 <inrange>
    13e2:	81 30       	cpi	r24, 0x01	; 1
    13e4:	91 05       	cpc	r25, r1
    13e6:	09 f0       	breq	.+2      	; 0x13ea <isValid_and_smallg+0x5c>
    13e8:	54 c0       	rjmp	.+168    	; 0x1492 <isValid_and_smallg+0x104>
     {
         //    cout<<"valid ";
         objw=matrix[cx-1][cy];
    13ea:	c7 01       	movw	r24, r14
    13ec:	88 0f       	add	r24, r24
    13ee:	99 1f       	adc	r25, r25
    13f0:	88 0f       	add	r24, r24
    13f2:	99 1f       	adc	r25, r25
    13f4:	fc 01       	movw	r30, r24
    13f6:	ee 0f       	add	r30, r30
    13f8:	ff 1f       	adc	r31, r31
    13fa:	ee 0f       	add	r30, r30
    13fc:	ff 1f       	adc	r31, r31
    13fe:	9c 01       	movw	r18, r24
    1400:	2e 0f       	add	r18, r30
    1402:	3f 1f       	adc	r19, r31
    1404:	8c e8       	ldi	r24, 0x8C	; 140
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	08 9f       	mul	r16, r24
    140a:	f0 01       	movw	r30, r0
    140c:	09 9f       	mul	r16, r25
    140e:	f0 0d       	add	r31, r0
    1410:	18 9f       	mul	r17, r24
    1412:	f0 0d       	add	r31, r0
    1414:	11 24       	eor	r1, r1
    1416:	e2 0f       	add	r30, r18
    1418:	f3 1f       	adc	r31, r19
    141a:	de 01       	movw	r26, r28
    141c:	11 96       	adiw	r26, 0x01	; 1
    141e:	e7 57       	subi	r30, 0x77	; 119
    1420:	fd 4f       	sbci	r31, 0xFD	; 253
    1422:	84 e1       	ldi	r24, 0x14	; 20
    1424:	01 90       	ld	r0, Z+
    1426:	0d 92       	st	X+, r0
    1428:	81 50       	subi	r24, 0x01	; 1
    142a:	e1 f7       	brne	.-8      	; 0x1424 <isValid_and_smallg+0x96>
    142c:	c7 01       	movw	r24, r14
    142e:	88 0f       	add	r24, r24
    1430:	99 1f       	adc	r25, r25
    1432:	88 0f       	add	r24, r24
    1434:	99 1f       	adc	r25, r25
    1436:	9c 01       	movw	r18, r24
    1438:	22 0f       	add	r18, r18
    143a:	33 1f       	adc	r19, r19
    143c:	22 0f       	add	r18, r18
    143e:	33 1f       	adc	r19, r19
    1440:	28 0f       	add	r18, r24
    1442:	39 1f       	adc	r19, r25
    1444:	8c e8       	ldi	r24, 0x8C	; 140
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	08 9f       	mul	r16, r24
    144a:	f0 01       	movw	r30, r0
    144c:	09 9f       	mul	r16, r25
    144e:	f0 0d       	add	r31, r0
    1450:	18 9f       	mul	r17, r24
    1452:	f0 0d       	add	r31, r0
    1454:	11 24       	eor	r1, r1
    1456:	e2 0f       	add	r30, r18
    1458:	f3 1f       	adc	r31, r19
    145a:	e7 57       	subi	r30, 0x77	; 119
    145c:	fd 4f       	sbci	r31, 0xFD	; 253
    145e:	20 85       	ldd	r18, Z+8	; 0x08
    1460:	31 85       	ldd	r19, Z+9	; 0x09
    1462:	40 89       	ldd	r20, Z+16	; 0x10
    1464:	51 89       	ldd	r21, Z+17	; 0x11
    1466:	62 89       	ldd	r22, Z+18	; 0x12
    1468:	73 89       	ldd	r23, Z+19	; 0x13
         ar[0]=objw;
    146a:	fe 01       	movw	r30, r28
    146c:	ef 5a       	subi	r30, 0xAF	; 175
    146e:	ff 4f       	sbci	r31, 0xFF	; 255
    1470:	de 01       	movw	r26, r28
    1472:	11 96       	adiw	r26, 0x01	; 1
    1474:	84 e1       	ldi	r24, 0x14	; 20
    1476:	0d 90       	ld	r0, X+
    1478:	01 92       	st	Z+, r0
    147a:	81 50       	subi	r24, 0x01	; 1
    147c:	e1 f7       	brne	.-8      	; 0x1476 <isValid_and_smallg+0xe8>
    147e:	6b 96       	adiw	r28, 0x1b	; 27
    1480:	3f af       	sts	0x7f, r19
    1482:	2e af       	sts	0x7e, r18
    1484:	6b 97       	sbiw	r28, 0x1b	; 27
    1486:	a5 96       	adiw	r28, 0x25	; 37
    1488:	4c af       	sts	0x7c, r20
    148a:	5d af       	sts	0x7d, r21
    148c:	6e af       	sts	0x7e, r22
    148e:	7f af       	sts	0x7f, r23
    1490:	a5 97       	sbiw	r28, 0x25	; 37
     }
     if(inrange(cx-1,cy)==0)
    1492:	c8 01       	movw	r24, r16
    1494:	b7 01       	movw	r22, r14
    1496:	0e 94 73 09 	call	0x12e6	; 0x12e6 <inrange>
    149a:	00 97       	sbiw	r24, 0x00	; 0
    149c:	d1 f4       	brne	.+52     	; 0x14d2 <isValid_and_smallg+0x144>
     {
         //    cout<<"invalid ";
         objw.g=200;
         objw.displacement=50000;
         ar[0]=objw;
    149e:	fe 01       	movw	r30, r28
    14a0:	ef 5a       	subi	r30, 0xAF	; 175
    14a2:	ff 4f       	sbci	r31, 0xFF	; 255
    14a4:	de 01       	movw	r26, r28
    14a6:	11 96       	adiw	r26, 0x01	; 1
    14a8:	84 e1       	ldi	r24, 0x14	; 20
    14aa:	0d 90       	ld	r0, X+
    14ac:	01 92       	st	Z+, r0
    14ae:	81 50       	subi	r24, 0x01	; 1
    14b0:	e1 f7       	brne	.-8      	; 0x14aa <isValid_and_smallg+0x11c>
    14b2:	88 ec       	ldi	r24, 0xC8	; 200
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	6b 96       	adiw	r28, 0x1b	; 27
    14b8:	9f af       	sts	0x7f, r25
    14ba:	8e af       	sts	0x7e, r24
    14bc:	6b 97       	sbiw	r28, 0x1b	; 27
    14be:	80 e0       	ldi	r24, 0x00	; 0
    14c0:	90 e5       	ldi	r25, 0x50	; 80
    14c2:	a3 e4       	ldi	r26, 0x43	; 67
    14c4:	b7 e4       	ldi	r27, 0x47	; 71
    14c6:	a5 96       	adiw	r28, 0x25	; 37
    14c8:	8c af       	sts	0x7c, r24
    14ca:	9d af       	sts	0x7d, r25
    14cc:	ae af       	sts	0x7e, r26
    14ce:	bf af       	sts	0x7f, r27
    14d0:	a5 97       	sbiw	r28, 0x25	; 37
     }
     
     if(inrange(cx+1,cy)==1)
    14d2:	86 01       	movw	r16, r12
    14d4:	0f 5f       	subi	r16, 0xFF	; 255
    14d6:	1f 4f       	sbci	r17, 0xFF	; 255
    14d8:	c8 01       	movw	r24, r16
    14da:	b7 01       	movw	r22, r14
    14dc:	0e 94 73 09 	call	0x12e6	; 0x12e6 <inrange>
    14e0:	81 30       	cpi	r24, 0x01	; 1
    14e2:	91 05       	cpc	r25, r1
    14e4:	09 f0       	breq	.+2      	; 0x14e8 <isValid_and_smallg+0x15a>
    14e6:	54 c0       	rjmp	.+168    	; 0x1590 <isValid_and_smallg+0x202>
     {
         //    cout<<"valid ";
         obje=matrix[cx+1][cy];
    14e8:	c7 01       	movw	r24, r14
    14ea:	88 0f       	add	r24, r24
    14ec:	99 1f       	adc	r25, r25
    14ee:	88 0f       	add	r24, r24
    14f0:	99 1f       	adc	r25, r25
    14f2:	fc 01       	movw	r30, r24
    14f4:	ee 0f       	add	r30, r30
    14f6:	ff 1f       	adc	r31, r31
    14f8:	ee 0f       	add	r30, r30
    14fa:	ff 1f       	adc	r31, r31
    14fc:	9c 01       	movw	r18, r24
    14fe:	2e 0f       	add	r18, r30
    1500:	3f 1f       	adc	r19, r31
    1502:	8c e8       	ldi	r24, 0x8C	; 140
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	08 9f       	mul	r16, r24
    1508:	f0 01       	movw	r30, r0
    150a:	09 9f       	mul	r16, r25
    150c:	f0 0d       	add	r31, r0
    150e:	18 9f       	mul	r17, r24
    1510:	f0 0d       	add	r31, r0
    1512:	11 24       	eor	r1, r1
    1514:	e2 0f       	add	r30, r18
    1516:	f3 1f       	adc	r31, r19
    1518:	de 01       	movw	r26, r28
    151a:	55 96       	adiw	r26, 0x15	; 21
    151c:	e7 57       	subi	r30, 0x77	; 119
    151e:	fd 4f       	sbci	r31, 0xFD	; 253
    1520:	84 e1       	ldi	r24, 0x14	; 20
    1522:	01 90       	ld	r0, Z+
    1524:	0d 92       	st	X+, r0
    1526:	81 50       	subi	r24, 0x01	; 1
    1528:	e1 f7       	brne	.-8      	; 0x1522 <isValid_and_smallg+0x194>
    152a:	c7 01       	movw	r24, r14
    152c:	88 0f       	add	r24, r24
    152e:	99 1f       	adc	r25, r25
    1530:	88 0f       	add	r24, r24
    1532:	99 1f       	adc	r25, r25
    1534:	9c 01       	movw	r18, r24
    1536:	22 0f       	add	r18, r18
    1538:	33 1f       	adc	r19, r19
    153a:	22 0f       	add	r18, r18
    153c:	33 1f       	adc	r19, r19
    153e:	28 0f       	add	r18, r24
    1540:	39 1f       	adc	r19, r25
    1542:	8c e8       	ldi	r24, 0x8C	; 140
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	08 9f       	mul	r16, r24
    1548:	f0 01       	movw	r30, r0
    154a:	09 9f       	mul	r16, r25
    154c:	f0 0d       	add	r31, r0
    154e:	18 9f       	mul	r17, r24
    1550:	f0 0d       	add	r31, r0
    1552:	11 24       	eor	r1, r1
    1554:	e2 0f       	add	r30, r18
    1556:	f3 1f       	adc	r31, r19
    1558:	e7 57       	subi	r30, 0x77	; 119
    155a:	fd 4f       	sbci	r31, 0xFD	; 253
    155c:	20 85       	ldd	r18, Z+8	; 0x08
    155e:	31 85       	ldd	r19, Z+9	; 0x09
    1560:	40 89       	ldd	r20, Z+16	; 0x10
    1562:	51 89       	ldd	r21, Z+17	; 0x11
    1564:	62 89       	ldd	r22, Z+18	; 0x12
    1566:	73 89       	ldd	r23, Z+19	; 0x13
         ar[1]=obje;
    1568:	fe 01       	movw	r30, r28
    156a:	eb 59       	subi	r30, 0x9B	; 155
    156c:	ff 4f       	sbci	r31, 0xFF	; 255
    156e:	de 01       	movw	r26, r28
    1570:	55 96       	adiw	r26, 0x15	; 21
    1572:	84 e1       	ldi	r24, 0x14	; 20
    1574:	0d 90       	ld	r0, X+
    1576:	01 92       	st	Z+, r0
    1578:	81 50       	subi	r24, 0x01	; 1
    157a:	e1 f7       	brne	.-8      	; 0x1574 <isValid_and_smallg+0x1e6>
    157c:	af 96       	adiw	r28, 0x2f	; 47
    157e:	3f af       	sts	0x7f, r19
    1580:	2e af       	sts	0x7e, r18
    1582:	af 97       	sbiw	r28, 0x2f	; 47
    1584:	e9 96       	adiw	r28, 0x39	; 57
    1586:	4c af       	sts	0x7c, r20
    1588:	5d af       	sts	0x7d, r21
    158a:	6e af       	sts	0x7e, r22
    158c:	7f af       	sts	0x7f, r23
    158e:	e9 97       	sbiw	r28, 0x39	; 57
     }
     if(inrange(cx+1,cy)==0)
    1590:	c8 01       	movw	r24, r16
    1592:	b7 01       	movw	r22, r14
    1594:	0e 94 73 09 	call	0x12e6	; 0x12e6 <inrange>
    1598:	00 97       	sbiw	r24, 0x00	; 0
    159a:	d1 f4       	brne	.+52     	; 0x15d0 <isValid_and_smallg+0x242>
     {
         //    cout<<"invalid ";
         obje.g=200;
         obje.displacement=50000;
         ar[1]=obje;
    159c:	fe 01       	movw	r30, r28
    159e:	eb 59       	subi	r30, 0x9B	; 155
    15a0:	ff 4f       	sbci	r31, 0xFF	; 255
    15a2:	de 01       	movw	r26, r28
    15a4:	55 96       	adiw	r26, 0x15	; 21
    15a6:	84 e1       	ldi	r24, 0x14	; 20
    15a8:	0d 90       	ld	r0, X+
    15aa:	01 92       	st	Z+, r0
    15ac:	81 50       	subi	r24, 0x01	; 1
    15ae:	e1 f7       	brne	.-8      	; 0x15a8 <isValid_and_smallg+0x21a>
    15b0:	88 ec       	ldi	r24, 0xC8	; 200
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	af 96       	adiw	r28, 0x2f	; 47
    15b6:	9f af       	sts	0x7f, r25
    15b8:	8e af       	sts	0x7e, r24
    15ba:	af 97       	sbiw	r28, 0x2f	; 47
    15bc:	80 e0       	ldi	r24, 0x00	; 0
    15be:	90 e5       	ldi	r25, 0x50	; 80
    15c0:	a3 e4       	ldi	r26, 0x43	; 67
    15c2:	b7 e4       	ldi	r27, 0x47	; 71
    15c4:	e9 96       	adiw	r28, 0x39	; 57
    15c6:	8c af       	sts	0x7c, r24
    15c8:	9d af       	sts	0x7d, r25
    15ca:	ae af       	sts	0x7e, r26
    15cc:	bf af       	sts	0x7f, r27
    15ce:	e9 97       	sbiw	r28, 0x39	; 57
     }
     
     if(inrange(cx,cy+1)==1)
    15d0:	87 01       	movw	r16, r14
    15d2:	0f 5f       	subi	r16, 0xFF	; 255
    15d4:	1f 4f       	sbci	r17, 0xFF	; 255
    15d6:	c6 01       	movw	r24, r12
    15d8:	b8 01       	movw	r22, r16
    15da:	0e 94 73 09 	call	0x12e6	; 0x12e6 <inrange>
    15de:	81 30       	cpi	r24, 0x01	; 1
    15e0:	91 05       	cpc	r25, r1
    15e2:	09 f0       	breq	.+2      	; 0x15e6 <isValid_and_smallg+0x258>
    15e4:	58 c0       	rjmp	.+176    	; 0x1696 <isValid_and_smallg+0x308>
     {
         //    cout<<"valid ";
         objn=matrix[cx][cy+1];
    15e6:	c8 01       	movw	r24, r16
    15e8:	88 0f       	add	r24, r24
    15ea:	99 1f       	adc	r25, r25
    15ec:	88 0f       	add	r24, r24
    15ee:	99 1f       	adc	r25, r25
    15f0:	fc 01       	movw	r30, r24
    15f2:	ee 0f       	add	r30, r30
    15f4:	ff 1f       	adc	r31, r31
    15f6:	ee 0f       	add	r30, r30
    15f8:	ff 1f       	adc	r31, r31
    15fa:	9c 01       	movw	r18, r24
    15fc:	2e 0f       	add	r18, r30
    15fe:	3f 1f       	adc	r19, r31
    1600:	8c e8       	ldi	r24, 0x8C	; 140
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	c8 9e       	mul	r12, r24
    1606:	f0 01       	movw	r30, r0
    1608:	c9 9e       	mul	r12, r25
    160a:	f0 0d       	add	r31, r0
    160c:	d8 9e       	mul	r13, r24
    160e:	f0 0d       	add	r31, r0
    1610:	11 24       	eor	r1, r1
    1612:	e2 0f       	add	r30, r18
    1614:	f3 1f       	adc	r31, r19
    1616:	de 01       	movw	r26, r28
    1618:	99 96       	adiw	r26, 0x29	; 41
    161a:	e7 57       	subi	r30, 0x77	; 119
    161c:	fd 4f       	sbci	r31, 0xFD	; 253
    161e:	84 e1       	ldi	r24, 0x14	; 20
    1620:	01 90       	ld	r0, Z+
    1622:	0d 92       	st	X+, r0
    1624:	81 50       	subi	r24, 0x01	; 1
    1626:	e1 f7       	brne	.-8      	; 0x1620 <isValid_and_smallg+0x292>
    1628:	c8 01       	movw	r24, r16
    162a:	88 0f       	add	r24, r24
    162c:	99 1f       	adc	r25, r25
    162e:	88 0f       	add	r24, r24
    1630:	99 1f       	adc	r25, r25
    1632:	9c 01       	movw	r18, r24
    1634:	22 0f       	add	r18, r18
    1636:	33 1f       	adc	r19, r19
    1638:	22 0f       	add	r18, r18
    163a:	33 1f       	adc	r19, r19
    163c:	28 0f       	add	r18, r24
    163e:	39 1f       	adc	r19, r25
    1640:	8c e8       	ldi	r24, 0x8C	; 140
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	c8 9e       	mul	r12, r24
    1646:	f0 01       	movw	r30, r0
    1648:	c9 9e       	mul	r12, r25
    164a:	f0 0d       	add	r31, r0
    164c:	d8 9e       	mul	r13, r24
    164e:	f0 0d       	add	r31, r0
    1650:	11 24       	eor	r1, r1
    1652:	e2 0f       	add	r30, r18
    1654:	f3 1f       	adc	r31, r19
    1656:	e7 57       	subi	r30, 0x77	; 119
    1658:	fd 4f       	sbci	r31, 0xFD	; 253
    165a:	20 85       	ldd	r18, Z+8	; 0x08
    165c:	31 85       	ldd	r19, Z+9	; 0x09
    165e:	40 89       	ldd	r20, Z+16	; 0x10
    1660:	51 89       	ldd	r21, Z+17	; 0x11
    1662:	62 89       	ldd	r22, Z+18	; 0x12
    1664:	73 89       	ldd	r23, Z+19	; 0x13
         ar[2]=objn;
    1666:	fe 01       	movw	r30, r28
    1668:	e7 58       	subi	r30, 0x87	; 135
    166a:	ff 4f       	sbci	r31, 0xFF	; 255
    166c:	de 01       	movw	r26, r28
    166e:	99 96       	adiw	r26, 0x29	; 41
    1670:	84 e1       	ldi	r24, 0x14	; 20
    1672:	0d 90       	ld	r0, X+
    1674:	01 92       	st	Z+, r0
    1676:	81 50       	subi	r24, 0x01	; 1
    1678:	e1 f7       	brne	.-8      	; 0x1672 <isValid_and_smallg+0x2e4>
    167a:	cf 57       	subi	r28, 0x7F	; 127
    167c:	df 4f       	sbci	r29, 0xFF	; 255
    167e:	39 83       	std	Y+1, r19	; 0x01
    1680:	28 83       	st	Y, r18
    1682:	c1 58       	subi	r28, 0x81	; 129
    1684:	d0 40       	sbci	r29, 0x00	; 0
    1686:	c7 57       	subi	r28, 0x77	; 119
    1688:	df 4f       	sbci	r29, 0xFF	; 255
    168a:	48 83       	st	Y, r20
    168c:	59 83       	std	Y+1, r21	; 0x01
    168e:	6a 83       	std	Y+2, r22	; 0x02
    1690:	7b 83       	std	Y+3, r23	; 0x03
    1692:	c9 58       	subi	r28, 0x89	; 137
    1694:	d0 40       	sbci	r29, 0x00	; 0
     }
     
     if(inrange(cx,cy+1)==0)
    1696:	c6 01       	movw	r24, r12
    1698:	b8 01       	movw	r22, r16
    169a:	0e 94 73 09 	call	0x12e6	; 0x12e6 <inrange>
    169e:	00 97       	sbiw	r24, 0x00	; 0
    16a0:	f1 f4       	brne	.+60     	; 0x16de <isValid_and_smallg+0x350>
     {
         //    cout<<"invalid ";
         objn.g=200;
         objn.displacement=50000;
         ar[2]=objn;
    16a2:	fe 01       	movw	r30, r28
    16a4:	e7 58       	subi	r30, 0x87	; 135
    16a6:	ff 4f       	sbci	r31, 0xFF	; 255
    16a8:	de 01       	movw	r26, r28
    16aa:	99 96       	adiw	r26, 0x29	; 41
    16ac:	84 e1       	ldi	r24, 0x14	; 20
    16ae:	0d 90       	ld	r0, X+
    16b0:	01 92       	st	Z+, r0
    16b2:	81 50       	subi	r24, 0x01	; 1
    16b4:	e1 f7       	brne	.-8      	; 0x16ae <isValid_and_smallg+0x320>
    16b6:	88 ec       	ldi	r24, 0xC8	; 200
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	cf 57       	subi	r28, 0x7F	; 127
    16bc:	df 4f       	sbci	r29, 0xFF	; 255
    16be:	99 83       	std	Y+1, r25	; 0x01
    16c0:	88 83       	st	Y, r24
    16c2:	c1 58       	subi	r28, 0x81	; 129
    16c4:	d0 40       	sbci	r29, 0x00	; 0
    16c6:	80 e0       	ldi	r24, 0x00	; 0
    16c8:	90 e5       	ldi	r25, 0x50	; 80
    16ca:	a3 e4       	ldi	r26, 0x43	; 67
    16cc:	b7 e4       	ldi	r27, 0x47	; 71
    16ce:	c7 57       	subi	r28, 0x77	; 119
    16d0:	df 4f       	sbci	r29, 0xFF	; 255
    16d2:	88 83       	st	Y, r24
    16d4:	99 83       	std	Y+1, r25	; 0x01
    16d6:	aa 83       	std	Y+2, r26	; 0x02
    16d8:	bb 83       	std	Y+3, r27	; 0x03
    16da:	c9 58       	subi	r28, 0x89	; 137
    16dc:	d0 40       	sbci	r29, 0x00	; 0
     }
     
     if(inrange(cx,cy-1)==1)
    16de:	87 01       	movw	r16, r14
    16e0:	01 50       	subi	r16, 0x01	; 1
    16e2:	10 40       	sbci	r17, 0x00	; 0
    16e4:	c6 01       	movw	r24, r12
    16e6:	b8 01       	movw	r22, r16
    16e8:	0e 94 73 09 	call	0x12e6	; 0x12e6 <inrange>
    16ec:	81 30       	cpi	r24, 0x01	; 1
    16ee:	91 05       	cpc	r25, r1
    16f0:	09 f0       	breq	.+2      	; 0x16f4 <isValid_and_smallg+0x366>
    16f2:	5b c0       	rjmp	.+182    	; 0x17aa <isValid_and_smallg+0x41c>
     {
         //    cout<<"valid ";
         objs=matrix[cx][cy-1];
    16f4:	c8 01       	movw	r24, r16
    16f6:	88 0f       	add	r24, r24
    16f8:	99 1f       	adc	r25, r25
    16fa:	88 0f       	add	r24, r24
    16fc:	99 1f       	adc	r25, r25
    16fe:	9c 01       	movw	r18, r24
    1700:	22 0f       	add	r18, r18
    1702:	33 1f       	adc	r19, r19
    1704:	22 0f       	add	r18, r18
    1706:	33 1f       	adc	r19, r19
    1708:	fc 01       	movw	r30, r24
    170a:	e2 0f       	add	r30, r18
    170c:	f3 1f       	adc	r31, r19
    170e:	8c e8       	ldi	r24, 0x8C	; 140
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	c8 9e       	mul	r12, r24
    1714:	90 01       	movw	r18, r0
    1716:	c9 9e       	mul	r12, r25
    1718:	30 0d       	add	r19, r0
    171a:	d8 9e       	mul	r13, r24
    171c:	30 0d       	add	r19, r0
    171e:	11 24       	eor	r1, r1
    1720:	2e 0f       	add	r18, r30
    1722:	3f 1f       	adc	r19, r31
    1724:	de 01       	movw	r26, r28
    1726:	dd 96       	adiw	r26, 0x3d	; 61
    1728:	f9 01       	movw	r30, r18
    172a:	e7 57       	subi	r30, 0x77	; 119
    172c:	fd 4f       	sbci	r31, 0xFD	; 253
    172e:	84 e1       	ldi	r24, 0x14	; 20
    1730:	01 90       	ld	r0, Z+
    1732:	0d 92       	st	X+, r0
    1734:	81 50       	subi	r24, 0x01	; 1
    1736:	e1 f7       	brne	.-8      	; 0x1730 <isValid_and_smallg+0x3a2>
    1738:	c8 01       	movw	r24, r16
    173a:	88 0f       	add	r24, r24
    173c:	99 1f       	adc	r25, r25
    173e:	88 0f       	add	r24, r24
    1740:	99 1f       	adc	r25, r25
    1742:	9c 01       	movw	r18, r24
    1744:	22 0f       	add	r18, r18
    1746:	33 1f       	adc	r19, r19
    1748:	22 0f       	add	r18, r18
    174a:	33 1f       	adc	r19, r19
    174c:	fc 01       	movw	r30, r24
    174e:	e2 0f       	add	r30, r18
    1750:	f3 1f       	adc	r31, r19
    1752:	8c e8       	ldi	r24, 0x8C	; 140
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	c8 9e       	mul	r12, r24
    1758:	90 01       	movw	r18, r0
    175a:	c9 9e       	mul	r12, r25
    175c:	30 0d       	add	r19, r0
    175e:	d8 9e       	mul	r13, r24
    1760:	30 0d       	add	r19, r0
    1762:	11 24       	eor	r1, r1
    1764:	2e 0f       	add	r18, r30
    1766:	3f 1f       	adc	r19, r31
    1768:	f9 01       	movw	r30, r18
    176a:	e7 57       	subi	r30, 0x77	; 119
    176c:	fd 4f       	sbci	r31, 0xFD	; 253
    176e:	20 85       	ldd	r18, Z+8	; 0x08
    1770:	31 85       	ldd	r19, Z+9	; 0x09
    1772:	40 89       	ldd	r20, Z+16	; 0x10
    1774:	51 89       	ldd	r21, Z+17	; 0x11
    1776:	62 89       	ldd	r22, Z+18	; 0x12
    1778:	73 89       	ldd	r23, Z+19	; 0x13
         ar[3]=objs;
    177a:	fe 01       	movw	r30, r28
    177c:	e3 57       	subi	r30, 0x73	; 115
    177e:	ff 4f       	sbci	r31, 0xFF	; 255
    1780:	de 01       	movw	r26, r28
    1782:	dd 96       	adiw	r26, 0x3d	; 61
    1784:	84 e1       	ldi	r24, 0x14	; 20
    1786:	0d 90       	ld	r0, X+
    1788:	01 92       	st	Z+, r0
    178a:	81 50       	subi	r24, 0x01	; 1
    178c:	e1 f7       	brne	.-8      	; 0x1786 <isValid_and_smallg+0x3f8>
    178e:	cb 56       	subi	r28, 0x6B	; 107
    1790:	df 4f       	sbci	r29, 0xFF	; 255
    1792:	39 83       	std	Y+1, r19	; 0x01
    1794:	28 83       	st	Y, r18
    1796:	c5 59       	subi	r28, 0x95	; 149
    1798:	d0 40       	sbci	r29, 0x00	; 0
    179a:	c3 56       	subi	r28, 0x63	; 99
    179c:	df 4f       	sbci	r29, 0xFF	; 255
    179e:	48 83       	st	Y, r20
    17a0:	59 83       	std	Y+1, r21	; 0x01
    17a2:	6a 83       	std	Y+2, r22	; 0x02
    17a4:	7b 83       	std	Y+3, r23	; 0x03
    17a6:	cd 59       	subi	r28, 0x9D	; 157
    17a8:	d0 40       	sbci	r29, 0x00	; 0
     }
     if(inrange(cx,cy-1)==0)
    17aa:	c6 01       	movw	r24, r12
    17ac:	b8 01       	movw	r22, r16
    17ae:	0e 94 73 09 	call	0x12e6	; 0x12e6 <inrange>
    17b2:	00 97       	sbiw	r24, 0x00	; 0
    17b4:	f1 f4       	brne	.+60     	; 0x17f2 <isValid_and_smallg+0x464>
     {
         //    cout<<"invalid ";
         objs.g=200;
         objs.displacement=50000;
         ar[3]=objs;
    17b6:	de 01       	movw	r26, r28
    17b8:	a3 57       	subi	r26, 0x73	; 115
    17ba:	bf 4f       	sbci	r27, 0xFF	; 255
    17bc:	fe 01       	movw	r30, r28
    17be:	fd 96       	adiw	r30, 0x3d	; 61
    17c0:	84 e1       	ldi	r24, 0x14	; 20
    17c2:	01 90       	ld	r0, Z+
    17c4:	0d 92       	st	X+, r0
    17c6:	81 50       	subi	r24, 0x01	; 1
    17c8:	e1 f7       	brne	.-8      	; 0x17c2 <isValid_and_smallg+0x434>
    17ca:	88 ec       	ldi	r24, 0xC8	; 200
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	cb 56       	subi	r28, 0x6B	; 107
    17d0:	df 4f       	sbci	r29, 0xFF	; 255
    17d2:	99 83       	std	Y+1, r25	; 0x01
    17d4:	88 83       	st	Y, r24
    17d6:	c5 59       	subi	r28, 0x95	; 149
    17d8:	d0 40       	sbci	r29, 0x00	; 0
    17da:	80 e0       	ldi	r24, 0x00	; 0
    17dc:	90 e5       	ldi	r25, 0x50	; 80
    17de:	a3 e4       	ldi	r26, 0x43	; 67
    17e0:	b7 e4       	ldi	r27, 0x47	; 71
    17e2:	c3 56       	subi	r28, 0x63	; 99
    17e4:	df 4f       	sbci	r29, 0xFF	; 255
    17e6:	88 83       	st	Y, r24
    17e8:	99 83       	std	Y+1, r25	; 0x01
    17ea:	aa 83       	std	Y+2, r26	; 0x02
    17ec:	bb 83       	std	Y+3, r27	; 0x03
    17ee:	cd 59       	subi	r28, 0x9D	; 157
    17f0:	d0 40       	sbci	r29, 0x00	; 0
     }
     
     
     struct node min=ar[0];
    17f2:	de 01       	movw	r26, r28
    17f4:	af 55       	subi	r26, 0x5F	; 95
    17f6:	bf 4f       	sbci	r27, 0xFF	; 255
    17f8:	fe 01       	movw	r30, r28
    17fa:	ef 5a       	subi	r30, 0xAF	; 175
    17fc:	ff 4f       	sbci	r31, 0xFF	; 255
    17fe:	84 e1       	ldi	r24, 0x14	; 20
    1800:	01 90       	ld	r0, Z+
    1802:	0d 92       	st	X+, r0
    1804:	81 50       	subi	r24, 0x01	; 1
    1806:	e1 f7       	brne	.-8      	; 0x1800 <isValid_and_smallg+0x472>
    1808:	6b 96       	adiw	r28, 0x1b	; 27
    180a:	ae ac       	sts	0xae, r26
    180c:	bf ac       	sts	0xaf, r27
    180e:	6b 97       	sbiw	r28, 0x1b	; 27
    1810:	a5 96       	adiw	r28, 0x25	; 37
    1812:	4c ac       	sts	0xac, r20
    1814:	5d ac       	sts	0xad, r21
    1816:	6e ac       	sts	0xae, r22
    1818:	7f ac       	sts	0xaf, r23
    181a:	a5 97       	sbiw	r28, 0x25	; 37
    181c:	8e 01       	movw	r16, r28
    181e:	0f 5a       	subi	r16, 0xAF	; 175
    1820:	1f 4f       	sbci	r17, 0xFF	; 255

     for(int i=0;i<4;i++)
    1822:	ee 24       	eor	r14, r14
    1824:	ff 24       	eor	r15, r15
     {
         if(min.g>=ar[i].g&&min.displacement>=ar[i].displacement)
         {
             
            min=ar[i];
    1826:	0f 2e       	mov	r0, r31
    1828:	f4 e1       	ldi	r31, 0x14	; 20
    182a:	9f 2e       	mov	r9, r31
    182c:	f0 2d       	mov	r31, r0
     
     struct node min=ar[0];

     for(int i=0;i<4;i++)
     {
         if(min.g>=ar[i].g&&min.displacement>=ar[i].displacement)
    182e:	f8 01       	movw	r30, r16
    1830:	80 85       	ldd	r24, Z+8	; 0x08
    1832:	91 85       	ldd	r25, Z+9	; 0x09
    1834:	a8 16       	cp	r10, r24
    1836:	b9 06       	cpc	r11, r25
    1838:	64 f1       	brlt	.+88     	; 0x1892 <isValid_and_smallg+0x504>
    183a:	60 89       	ldd	r22, Z+16	; 0x10
    183c:	71 89       	ldd	r23, Z+17	; 0x11
    183e:	82 89       	ldd	r24, Z+18	; 0x12
    1840:	93 89       	ldd	r25, Z+19	; 0x13
    1842:	a3 01       	movw	r20, r6
    1844:	92 01       	movw	r18, r4
    1846:	0e 94 3c 11 	call	0x2278	; 0x2278 <__cmpsf2>
    184a:	18 16       	cp	r1, r24
    184c:	14 f1       	brlt	.+68     	; 0x1892 <isValid_and_smallg+0x504>
         {
             
            min=ar[i];
    184e:	fe 01       	movw	r30, r28
    1850:	ef 55       	subi	r30, 0x5F	; 95
    1852:	ff 4f       	sbci	r31, 0xFF	; 255
    1854:	a0 2f       	mov	r26, r16
    1856:	b1 2f       	mov	r27, r17
    1858:	89 2d       	mov	r24, r9
    185a:	0d 90       	ld	r0, X+
    185c:	01 92       	st	Z+, r0
    185e:	81 50       	subi	r24, 0x01	; 1
    1860:	e1 f7       	brne	.-8      	; 0x185a <isValid_and_smallg+0x4cc>
    1862:	c7 01       	movw	r24, r14
    1864:	88 0f       	add	r24, r24
    1866:	99 1f       	adc	r25, r25
    1868:	88 0f       	add	r24, r24
    186a:	99 1f       	adc	r25, r25
    186c:	9c 01       	movw	r18, r24
    186e:	22 0f       	add	r18, r18
    1870:	33 1f       	adc	r19, r19
    1872:	22 0f       	add	r18, r18
    1874:	33 1f       	adc	r19, r19
    1876:	82 0f       	add	r24, r18
    1878:	93 1f       	adc	r25, r19
    187a:	e1 e5       	ldi	r30, 0x51	; 81
    187c:	f0 e0       	ldi	r31, 0x00	; 0
    187e:	ec 0f       	add	r30, r28
    1880:	fd 1f       	adc	r31, r29
    1882:	e8 0f       	add	r30, r24
    1884:	f9 1f       	adc	r31, r25
    1886:	a0 84       	ldd	r10, Z+8	; 0x08
    1888:	b1 84       	ldd	r11, Z+9	; 0x09
    188a:	40 88       	ldd	r4, Z+16	; 0x10
    188c:	51 88       	ldd	r5, Z+17	; 0x11
    188e:	62 88       	ldd	r6, Z+18	; 0x12
    1890:	73 88       	ldd	r7, Z+19	; 0x13
     }
     
     
     struct node min=ar[0];

     for(int i=0;i<4;i++)
    1892:	08 94       	sec
    1894:	e1 1c       	adc	r14, r1
    1896:	f1 1c       	adc	r15, r1
    1898:	0c 5e       	subi	r16, 0xEC	; 236
    189a:	1f 4f       	sbci	r17, 0xFF	; 255
    189c:	f4 e0       	ldi	r31, 0x04	; 4
    189e:	ef 16       	cp	r14, r31
    18a0:	f1 04       	cpc	r15, r1
    18a2:	29 f6       	brne	.-118    	; 0x182e <isValid_and_smallg+0x4a0>
         {
             
            min=ar[i];
            }
     }
     return min ;
    18a4:	d1 01       	movw	r26, r2
    18a6:	fe 01       	movw	r30, r28
    18a8:	ef 55       	subi	r30, 0x5F	; 95
    18aa:	ff 4f       	sbci	r31, 0xFF	; 255
    18ac:	84 e1       	ldi	r24, 0x14	; 20
    18ae:	01 90       	ld	r0, Z+
    18b0:	0d 92       	st	X+, r0
    18b2:	81 50       	subi	r24, 0x01	; 1
    18b4:	e1 f7       	brne	.-8      	; 0x18ae <isValid_and_smallg+0x520>
    18b6:	f1 01       	movw	r30, r2
    18b8:	b1 86       	std	Z+9, r11	; 0x09
    18ba:	a0 86       	std	Z+8, r10	; 0x08
    18bc:	40 8a       	std	Z+16, r4	; 0x10
    18be:	51 8a       	std	Z+17, r5	; 0x11
    18c0:	62 8a       	std	Z+18, r6	; 0x12
    18c2:	73 8a       	std	Z+19, r7	; 0x13
 }
    18c4:	c1 01       	movw	r24, r2
    18c6:	cc 54       	subi	r28, 0x4C	; 76
    18c8:	df 4f       	sbci	r29, 0xFF	; 255
    18ca:	0f b6       	in	r0, 0x3f	; 63
    18cc:	f8 94       	cli
    18ce:	de bf       	out	0x3e, r29	; 62
    18d0:	0f be       	out	0x3f, r0	; 63
    18d2:	cd bf       	out	0x3d, r28	; 61
    18d4:	df 91       	pop	r29
    18d6:	cf 91       	pop	r28
    18d8:	1f 91       	pop	r17
    18da:	0f 91       	pop	r16
    18dc:	ff 90       	pop	r15
    18de:	ef 90       	pop	r14
    18e0:	df 90       	pop	r13
    18e2:	cf 90       	pop	r12
    18e4:	bf 90       	pop	r11
    18e6:	af 90       	pop	r10
    18e8:	9f 90       	pop	r9
    18ea:	7f 90       	pop	r7
    18ec:	6f 90       	pop	r6
    18ee:	5f 90       	pop	r5
    18f0:	4f 90       	pop	r4
    18f2:	3f 90       	pop	r3
    18f4:	2f 90       	pop	r2
    18f6:	08 95       	ret

000018f8 <findDirection>:
   * Logic: checks the difference between the current position and final position it has to reach. We have considered north to be +ve y-direction, 
           south be -ve y-direction, east be +ve x-direction, and west be -ve x-direction
   * Example Call: findDirection(2,3)
   */
 void findDirection(int x_pickup,int y_pickup)
 {
    18f8:	ef 92       	push	r14
    18fa:	ff 92       	push	r15
    18fc:	0f 93       	push	r16
    18fe:	1f 93       	push	r17
    1900:	cf 93       	push	r28
    1902:	df 93       	push	r29
    1904:	8c 01       	movw	r16, r24
    1906:	eb 01       	movw	r28, r22
     //finding the difference in x and y direction from current position to final position
     int x=x_pickup-cx;
    1908:	80 91 06 02 	lds	r24, 0x0206
    190c:	90 91 07 02 	lds	r25, 0x0207
    1910:	78 01       	movw	r14, r16
    1912:	e8 1a       	sub	r14, r24
    1914:	f9 0a       	sbc	r15, r25
     int y=y_pickup-cy;
    1916:	80 91 04 02 	lds	r24, 0x0204
    191a:	90 91 05 02 	lds	r25, 0x0205
    191e:	9b 01       	movw	r18, r22
    1920:	28 1b       	sub	r18, r24
    1922:	39 0b       	sbc	r19, r25
     
     
     if(y>0) //If difference in y direction is positive move north
    1924:	12 16       	cp	r1, r18
    1926:	13 06       	cpc	r1, r19
    1928:	6c f4       	brge	.+26     	; 0x1944 <findDirection+0x4c>
     {
         while(cy!=y_pickup)
    192a:	86 17       	cp	r24, r22
    192c:	97 07       	cpc	r25, r23
    192e:	c1 f0       	breq	.+48     	; 0x1960 <findDirection+0x68>
         {
             moveNorth();
    1930:	0e 94 a9 07 	call	0xf52	; 0xf52 <moveNorth>
     int y=y_pickup-cy;
     
     
     if(y>0) //If difference in y direction is positive move north
     {
         while(cy!=y_pickup)
    1934:	80 91 04 02 	lds	r24, 0x0204
    1938:	90 91 05 02 	lds	r25, 0x0205
    193c:	8c 17       	cp	r24, r28
    193e:	9d 07       	cpc	r25, r29
    1940:	b9 f7       	brne	.-18     	; 0x1930 <findDirection+0x38>
    1942:	0e c0       	rjmp	.+28     	; 0x1960 <findDirection+0x68>
         {
             moveNorth();
         }
         
     }
     else if(y<0) //if difference in y direction is negative move south
    1944:	33 23       	and	r19, r19
    1946:	64 f4       	brge	.+24     	; 0x1960 <findDirection+0x68>
     {
         while(cy!=y_pickup)
    1948:	86 17       	cp	r24, r22
    194a:	97 07       	cpc	r25, r23
    194c:	49 f0       	breq	.+18     	; 0x1960 <findDirection+0x68>
         {
             moveSouth();
    194e:	0e 94 f6 07 	call	0xfec	; 0xfec <moveSouth>
         }
         
     }
     else if(y<0) //if difference in y direction is negative move south
     {
         while(cy!=y_pickup)
    1952:	80 91 04 02 	lds	r24, 0x0204
    1956:	90 91 05 02 	lds	r25, 0x0205
    195a:	8c 17       	cp	r24, r28
    195c:	9d 07       	cpc	r25, r29
    195e:	b9 f7       	brne	.-18     	; 0x194e <findDirection+0x56>
         {
             moveSouth();
         }
     }
     if(x>0) //if difference in x direction is positive move East
    1960:	1e 14       	cp	r1, r14
    1962:	1f 04       	cpc	r1, r15
    1964:	8c f4       	brge	.+34     	; 0x1988 <findDirection+0x90>
     {
         while(cx!=x_pickup)
    1966:	80 91 06 02 	lds	r24, 0x0206
    196a:	90 91 07 02 	lds	r25, 0x0207
    196e:	80 17       	cp	r24, r16
    1970:	91 07       	cpc	r25, r17
    1972:	e1 f0       	breq	.+56     	; 0x19ac <findDirection+0xb4>
         {
             moveEast();
    1974:	0e 94 15 07 	call	0xe2a	; 0xe2a <moveEast>
             moveSouth();
         }
     }
     if(x>0) //if difference in x direction is positive move East
     {
         while(cx!=x_pickup)
    1978:	80 91 06 02 	lds	r24, 0x0206
    197c:	90 91 07 02 	lds	r25, 0x0207
    1980:	80 17       	cp	r24, r16
    1982:	91 07       	cpc	r25, r17
    1984:	b9 f7       	brne	.-18     	; 0x1974 <findDirection+0x7c>
    1986:	12 c0       	rjmp	.+36     	; 0x19ac <findDirection+0xb4>
         {
             moveEast();
         }
         
     }
     else if(x < 0)  //if difference in x direction is negative move west
    1988:	ff 20       	and	r15, r15
    198a:	84 f4       	brge	.+32     	; 0x19ac <findDirection+0xb4>
     {
         while(cx!=x_pickup)
    198c:	80 91 06 02 	lds	r24, 0x0206
    1990:	90 91 07 02 	lds	r25, 0x0207
    1994:	80 17       	cp	r24, r16
    1996:	91 07       	cpc	r25, r17
    1998:	49 f0       	breq	.+18     	; 0x19ac <findDirection+0xb4>
         {
             moveWest();
    199a:	0e 94 5f 07 	call	0xebe	; 0xebe <moveWest>
         }
         
     }
     else if(x < 0)  //if difference in x direction is negative move west
     {
         while(cx!=x_pickup)
    199e:	80 91 06 02 	lds	r24, 0x0206
    19a2:	90 91 07 02 	lds	r25, 0x0207
    19a6:	80 17       	cp	r24, r16
    19a8:	91 07       	cpc	r25, r17
    19aa:	b9 f7       	brne	.-18     	; 0x199a <findDirection+0xa2>
         {
             moveWest();
         }
         
     }
 }
    19ac:	df 91       	pop	r29
    19ae:	cf 91       	pop	r28
    19b0:	1f 91       	pop	r17
    19b2:	0f 91       	pop	r16
    19b4:	ff 90       	pop	r15
    19b6:	ef 90       	pop	r14
    19b8:	08 95       	ret

000019ba <find_array_path>:
   * Logic:                this function call isValid_and_samllg() and moves to the point returned by this and find direction to this point by calling
                        findDirection();, after this update matrix point to visited() 
   * Example Call:        find_array_path(2,5);
   */
 void find_array_path(int x_,int y_)
{    
    19ba:	4f 92       	push	r4
    19bc:	5f 92       	push	r5
    19be:	6f 92       	push	r6
    19c0:	7f 92       	push	r7
    19c2:	8f 92       	push	r8
    19c4:	9f 92       	push	r9
    19c6:	af 92       	push	r10
    19c8:	bf 92       	push	r11
    19ca:	cf 92       	push	r12
    19cc:	df 92       	push	r13
    19ce:	ef 92       	push	r14
    19d0:	ff 92       	push	r15
    19d2:	0f 93       	push	r16
    19d4:	1f 93       	push	r17
    19d6:	cf 93       	push	r28
    19d8:	df 93       	push	r29
    19da:	cd b7       	in	r28, 0x3d	; 61
    19dc:	de b7       	in	r29, 0x3e	; 62
    19de:	64 97       	sbiw	r28, 0x14	; 20
    19e0:	0f b6       	in	r0, 0x3f	; 63
    19e2:	f8 94       	cli
    19e4:	de bf       	out	0x3e, r29	; 62
    19e6:	0f be       	out	0x3f, r0	; 63
    19e8:	cd bf       	out	0x3d, r28	; 61
    19ea:	6c 01       	movw	r12, r24
    19ec:	2b 01       	movw	r4, r22
    //cout<<"\n\n *********************************\n\n";
    //int i=0;
    matrixInitialise(x_,y_);
    19ee:	0e 94 43 08 	call	0x1086	; 0x1086 <matrixInitialise>
    while(1)
    {    struct node temp;
        temp=isValid_and_smallg();
        findDirection(temp.x,temp.y);
        matrix[temp.x][temp.y].visited=1;
    19f2:	0f 2e       	mov	r0, r31
    19f4:	f9 e8       	ldi	r31, 0x89	; 137
    19f6:	af 2e       	mov	r10, r31
    19f8:	f2 e0       	ldi	r31, 0x02	; 2
    19fa:	bf 2e       	mov	r11, r31
    19fc:	f0 2d       	mov	r31, r0
    19fe:	0f 2e       	mov	r0, r31
    1a00:	fc e8       	ldi	r31, 0x8C	; 140
    1a02:	8f 2e       	mov	r8, r31
    1a04:	99 24       	eor	r9, r9
    1a06:	f0 2d       	mov	r31, r0
    1a08:	66 24       	eor	r6, r6
    1a0a:	77 24       	eor	r7, r7
    1a0c:	63 94       	inc	r6
    //cout<<"\n\n *********************************\n\n";
    //int i=0;
    matrixInitialise(x_,y_);
    while(1)
    {    struct node temp;
        temp=isValid_and_smallg();
    1a0e:	ce 01       	movw	r24, r28
    1a10:	01 96       	adiw	r24, 0x01	; 1
    1a12:	0e 94 c7 09 	call	0x138e	; 0x138e <isValid_and_smallg>
    1a16:	09 81       	ldd	r16, Y+1	; 0x01
    1a18:	1a 81       	ldd	r17, Y+2	; 0x02
    1a1a:	eb 80       	ldd	r14, Y+3	; 0x03
    1a1c:	fc 80       	ldd	r15, Y+4	; 0x04
        findDirection(temp.x,temp.y);
    1a1e:	c8 01       	movw	r24, r16
    1a20:	b7 01       	movw	r22, r14
    1a22:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <findDirection>
        matrix[temp.x][temp.y].visited=1;
    1a26:	c7 01       	movw	r24, r14
    1a28:	88 0f       	add	r24, r24
    1a2a:	99 1f       	adc	r25, r25
    1a2c:	88 0f       	add	r24, r24
    1a2e:	99 1f       	adc	r25, r25
    1a30:	9c 01       	movw	r18, r24
    1a32:	22 0f       	add	r18, r18
    1a34:	33 1f       	adc	r19, r19
    1a36:	22 0f       	add	r18, r18
    1a38:	33 1f       	adc	r19, r19
    1a3a:	82 0f       	add	r24, r18
    1a3c:	93 1f       	adc	r25, r19
    1a3e:	08 9d       	mul	r16, r8
    1a40:	90 01       	movw	r18, r0
    1a42:	09 9d       	mul	r16, r9
    1a44:	30 0d       	add	r19, r0
    1a46:	18 9d       	mul	r17, r8
    1a48:	30 0d       	add	r19, r0
    1a4a:	11 24       	eor	r1, r1
    1a4c:	82 0f       	add	r24, r18
    1a4e:	93 1f       	adc	r25, r19
    1a50:	8a 0d       	add	r24, r10
    1a52:	9b 1d       	adc	r25, r11
    1a54:	fc 01       	movw	r30, r24
    1a56:	73 86       	std	Z+11, r7	; 0x0b
    1a58:	62 86       	std	Z+10, r6	; 0x0a
        cx=temp.x,cy=temp.y;
    1a5a:	10 93 07 02 	sts	0x0207, r17
    1a5e:	00 93 06 02 	sts	0x0206, r16
    1a62:	f0 92 05 02 	sts	0x0205, r15
    1a66:	e0 92 04 02 	sts	0x0204, r14
        if(cx==x_&&cy==y_)
    1a6a:	c0 16       	cp	r12, r16
    1a6c:	d1 06       	cpc	r13, r17
    1a6e:	79 f6       	brne	.-98     	; 0x1a0e <find_array_path+0x54>
    1a70:	4e 14       	cp	r4, r14
    1a72:	5f 04       	cpc	r5, r15
    1a74:	61 f6       	brne	.-104    	; 0x1a0e <find_array_path+0x54>
        {
            break;
        }
    }
    
}
    1a76:	64 96       	adiw	r28, 0x14	; 20
    1a78:	0f b6       	in	r0, 0x3f	; 63
    1a7a:	f8 94       	cli
    1a7c:	de bf       	out	0x3e, r29	; 62
    1a7e:	0f be       	out	0x3f, r0	; 63
    1a80:	cd bf       	out	0x3d, r28	; 61
    1a82:	df 91       	pop	r29
    1a84:	cf 91       	pop	r28
    1a86:	1f 91       	pop	r17
    1a88:	0f 91       	pop	r16
    1a8a:	ff 90       	pop	r15
    1a8c:	ef 90       	pop	r14
    1a8e:	df 90       	pop	r13
    1a90:	cf 90       	pop	r12
    1a92:	bf 90       	pop	r11
    1a94:	af 90       	pop	r10
    1a96:	9f 90       	pop	r9
    1a98:	8f 90       	pop	r8
    1a9a:	7f 90       	pop	r7
    1a9c:	6f 90       	pop	r6
    1a9e:	5f 90       	pop	r5
    1aa0:	4f 90       	pop	r4
    1aa2:	08 95       	ret

00001aa4 <servo_1>:
//Function to rotate Servo 1 by a specified angle in the multiples of 1.86 degrees
void servo_1(unsigned char degrees)
{
    float PositionPanServo = 0;
    PositionPanServo = ((float)degrees / 1.86) + 35.0;
    OCR1AH = 0x00;
    1aa4:	10 92 89 00 	sts	0x0089, r1

//Function to rotate Servo 1 by a specified angle in the multiples of 1.86 degrees
void servo_1(unsigned char degrees)
{
    float PositionPanServo = 0;
    PositionPanServo = ((float)degrees / 1.86) + 35.0;
    1aa8:	68 2f       	mov	r22, r24
    1aaa:	70 e0       	ldi	r23, 0x00	; 0
    1aac:	80 e0       	ldi	r24, 0x00	; 0
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <__floatunsisf>
    1ab4:	2b e7       	ldi	r18, 0x7B	; 123
    1ab6:	34 e1       	ldi	r19, 0x14	; 20
    1ab8:	4e ee       	ldi	r20, 0xEE	; 238
    1aba:	5f e3       	ldi	r21, 0x3F	; 63
    1abc:	0e 94 40 11 	call	0x2280	; 0x2280 <__divsf3>
    1ac0:	20 e0       	ldi	r18, 0x00	; 0
    1ac2:	30 e0       	ldi	r19, 0x00	; 0
    1ac4:	4c e0       	ldi	r20, 0x0C	; 12
    1ac6:	52 e4       	ldi	r21, 0x42	; 66
    1ac8:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <__addsf3>
    OCR1AH = 0x00;
    OCR1AL = (unsigned char) PositionPanServo;
    1acc:	0e 94 a8 11 	call	0x2350	; 0x2350 <__fixunssfsi>
    1ad0:	60 93 88 00 	sts	0x0088, r22
}
    1ad4:	08 95       	ret

00001ad6 <servo_2>:
//Function to rotate Servo 2 by a specified angle in the multiples of 1.86 degrees
void servo_2(unsigned char degrees)
{
    float PositionTiltServo = 0;
    PositionTiltServo = ((float)degrees / 1.86) + 35.0;
    OCR1BH = 0x00;
    1ad6:	10 92 8b 00 	sts	0x008B, r1

//Function to rotate Servo 2 by a specified angle in the multiples of 1.86 degrees
void servo_2(unsigned char degrees)
{
    float PositionTiltServo = 0;
    PositionTiltServo = ((float)degrees / 1.86) + 35.0;
    1ada:	68 2f       	mov	r22, r24
    1adc:	70 e0       	ldi	r23, 0x00	; 0
    1ade:	80 e0       	ldi	r24, 0x00	; 0
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <__floatunsisf>
    1ae6:	2b e7       	ldi	r18, 0x7B	; 123
    1ae8:	34 e1       	ldi	r19, 0x14	; 20
    1aea:	4e ee       	ldi	r20, 0xEE	; 238
    1aec:	5f e3       	ldi	r21, 0x3F	; 63
    1aee:	0e 94 40 11 	call	0x2280	; 0x2280 <__divsf3>
    1af2:	20 e0       	ldi	r18, 0x00	; 0
    1af4:	30 e0       	ldi	r19, 0x00	; 0
    1af6:	4c e0       	ldi	r20, 0x0C	; 12
    1af8:	52 e4       	ldi	r21, 0x42	; 66
    1afa:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <__addsf3>
    OCR1BH = 0x00;
    OCR1BL = (unsigned char) PositionTiltServo;
    1afe:	0e 94 a8 11 	call	0x2350	; 0x2350 <__fixunssfsi>
    1b02:	60 93 8a 00 	sts	0x008A, r22
}
    1b06:	08 95       	ret

00001b08 <servo_3>:
//Function to rotate Servo 3 by a specified angle in the multiples of 1.86 degrees
void servo_3(unsigned char degrees)
{
    float PositionServo = 0;
    PositionServo = ((float)degrees / 1.86) + 35.0;
    OCR1CH = 0x00;
    1b08:	10 92 8d 00 	sts	0x008D, r1

//Function to rotate Servo 3 by a specified angle in the multiples of 1.86 degrees
void servo_3(unsigned char degrees)
{
    float PositionServo = 0;
    PositionServo = ((float)degrees / 1.86) + 35.0;
    1b0c:	68 2f       	mov	r22, r24
    1b0e:	70 e0       	ldi	r23, 0x00	; 0
    1b10:	80 e0       	ldi	r24, 0x00	; 0
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <__floatunsisf>
    1b18:	2b e7       	ldi	r18, 0x7B	; 123
    1b1a:	34 e1       	ldi	r19, 0x14	; 20
    1b1c:	4e ee       	ldi	r20, 0xEE	; 238
    1b1e:	5f e3       	ldi	r21, 0x3F	; 63
    1b20:	0e 94 40 11 	call	0x2280	; 0x2280 <__divsf3>
    1b24:	20 e0       	ldi	r18, 0x00	; 0
    1b26:	30 e0       	ldi	r19, 0x00	; 0
    1b28:	4c e0       	ldi	r20, 0x0C	; 12
    1b2a:	52 e4       	ldi	r21, 0x42	; 66
    1b2c:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <__addsf3>
    OCR1CH = 0x00;
    OCR1CL = (unsigned char) PositionServo;
    1b30:	0e 94 a8 11 	call	0x2350	; 0x2350 <__fixunssfsi>
    1b34:	60 93 8c 00 	sts	0x008C, r22
}
    1b38:	08 95       	ret

00001b3a <deposit>:
  * Output: drop the fruits at specific angle in the deposition box
  * Example Call: deposit()
  */
void deposit()
{
    servo_1(74);  //to bent the arm
    1b3a:	8a e4       	ldi	r24, 0x4A	; 74
    1b3c:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <servo_1>
    1b40:	8f ef       	ldi	r24, 0xFF	; 255
    1b42:	9f e7       	ldi	r25, 0x7F	; 127
    1b44:	a4 e0       	ldi	r26, 0x04	; 4
    1b46:	81 50       	subi	r24, 0x01	; 1
    1b48:	90 40       	sbci	r25, 0x00	; 0
    1b4a:	a0 40       	sbci	r26, 0x00	; 0
    1b4c:	e1 f7       	brne	.-8      	; 0x1b46 <deposit+0xc>
    1b4e:	00 c0       	rjmp	.+0      	; 0x1b50 <deposit+0x16>
    1b50:	00 00       	nop
    _delay_ms(100);
    servo_2(117);
    1b52:	85 e7       	ldi	r24, 0x75	; 117
    1b54:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <servo_2>
    1b58:	8f ef       	ldi	r24, 0xFF	; 255
    1b5a:	9f e7       	ldi	r25, 0x7F	; 127
    1b5c:	a4 e0       	ldi	r26, 0x04	; 4
    1b5e:	81 50       	subi	r24, 0x01	; 1
    1b60:	90 40       	sbci	r25, 0x00	; 0
    1b62:	a0 40       	sbci	r26, 0x00	; 0
    1b64:	e1 f7       	brne	.-8      	; 0x1b5e <deposit+0x24>
    1b66:	00 c0       	rjmp	.+0      	; 0x1b68 <deposit+0x2e>
    1b68:	00 00       	nop
    _delay_ms(100);
    servo_1(91);
    1b6a:	8b e5       	ldi	r24, 0x5B	; 91
    1b6c:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <servo_1>
    1b70:	8f ef       	ldi	r24, 0xFF	; 255
    1b72:	9f e7       	ldi	r25, 0x7F	; 127
    1b74:	a4 e0       	ldi	r26, 0x04	; 4
    1b76:	81 50       	subi	r24, 0x01	; 1
    1b78:	90 40       	sbci	r25, 0x00	; 0
    1b7a:	a0 40       	sbci	r26, 0x00	; 0
    1b7c:	e1 f7       	brne	.-8      	; 0x1b76 <deposit+0x3c>
    1b7e:	00 c0       	rjmp	.+0      	; 0x1b80 <deposit+0x46>
    1b80:	00 00       	nop
    _delay_ms(100);
    servo_2(113);
    1b82:	81 e7       	ldi	r24, 0x71	; 113
    1b84:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <servo_2>
    1b88:	8f ef       	ldi	r24, 0xFF	; 255
    1b8a:	9f ef       	ldi	r25, 0xFF	; 255
    1b8c:	a1 e1       	ldi	r26, 0x11	; 17
    1b8e:	81 50       	subi	r24, 0x01	; 1
    1b90:	90 40       	sbci	r25, 0x00	; 0
    1b92:	a0 40       	sbci	r26, 0x00	; 0
    1b94:	e1 f7       	brne	.-8      	; 0x1b8e <deposit+0x54>
    1b96:	00 c0       	rjmp	.+0      	; 0x1b98 <deposit+0x5e>
    1b98:	00 00       	nop
    _delay_ms(400);
    servo_3(0); //to open the claws
    1b9a:	80 e0       	ldi	r24, 0x00	; 0
    1b9c:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <servo_3>
    1ba0:	8f ef       	ldi	r24, 0xFF	; 255
    1ba2:	9f e7       	ldi	r25, 0x7F	; 127
    1ba4:	ad e0       	ldi	r26, 0x0D	; 13
    1ba6:	81 50       	subi	r24, 0x01	; 1
    1ba8:	90 40       	sbci	r25, 0x00	; 0
    1baa:	a0 40       	sbci	r26, 0x00	; 0
    1bac:	e1 f7       	brne	.-8      	; 0x1ba6 <deposit+0x6c>
    1bae:	00 c0       	rjmp	.+0      	; 0x1bb0 <deposit+0x76>
    1bb0:	00 00       	nop
    _delay_ms(300);
    servo_1(74);
    1bb2:	8a e4       	ldi	r24, 0x4A	; 74
    1bb4:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <servo_1>
    1bb8:	8f ef       	ldi	r24, 0xFF	; 255
    1bba:	9f e7       	ldi	r25, 0x7F	; 127
    1bbc:	a4 e0       	ldi	r26, 0x04	; 4
    1bbe:	81 50       	subi	r24, 0x01	; 1
    1bc0:	90 40       	sbci	r25, 0x00	; 0
    1bc2:	a0 40       	sbci	r26, 0x00	; 0
    1bc4:	e1 f7       	brne	.-8      	; 0x1bbe <deposit+0x84>
    1bc6:	00 c0       	rjmp	.+0      	; 0x1bc8 <deposit+0x8e>
    1bc8:	00 00       	nop
    _delay_ms(100);
    servo_2(117);
    1bca:	85 e7       	ldi	r24, 0x75	; 117
    1bcc:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <servo_2>
    1bd0:	8f ef       	ldi	r24, 0xFF	; 255
    1bd2:	9f e7       	ldi	r25, 0x7F	; 127
    1bd4:	a4 e0       	ldi	r26, 0x04	; 4
    1bd6:	81 50       	subi	r24, 0x01	; 1
    1bd8:	90 40       	sbci	r25, 0x00	; 0
    1bda:	a0 40       	sbci	r26, 0x00	; 0
    1bdc:	e1 f7       	brne	.-8      	; 0x1bd6 <deposit+0x9c>
    1bde:	00 c0       	rjmp	.+0      	; 0x1be0 <deposit+0xa6>
    1be0:	00 00       	nop
    _delay_ms(100);
    servo_2(125);
    1be2:	8d e7       	ldi	r24, 0x7D	; 125
    1be4:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <servo_2>
    1be8:	8f ef       	ldi	r24, 0xFF	; 255
    1bea:	9f ef       	ldi	r25, 0xFF	; 255
    1bec:	a8 e0       	ldi	r26, 0x08	; 8
    1bee:	81 50       	subi	r24, 0x01	; 1
    1bf0:	90 40       	sbci	r25, 0x00	; 0
    1bf2:	a0 40       	sbci	r26, 0x00	; 0
    1bf4:	e1 f7       	brne	.-8      	; 0x1bee <deposit+0xb4>
    1bf6:	00 c0       	rjmp	.+0      	; 0x1bf8 <deposit+0xbe>
    1bf8:	00 00       	nop
    _delay_ms(200);
    servo_1(39);
    1bfa:	87 e2       	ldi	r24, 0x27	; 39
    1bfc:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <servo_1>
    1c00:	8f ef       	ldi	r24, 0xFF	; 255
    1c02:	9f ef       	ldi	r25, 0xFF	; 255
    1c04:	a8 e0       	ldi	r26, 0x08	; 8
    1c06:	81 50       	subi	r24, 0x01	; 1
    1c08:	90 40       	sbci	r25, 0x00	; 0
    1c0a:	a0 40       	sbci	r26, 0x00	; 0
    1c0c:	e1 f7       	brne	.-8      	; 0x1c06 <deposit+0xcc>
    1c0e:	00 c0       	rjmp	.+0      	; 0x1c10 <deposit+0xd6>
    1c10:	00 00       	nop
    _delay_ms(200);
}
    1c12:	08 95       	ret

00001c14 <Deposition>:
           from its right hand side
 * Example Call: Deposition(2)
 */
void Deposition (int i)
{
    Dx[0]=0;Dy[0]=5; //blueberry deposition
    1c14:	10 92 6e 06 	sts	0x066E, r1
    1c18:	10 92 6d 06 	sts	0x066D, r1
    1c1c:	25 e0       	ldi	r18, 0x05	; 5
    1c1e:	30 e0       	ldi	r19, 0x00	; 0
    1c20:	30 93 80 02 	sts	0x0280, r19
    1c24:	20 93 7f 02 	sts	0x027F, r18
    Dx[1]=5; Dy[1]=5; //orange deposition box
    1c28:	30 93 70 06 	sts	0x0670, r19
    1c2c:	20 93 6f 06 	sts	0x066F, r18
    1c30:	30 93 82 02 	sts	0x0282, r19
    1c34:	20 93 81 02 	sts	0x0281, r18
    Dx[2]=2;Dy[2]=5; //apple deposition box
    1c38:	42 e0       	ldi	r20, 0x02	; 2
    1c3a:	50 e0       	ldi	r21, 0x00	; 0
    1c3c:	50 93 72 06 	sts	0x0672, r21
    1c40:	40 93 71 06 	sts	0x0671, r20
    1c44:	30 93 84 02 	sts	0x0284, r19
    1c48:	20 93 83 02 	sts	0x0283, r18
    //matrixInitialise(D[i],D[i]);
    find_array_path( Dx[i],Dy[i]);
    1c4c:	88 0f       	add	r24, r24
    1c4e:	99 1f       	adc	r25, r25
    1c50:	fc 01       	movw	r30, r24
    1c52:	e3 59       	subi	r30, 0x93	; 147
    1c54:	f9 4f       	sbci	r31, 0xF9	; 249
    1c56:	81 58       	subi	r24, 0x81	; 129
    1c58:	9d 4f       	sbci	r25, 0xFD	; 253
    1c5a:	dc 01       	movw	r26, r24
    1c5c:	6d 91       	ld	r22, X+
    1c5e:	7c 91       	ld	r23, X
    1c60:	80 81       	ld	r24, Z
    1c62:	91 81       	ldd	r25, Z+1	; 0x01
    1c64:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <find_array_path>
    setangle(0);
    1c68:	80 e0       	ldi	r24, 0x00	; 0
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <setangle>
    1c70:	8f ef       	ldi	r24, 0xFF	; 255
    1c72:	9f e7       	ldi	r25, 0x7F	; 127
    1c74:	a6 e1       	ldi	r26, 0x16	; 22
    1c76:	81 50       	subi	r24, 0x01	; 1
    1c78:	90 40       	sbci	r25, 0x00	; 0
    1c7a:	a0 40       	sbci	r26, 0x00	; 0
    1c7c:	e1 f7       	brne	.-8      	; 0x1c76 <Deposition+0x62>
    1c7e:	00 c0       	rjmp	.+0      	; 0x1c80 <Deposition+0x6c>
    1c80:	00 00       	nop
    _delay_ms(500);
    move1();
    1c82:	0e 94 1c 06 	call	0xc38	; 0xc38 <move1>
    deposit();
    1c86:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <deposit>
    setangle (180);
    1c8a:	84 eb       	ldi	r24, 0xB4	; 180
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <setangle>
    1c92:	8f ef       	ldi	r24, 0xFF	; 255
    1c94:	9f e7       	ldi	r25, 0x7F	; 127
    1c96:	a4 e0       	ldi	r26, 0x04	; 4
    1c98:	81 50       	subi	r24, 0x01	; 1
    1c9a:	90 40       	sbci	r25, 0x00	; 0
    1c9c:	a0 40       	sbci	r26, 0x00	; 0
    1c9e:	e1 f7       	brne	.-8      	; 0x1c98 <Deposition+0x84>
    1ca0:	00 c0       	rjmp	.+0      	; 0x1ca2 <Deposition+0x8e>
    1ca2:	00 00       	nop
    _delay_ms(100);
    check_l();
    1ca4:	0e 94 59 04 	call	0x8b2	; 0x8b2 <check_l>
    1ca8:	8f ef       	ldi	r24, 0xFF	; 255
    1caa:	9f ef       	ldi	r25, 0xFF	; 255
    1cac:	a8 e0       	ldi	r26, 0x08	; 8
    1cae:	81 50       	subi	r24, 0x01	; 1
    1cb0:	90 40       	sbci	r25, 0x00	; 0
    1cb2:	a0 40       	sbci	r26, 0x00	; 0
    1cb4:	e1 f7       	brne	.-8      	; 0x1cae <Deposition+0x9a>
    1cb6:	00 c0       	rjmp	.+0      	; 0x1cb8 <Deposition+0xa4>
    1cb8:	00 00       	nop
    _delay_ms(200);
    move();
    1cba:	0e 94 45 05 	call	0xa8a	; 0xa8a <move>
    1cbe:	8f ef       	ldi	r24, 0xFF	; 255
    1cc0:	9f e7       	ldi	r25, 0x7F	; 127
    1cc2:	a4 e0       	ldi	r26, 0x04	; 4
    1cc4:	81 50       	subi	r24, 0x01	; 1
    1cc6:	90 40       	sbci	r25, 0x00	; 0
    1cc8:	a0 40       	sbci	r26, 0x00	; 0
    1cca:	e1 f7       	brne	.-8      	; 0x1cc4 <Deposition+0xb0>
    1ccc:	00 c0       	rjmp	.+0      	; 0x1cce <Deposition+0xba>
    1cce:	00 00       	nop
    _delay_ms(100);


}
    1cd0:	08 95       	ret

00001cd2 <pluck>:
    1cd2:	8f ef       	ldi	r24, 0xFF	; 255
    1cd4:	9f e7       	ldi	r25, 0x7F	; 127
    1cd6:	a4 e0       	ldi	r26, 0x04	; 4
    1cd8:	81 50       	subi	r24, 0x01	; 1
    1cda:	90 40       	sbci	r25, 0x00	; 0
    1cdc:	a0 40       	sbci	r26, 0x00	; 0
    1cde:	e1 f7       	brne	.-8      	; 0x1cd8 <pluck+0x6>
    1ce0:	00 c0       	rjmp	.+0      	; 0x1ce2 <pluck+0x10>
    1ce2:	00 00       	nop
  */
void pluck()
{
    char dep=0x36;
    _delay_ms(100);
    servo_3(100);   //to close the claws
    1ce4:	84 e6       	ldi	r24, 0x64	; 100
    1ce6:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <servo_3>
    1cea:	8f ef       	ldi	r24, 0xFF	; 255
    1cec:	9f ef       	ldi	r25, 0xFF	; 255
    1cee:	a1 e1       	ldi	r26, 0x11	; 17
    1cf0:	81 50       	subi	r24, 0x01	; 1
    1cf2:	90 40       	sbci	r25, 0x00	; 0
    1cf4:	a0 40       	sbci	r26, 0x00	; 0
    1cf6:	e1 f7       	brne	.-8      	; 0x1cf0 <pluck+0x1e>
    1cf8:	00 c0       	rjmp	.+0      	; 0x1cfa <pluck+0x28>
    1cfa:	00 00       	nop
    _delay_ms(400);
    if(plck==1)     //to pluck the fruit in checkphase1 position
    1cfc:	80 91 63 06 	lds	r24, 0x0663
    1d00:	90 91 64 06 	lds	r25, 0x0664
    1d04:	81 30       	cpi	r24, 0x01	; 1
    1d06:	91 05       	cpc	r25, r1
    1d08:	89 f5       	brne	.+98     	; 0x1d6c <pluck+0x9a>
    {
        servo_1(84);  
    1d0a:	84 e5       	ldi	r24, 0x54	; 84
    1d0c:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <servo_1>
    1d10:	8f ef       	ldi	r24, 0xFF	; 255
    1d12:	9f e7       	ldi	r25, 0x7F	; 127
    1d14:	a4 e0       	ldi	r26, 0x04	; 4
    1d16:	81 50       	subi	r24, 0x01	; 1
    1d18:	90 40       	sbci	r25, 0x00	; 0
    1d1a:	a0 40       	sbci	r26, 0x00	; 0
    1d1c:	e1 f7       	brne	.-8      	; 0x1d16 <pluck+0x44>
    1d1e:	00 c0       	rjmp	.+0      	; 0x1d20 <pluck+0x4e>
    1d20:	00 00       	nop
        _delay_ms(100);
        servo_2(60);
    1d22:	8c e3       	ldi	r24, 0x3C	; 60
    1d24:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <servo_2>
    1d28:	8f ef       	ldi	r24, 0xFF	; 255
    1d2a:	9f e7       	ldi	r25, 0x7F	; 127
    1d2c:	a4 e0       	ldi	r26, 0x04	; 4
    1d2e:	81 50       	subi	r24, 0x01	; 1
    1d30:	90 40       	sbci	r25, 0x00	; 0
    1d32:	a0 40       	sbci	r26, 0x00	; 0
    1d34:	e1 f7       	brne	.-8      	; 0x1d2e <pluck+0x5c>
    1d36:	00 c0       	rjmp	.+0      	; 0x1d38 <pluck+0x66>
    1d38:	00 00       	nop
        _delay_ms(100);
        servo_1(86);
    1d3a:	86 e5       	ldi	r24, 0x56	; 86
    1d3c:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <servo_1>
    1d40:	8f ef       	ldi	r24, 0xFF	; 255
    1d42:	9f e7       	ldi	r25, 0x7F	; 127
    1d44:	a4 e0       	ldi	r26, 0x04	; 4
    1d46:	81 50       	subi	r24, 0x01	; 1
    1d48:	90 40       	sbci	r25, 0x00	; 0
    1d4a:	a0 40       	sbci	r26, 0x00	; 0
    1d4c:	e1 f7       	brne	.-8      	; 0x1d46 <pluck+0x74>
    1d4e:	00 c0       	rjmp	.+0      	; 0x1d50 <pluck+0x7e>
    1d50:	00 00       	nop
        _delay_ms(100);
        servo_2(67);
    1d52:	83 e4       	ldi	r24, 0x43	; 67
    1d54:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <servo_2>
    1d58:	8f ef       	ldi	r24, 0xFF	; 255
    1d5a:	9f ef       	ldi	r25, 0xFF	; 255
    1d5c:	a8 e0       	ldi	r26, 0x08	; 8
    1d5e:	81 50       	subi	r24, 0x01	; 1
    1d60:	90 40       	sbci	r25, 0x00	; 0
    1d62:	a0 40       	sbci	r26, 0x00	; 0
    1d64:	e1 f7       	brne	.-8      	; 0x1d5e <pluck+0x8c>
    1d66:	00 c0       	rjmp	.+0      	; 0x1d68 <pluck+0x96>
    1d68:	00 00       	nop
    1d6a:	1b c0       	rjmp	.+54     	; 0x1da2 <pluck+0xd0>
        _delay_ms(200);
    }
    else if(plck==2)     //to pluck the fruit in checkphase2 position
    1d6c:	82 30       	cpi	r24, 0x02	; 2
    1d6e:	91 05       	cpc	r25, r1
    1d70:	c1 f4       	brne	.+48     	; 0x1da2 <pluck+0xd0>
    {
        servo_1(100);
    1d72:	84 e6       	ldi	r24, 0x64	; 100
    1d74:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <servo_1>
    1d78:	8f ef       	ldi	r24, 0xFF	; 255
    1d7a:	9f e7       	ldi	r25, 0x7F	; 127
    1d7c:	a4 e0       	ldi	r26, 0x04	; 4
    1d7e:	81 50       	subi	r24, 0x01	; 1
    1d80:	90 40       	sbci	r25, 0x00	; 0
    1d82:	a0 40       	sbci	r26, 0x00	; 0
    1d84:	e1 f7       	brne	.-8      	; 0x1d7e <pluck+0xac>
    1d86:	00 c0       	rjmp	.+0      	; 0x1d88 <pluck+0xb6>
    1d88:	00 00       	nop
        _delay_ms(100);
        servo_2(62);
    1d8a:	8e e3       	ldi	r24, 0x3E	; 62
    1d8c:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <servo_2>
    1d90:	8f ef       	ldi	r24, 0xFF	; 255
    1d92:	9f ef       	ldi	r25, 0xFF	; 255
    1d94:	a8 e0       	ldi	r26, 0x08	; 8
    1d96:	81 50       	subi	r24, 0x01	; 1
    1d98:	90 40       	sbci	r25, 0x00	; 0
    1d9a:	a0 40       	sbci	r26, 0x00	; 0
    1d9c:	e1 f7       	brne	.-8      	; 0x1d96 <pluck+0xc4>
    1d9e:	00 c0       	rjmp	.+0      	; 0x1da0 <pluck+0xce>
    1da0:	00 00       	nop
        _delay_ms(200);
    }
    servo_1(39);     //make the arm to its original position
    1da2:	87 e2       	ldi	r24, 0x27	; 39
    1da4:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <servo_1>
    1da8:	8f ef       	ldi	r24, 0xFF	; 255
    1daa:	9f e7       	ldi	r25, 0x7F	; 127
    1dac:	a4 e0       	ldi	r26, 0x04	; 4
    1dae:	81 50       	subi	r24, 0x01	; 1
    1db0:	90 40       	sbci	r25, 0x00	; 0
    1db2:	a0 40       	sbci	r26, 0x00	; 0
    1db4:	e1 f7       	brne	.-8      	; 0x1dae <pluck+0xdc>
    1db6:	00 c0       	rjmp	.+0      	; 0x1db8 <pluck+0xe6>
    1db8:	00 00       	nop
    _delay_ms(100);
    servo_2(125);
    1dba:	8d e7       	ldi	r24, 0x7D	; 125
    1dbc:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <servo_2>
    1dc0:	8f ef       	ldi	r24, 0xFF	; 255
    1dc2:	9f e7       	ldi	r25, 0x7F	; 127
    1dc4:	a4 e0       	ldi	r26, 0x04	; 4
    1dc6:	81 50       	subi	r24, 0x01	; 1
    1dc8:	90 40       	sbci	r25, 0x00	; 0
    1dca:	a0 40       	sbci	r26, 0x00	; 0
    1dcc:	e1 f7       	brne	.-8      	; 0x1dc6 <pluck+0xf4>
    1dce:	00 c0       	rjmp	.+0      	; 0x1dd0 <pluck+0xfe>
    1dd0:	00 00       	nop
    _delay_ms(100);
    while(!(dep==0x31||dep==0x32||dep==0x33))
    {
    USART_Transmit(68);
    1dd2:	84 e4       	ldi	r24, 0x44	; 68
    1dd4:	0e 94 bc 03 	call	0x778	; 0x778 <USART_Transmit>
    dep=USART_Receive();
    1dd8:	0e 94 c9 03 	call	0x792	; 0x792 <USART_Receive>
    }
    servo_1(39);     //make the arm to its original position
    _delay_ms(100);
    servo_2(125);
    _delay_ms(100);
    while(!(dep==0x31||dep==0x32||dep==0x33))
    1ddc:	98 2f       	mov	r25, r24
    1dde:	91 53       	subi	r25, 0x31	; 49
    1de0:	93 30       	cpi	r25, 0x03	; 3
    1de2:	b8 f7       	brcc	.-18     	; 0x1dd2 <pluck+0x100>
    {
    USART_Transmit(68);
    dep=USART_Receive();
    }
    if(dep==0x31)    //for blueberry
    1de4:	81 33       	cpi	r24, 0x31	; 49
    1de6:	29 f4       	brne	.+10     	; 0x1df2 <pluck+0x120>
    Deposition(0);   
    1de8:	80 e0       	ldi	r24, 0x00	; 0
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <Deposition>
    1df0:	08 95       	ret
    if(dep==0x32)    //for orange
    1df2:	82 33       	cpi	r24, 0x32	; 50
    1df4:	29 f4       	brne	.+10     	; 0x1e00 <pluck+0x12e>
    Deposition(1);
    1df6:	81 e0       	ldi	r24, 0x01	; 1
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <Deposition>
    1dfe:	08 95       	ret
    if(dep==0x33)    //for apple
    1e00:	83 33       	cpi	r24, 0x33	; 51
    1e02:	21 f4       	brne	.+8      	; 0x1e0c <pluck+0x13a>
    Deposition(2);
    1e04:	82 e0       	ldi	r24, 0x02	; 2
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <Deposition>
    1e0c:	08 95       	ret

00001e0e <checkPhase1>:
  * Output: set the robotic arm to phase 1 for detecting fruit
  * Example Call: checkPhase1()
  */
void checkPhase1()
{
    servo_2(83);
    1e0e:	83 e5       	ldi	r24, 0x53	; 83
    1e10:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <servo_2>
    1e14:	8f ef       	ldi	r24, 0xFF	; 255
    1e16:	9f e7       	ldi	r25, 0x7F	; 127
    1e18:	ad e0       	ldi	r26, 0x0D	; 13
    1e1a:	81 50       	subi	r24, 0x01	; 1
    1e1c:	90 40       	sbci	r25, 0x00	; 0
    1e1e:	a0 40       	sbci	r26, 0x00	; 0
    1e20:	e1 f7       	brne	.-8      	; 0x1e1a <checkPhase1+0xc>
    1e22:	00 c0       	rjmp	.+0      	; 0x1e24 <checkPhase1+0x16>
    1e24:	00 00       	nop
    _delay_ms(300);
    servo_1(82);
    1e26:	82 e5       	ldi	r24, 0x52	; 82
    1e28:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <servo_1>
    1e2c:	8f ef       	ldi	r24, 0xFF	; 255
    1e2e:	9f e7       	ldi	r25, 0x7F	; 127
    1e30:	ad e0       	ldi	r26, 0x0D	; 13
    1e32:	81 50       	subi	r24, 0x01	; 1
    1e34:	90 40       	sbci	r25, 0x00	; 0
    1e36:	a0 40       	sbci	r26, 0x00	; 0
    1e38:	e1 f7       	brne	.-8      	; 0x1e32 <checkPhase1+0x24>
    1e3a:	00 c0       	rjmp	.+0      	; 0x1e3c <checkPhase1+0x2e>
    1e3c:	00 00       	nop
    _delay_ms(300);
    
}
    1e3e:	08 95       	ret

00001e40 <checkPhase2>:
  * Output: set the robotic arm to phase 2 for detecting fruit
  * Example Call: checkPhase2()
  */
void checkPhase2()
{
    servo_2(90);
    1e40:	8a e5       	ldi	r24, 0x5A	; 90
    1e42:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <servo_2>
    1e46:	8f ef       	ldi	r24, 0xFF	; 255
    1e48:	9f e7       	ldi	r25, 0x7F	; 127
    1e4a:	ad e0       	ldi	r26, 0x0D	; 13
    1e4c:	81 50       	subi	r24, 0x01	; 1
    1e4e:	90 40       	sbci	r25, 0x00	; 0
    1e50:	a0 40       	sbci	r26, 0x00	; 0
    1e52:	e1 f7       	brne	.-8      	; 0x1e4c <checkPhase2+0xc>
    1e54:	00 c0       	rjmp	.+0      	; 0x1e56 <checkPhase2+0x16>
    1e56:	00 00       	nop
    _delay_ms(300);
    servo_1(87);
    1e58:	87 e5       	ldi	r24, 0x57	; 87
    1e5a:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <servo_1>
    1e5e:	8f ef       	ldi	r24, 0xFF	; 255
    1e60:	9f e7       	ldi	r25, 0x7F	; 127
    1e62:	ad e0       	ldi	r26, 0x0D	; 13
    1e64:	81 50       	subi	r24, 0x01	; 1
    1e66:	90 40       	sbci	r25, 0x00	; 0
    1e68:	a0 40       	sbci	r26, 0x00	; 0
    1e6a:	e1 f7       	brne	.-8      	; 0x1e64 <checkPhase2+0x24>
    1e6c:	00 c0       	rjmp	.+0      	; 0x1e6e <checkPhase2+0x2e>
    1e6e:	00 00       	nop
    _delay_ms(300);
    
}
    1e70:	08 95       	ret

00001e72 <PointsLocator>:
  * Logic: It send R everytime it reaches a respective node around tree to rasp pi to start image processing and receives 9 if the fruit is to
           plucked. 
  * Example Call: PointsLocator(2,3)
  */
 void PointsLocator(int Fx,int Fy)
 {
    1e72:	4f 92       	push	r4
    1e74:	5f 92       	push	r5
    1e76:	6f 92       	push	r6
    1e78:	7f 92       	push	r7
    1e7a:	8f 92       	push	r8
    1e7c:	9f 92       	push	r9
    1e7e:	af 92       	push	r10
    1e80:	bf 92       	push	r11
    1e82:	cf 92       	push	r12
    1e84:	df 92       	push	r13
    1e86:	ef 92       	push	r14
    1e88:	ff 92       	push	r15
    1e8a:	0f 93       	push	r16
    1e8c:	1f 93       	push	r17
    1e8e:	cf 93       	push	r28
    1e90:	df 93       	push	r29
    1e92:	cd b7       	in	r28, 0x3d	; 61
    1e94:	de b7       	in	r29, 0x3e	; 62
    1e96:	60 97       	sbiw	r28, 0x10	; 16
    1e98:	0f b6       	in	r0, 0x3f	; 63
    1e9a:	f8 94       	cli
    1e9c:	de bf       	out	0x3e, r29	; 62
    1e9e:	0f be       	out	0x3f, r0	; 63
    1ea0:	cd bf       	out	0x3d, r28	; 61
     int X[4];                //x-coordinates around tree from where fruits to be plucked
     int Y[4];                //y-coordinates around tree from where fruits to be plucked
     char data1,data2,data3;
     X [0] = Fx - 1; Y [0] = Fy ;
    1ea2:	9c 01       	movw	r18, r24
    1ea4:	21 50       	subi	r18, 0x01	; 1
    1ea6:	30 40       	sbci	r19, 0x00	; 0
    1ea8:	3a 83       	std	Y+2, r19	; 0x02
    1eaa:	29 83       	std	Y+1, r18	; 0x01
    1eac:	7a 87       	std	Y+10, r23	; 0x0a
    1eae:	69 87       	std	Y+9, r22	; 0x09
     X [1] = Fx;     Y [1] = Fy + 1;
    1eb0:	9c 83       	std	Y+4, r25	; 0x04
    1eb2:	8b 83       	std	Y+3, r24	; 0x03
    1eb4:	9b 01       	movw	r18, r22
    1eb6:	2f 5f       	subi	r18, 0xFF	; 255
    1eb8:	3f 4f       	sbci	r19, 0xFF	; 255
    1eba:	3c 87       	std	Y+12, r19	; 0x0c
    1ebc:	2b 87       	std	Y+11, r18	; 0x0b
     X [2] = Fx + 1; Y [2] = Fy;
    1ebe:	9c 01       	movw	r18, r24
    1ec0:	2f 5f       	subi	r18, 0xFF	; 255
    1ec2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ec4:	3e 83       	std	Y+6, r19	; 0x06
    1ec6:	2d 83       	std	Y+5, r18	; 0x05
    1ec8:	7e 87       	std	Y+14, r23	; 0x0e
    1eca:	6d 87       	std	Y+13, r22	; 0x0d
     X [3] = Fx;     Y [3] = Fy - 1;
    1ecc:	98 87       	std	Y+8, r25	; 0x08
    1ece:	8f 83       	std	Y+7, r24	; 0x07
    1ed0:	61 50       	subi	r22, 0x01	; 1
    1ed2:	70 40       	sbci	r23, 0x00	; 0
    1ed4:	78 8b       	std	Y+16, r23	; 0x10
    1ed6:	6f 87       	std	Y+15, r22	; 0x0f
    1ed8:	7e 01       	movw	r14, r28
    1eda:	08 94       	sec
    1edc:	e1 1c       	adc	r14, r1
    1ede:	f1 1c       	adc	r15, r1
    1ee0:	0f 2e       	mov	r0, r31
    1ee2:	f9 e0       	ldi	r31, 0x09	; 9
    1ee4:	cf 2e       	mov	r12, r31
    1ee6:	dd 24       	eor	r13, r13
    1ee8:	f0 2d       	mov	r31, r0
    1eea:	cc 0e       	add	r12, r28
    1eec:	dd 1e       	adc	r13, r29
     for (int i = 0; i <= 3; i++)
    1eee:	00 e0       	ldi	r16, 0x00	; 0
    1ef0:	10 e0       	ldi	r17, 0x00	; 0
     {   servo_1(39); //make the arm straight and open
         servo_2(125);
         servo_3(0);  //claw is open
         
         if(matrix[X[i]][Y[i]].obstacle==2||X[i]<0||X[i]>6||Y[i]<0||Y[i]>6)
    1ef2:	0f 2e       	mov	r0, r31
    1ef4:	f9 e8       	ldi	r31, 0x89	; 137
    1ef6:	af 2e       	mov	r10, r31
    1ef8:	f2 e0       	ldi	r31, 0x02	; 2
    1efa:	bf 2e       	mov	r11, r31
    1efc:	f0 2d       	mov	r31, r0
    1efe:	0f 2e       	mov	r0, r31
    1f00:	fc e8       	ldi	r31, 0x8C	; 140
    1f02:	8f 2e       	mov	r8, r31
    1f04:	99 24       	eor	r9, r9
    1f06:	f0 2d       	mov	r31, r0
             if(data1==0x39)      //if fruit is found in first phase and has to be plucked then pluck function called
             {   servo_2(60);
                 _delay_ms(200);
                 servo_1(96);
                 _delay_ms(200);
                 plck=1;
    1f08:	66 24       	eor	r6, r6
    1f0a:	77 24       	eor	r7, r7
    1f0c:	63 94       	inc	r6
                    
                    servo_2(63);
                    _delay_ms(200);
                    servo_1(95);
                    _delay_ms(200);
                    plck=2;
    1f0e:	44 24       	eor	r4, r4
    1f10:	55 24       	eor	r5, r5
    1f12:	68 94       	set
    1f14:	41 f8       	bld	r4, 1
     X [0] = Fx - 1; Y [0] = Fy ;
     X [1] = Fx;     Y [1] = Fy + 1;
     X [2] = Fx + 1; Y [2] = Fy;
     X [3] = Fx;     Y [3] = Fy - 1;
     for (int i = 0; i <= 3; i++)
     {   servo_1(39); //make the arm straight and open
    1f16:	87 e2       	ldi	r24, 0x27	; 39
    1f18:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <servo_1>
         servo_2(125);
    1f1c:	8d e7       	ldi	r24, 0x7D	; 125
    1f1e:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <servo_2>
         servo_3(0);  //claw is open
    1f22:	80 e0       	ldi	r24, 0x00	; 0
    1f24:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <servo_3>
         
         if(matrix[X[i]][Y[i]].obstacle==2||X[i]<0||X[i]>6||Y[i]<0||Y[i]>6)
    1f28:	d7 01       	movw	r26, r14
    1f2a:	4d 91       	ld	r20, X+
    1f2c:	5d 91       	ld	r21, X+
    1f2e:	7d 01       	movw	r14, r26
    1f30:	f6 01       	movw	r30, r12
    1f32:	61 91       	ld	r22, Z+
    1f34:	71 91       	ld	r23, Z+
    1f36:	6f 01       	movw	r12, r30
    1f38:	cb 01       	movw	r24, r22
    1f3a:	88 0f       	add	r24, r24
    1f3c:	99 1f       	adc	r25, r25
    1f3e:	88 0f       	add	r24, r24
    1f40:	99 1f       	adc	r25, r25
    1f42:	9c 01       	movw	r18, r24
    1f44:	22 0f       	add	r18, r18
    1f46:	33 1f       	adc	r19, r19
    1f48:	22 0f       	add	r18, r18
    1f4a:	33 1f       	adc	r19, r19
    1f4c:	82 0f       	add	r24, r18
    1f4e:	93 1f       	adc	r25, r19
    1f50:	48 9d       	mul	r20, r8
    1f52:	90 01       	movw	r18, r0
    1f54:	49 9d       	mul	r20, r9
    1f56:	30 0d       	add	r19, r0
    1f58:	58 9d       	mul	r21, r8
    1f5a:	30 0d       	add	r19, r0
    1f5c:	11 24       	eor	r1, r1
    1f5e:	82 0f       	add	r24, r18
    1f60:	93 1f       	adc	r25, r19
    1f62:	8a 0d       	add	r24, r10
    1f64:	9b 1d       	adc	r25, r11
    1f66:	dc 01       	movw	r26, r24
    1f68:	1c 96       	adiw	r26, 0x0c	; 12
    1f6a:	8d 91       	ld	r24, X+
    1f6c:	9c 91       	ld	r25, X
    1f6e:	1d 97       	sbiw	r26, 0x0d	; 13
    1f70:	82 30       	cpi	r24, 0x02	; 2
    1f72:	91 05       	cpc	r25, r1
    1f74:	51 f0       	breq	.+20     	; 0x1f8a <PointsLocator+0x118>
    1f76:	55 23       	and	r21, r21
    1f78:	44 f0       	brlt	.+16     	; 0x1f8a <PointsLocator+0x118>
    1f7a:	47 30       	cpi	r20, 0x07	; 7
    1f7c:	51 05       	cpc	r21, r1
    1f7e:	2c f4       	brge	.+10     	; 0x1f8a <PointsLocator+0x118>
    1f80:	77 23       	and	r23, r23
    1f82:	1c f0       	brlt	.+6      	; 0x1f8a <PointsLocator+0x118>
    1f84:	67 30       	cpi	r22, 0x07	; 7
    1f86:	71 05       	cpc	r23, r1
    1f88:	1c f0       	brlt	.+6      	; 0x1f90 <PointsLocator+0x11e>
         stop();
    1f8a:	0e 94 b4 02 	call	0x568	; 0x568 <stop>
    1f8e:	92 c0       	rjmp	.+292    	; 0x20b4 <PointsLocator+0x242>
         else
         {
             //in starting make every point traversed by bot 0 to reach the new node around tree
            // matrixInitialise(X[i],Y[i]);
             find_array_path( X[i],Y[i]);
    1f90:	ca 01       	movw	r24, r20
    1f92:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <find_array_path>
             data1=0x35;         //reset values of data1, data2, data3 to receive new value
             data2=0x35;
             data3=0x35;
             if(i==0)            //as plucking mechanism is toward right therefore set an angle with respect to each node
    1f96:	01 15       	cp	r16, r1
    1f98:	11 05       	cpc	r17, r1
    1f9a:	29 f4       	brne	.+10     	; 0x1fa6 <PointsLocator+0x134>
             setangle(0);
    1f9c:	80 e0       	ldi	r24, 0x00	; 0
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <setangle>
    1fa4:	10 c0       	rjmp	.+32     	; 0x1fc6 <PointsLocator+0x154>
             if(i==1)
    1fa6:	01 30       	cpi	r16, 0x01	; 1
    1fa8:	11 05       	cpc	r17, r1
    1faa:	29 f4       	brne	.+10     	; 0x1fb6 <PointsLocator+0x144>
             setangle(270);
    1fac:	8e e0       	ldi	r24, 0x0E	; 14
    1fae:	91 e0       	ldi	r25, 0x01	; 1
    1fb0:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <setangle>
    1fb4:	0f c0       	rjmp	.+30     	; 0x1fd4 <PointsLocator+0x162>
             if(i==2)
    1fb6:	02 30       	cpi	r16, 0x02	; 2
    1fb8:	11 05       	cpc	r17, r1
    1fba:	29 f4       	brne	.+10     	; 0x1fc6 <PointsLocator+0x154>
             setangle(180);
    1fbc:	84 eb       	ldi	r24, 0xB4	; 180
    1fbe:	90 e0       	ldi	r25, 0x00	; 0
    1fc0:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <setangle>
    1fc4:	07 c0       	rjmp	.+14     	; 0x1fd4 <PointsLocator+0x162>
             if(i==3)
    1fc6:	03 30       	cpi	r16, 0x03	; 3
    1fc8:	11 05       	cpc	r17, r1
    1fca:	21 f4       	brne	.+8      	; 0x1fd4 <PointsLocator+0x162>
             setangle(90);
    1fcc:	8a e5       	ldi	r24, 0x5A	; 90
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <setangle>
    1fd4:	8f ef       	ldi	r24, 0xFF	; 255
    1fd6:	9f e7       	ldi	r25, 0x7F	; 127
    1fd8:	a4 e0       	ldi	r26, 0x04	; 4
    1fda:	81 50       	subi	r24, 0x01	; 1
    1fdc:	90 40       	sbci	r25, 0x00	; 0
    1fde:	a0 40       	sbci	r26, 0x00	; 0
    1fe0:	e1 f7       	brne	.-8      	; 0x1fda <PointsLocator+0x168>
    1fe2:	00 c0       	rjmp	.+0      	; 0x1fe4 <PointsLocator+0x172>
    1fe4:	00 00       	nop
             _delay_ms(100);
             check_l();
    1fe6:	0e 94 59 04 	call	0x8b2	; 0x8b2 <check_l>
             buzzer_on();          //on buzzer indicating it reaches a node around tree
    1fea:	0e 94 62 03 	call	0x6c4	; 0x6c4 <buzzer_on>
    1fee:	8f ef       	ldi	r24, 0xFF	; 255
    1ff0:	9f e7       	ldi	r25, 0x7F	; 127
    1ff2:	a4 e0       	ldi	r26, 0x04	; 4
    1ff4:	81 50       	subi	r24, 0x01	; 1
    1ff6:	90 40       	sbci	r25, 0x00	; 0
    1ff8:	a0 40       	sbci	r26, 0x00	; 0
    1ffa:	e1 f7       	brne	.-8      	; 0x1ff4 <PointsLocator+0x182>
    1ffc:	00 c0       	rjmp	.+0      	; 0x1ffe <PointsLocator+0x18c>
    1ffe:	00 00       	nop
             _delay_ms(100);
             buzzer_off();
    2000:	0e 94 66 03 	call	0x6cc	; 0x6cc <buzzer_off>
             checkPhase1();       //first phase of robotic arm to check the fruit
    2004:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <checkPhase1>
             while(!(data1==0x39||data1==0x32||data1==0x37))
             {
                USART_Transmit(82); //send R to rasp pi to tell it that reaches the node from where the fruit has to plucked
    2008:	82 e5       	ldi	r24, 0x52	; 82
    200a:	0e 94 bc 03 	call	0x778	; 0x778 <USART_Transmit>
                data1= USART_Receive();
    200e:	0e 94 c9 03 	call	0x792	; 0x792 <USART_Receive>
             check_l();
             buzzer_on();          //on buzzer indicating it reaches a node around tree
             _delay_ms(100);
             buzzer_off();
             checkPhase1();       //first phase of robotic arm to check the fruit
             while(!(data1==0x39||data1==0x32||data1==0x37))
    2012:	89 33       	cpi	r24, 0x39	; 57
    2014:	31 f0       	breq	.+12     	; 0x2022 <PointsLocator+0x1b0>
    2016:	82 33       	cpi	r24, 0x32	; 50
    2018:	09 f4       	brne	.+2      	; 0x201c <PointsLocator+0x1aa>
    201a:	4c c0       	rjmp	.+152    	; 0x20b4 <PointsLocator+0x242>
    201c:	87 33       	cpi	r24, 0x37	; 55
    201e:	a1 f7       	brne	.-24     	; 0x2008 <PointsLocator+0x196>
    2020:	50 c0       	rjmp	.+160    	; 0x20c2 <PointsLocator+0x250>
             {
                USART_Transmit(82); //send R to rasp pi to tell it that reaches the node from where the fruit has to plucked
                data1= USART_Receive();
             }             
             if(data1==0x39)      //if fruit is found in first phase and has to be plucked then pluck function called
             {   servo_2(60);
    2022:	8c e3       	ldi	r24, 0x3C	; 60
    2024:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <servo_2>
    2028:	8f ef       	ldi	r24, 0xFF	; 255
    202a:	9f ef       	ldi	r25, 0xFF	; 255
    202c:	a8 e0       	ldi	r26, 0x08	; 8
    202e:	81 50       	subi	r24, 0x01	; 1
    2030:	90 40       	sbci	r25, 0x00	; 0
    2032:	a0 40       	sbci	r26, 0x00	; 0
    2034:	e1 f7       	brne	.-8      	; 0x202e <PointsLocator+0x1bc>
    2036:	00 c0       	rjmp	.+0      	; 0x2038 <PointsLocator+0x1c6>
    2038:	00 00       	nop
                 _delay_ms(200);
                 servo_1(96);
    203a:	80 e6       	ldi	r24, 0x60	; 96
    203c:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <servo_1>
    2040:	8f ef       	ldi	r24, 0xFF	; 255
    2042:	9f ef       	ldi	r25, 0xFF	; 255
    2044:	a8 e0       	ldi	r26, 0x08	; 8
    2046:	81 50       	subi	r24, 0x01	; 1
    2048:	90 40       	sbci	r25, 0x00	; 0
    204a:	a0 40       	sbci	r26, 0x00	; 0
    204c:	e1 f7       	brne	.-8      	; 0x2046 <PointsLocator+0x1d4>
    204e:	00 c0       	rjmp	.+0      	; 0x2050 <PointsLocator+0x1de>
    2050:	00 00       	nop
                 _delay_ms(200);
                 plck=1;
    2052:	70 92 64 06 	sts	0x0664, r7
    2056:	60 92 63 06 	sts	0x0663, r6
                 pluck();
    205a:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <pluck>
    205e:	2a c0       	rjmp	.+84     	; 0x20b4 <PointsLocator+0x242>
            else if(data1==0x37)               //else it checks at second and third phase respectively
            { 
                checkPhase2();
                while(!(data2==0x39||data2==0x32||data2==0x37))
                {
                    USART_Transmit(82); 
    2060:	82 e5       	ldi	r24, 0x52	; 82
    2062:	0e 94 bc 03 	call	0x778	; 0x778 <USART_Transmit>
                    data2= USART_Receive();
    2066:	0e 94 c9 03 	call	0x792	; 0x792 <USART_Receive>
                 
            }    
            else if(data1==0x37)               //else it checks at second and third phase respectively
            { 
                checkPhase2();
                while(!(data2==0x39||data2==0x32||data2==0x37))
    206a:	89 33       	cpi	r24, 0x39	; 57
    206c:	29 f0       	breq	.+10     	; 0x2078 <PointsLocator+0x206>
    206e:	82 33       	cpi	r24, 0x32	; 50
    2070:	09 f1       	breq	.+66     	; 0x20b4 <PointsLocator+0x242>
    2072:	87 33       	cpi	r24, 0x37	; 55
    2074:	a9 f7       	brne	.-22     	; 0x2060 <PointsLocator+0x1ee>
    2076:	1e c0       	rjmp	.+60     	; 0x20b4 <PointsLocator+0x242>
                    data2= USART_Receive();
                }
                if(data2==0x39)
                {
                    
                    servo_2(63);
    2078:	8f e3       	ldi	r24, 0x3F	; 63
    207a:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <servo_2>
    207e:	8f ef       	ldi	r24, 0xFF	; 255
    2080:	9f ef       	ldi	r25, 0xFF	; 255
    2082:	a8 e0       	ldi	r26, 0x08	; 8
    2084:	81 50       	subi	r24, 0x01	; 1
    2086:	90 40       	sbci	r25, 0x00	; 0
    2088:	a0 40       	sbci	r26, 0x00	; 0
    208a:	e1 f7       	brne	.-8      	; 0x2084 <PointsLocator+0x212>
    208c:	00 c0       	rjmp	.+0      	; 0x208e <PointsLocator+0x21c>
    208e:	00 00       	nop
                    _delay_ms(200);
                    servo_1(95);
    2090:	8f e5       	ldi	r24, 0x5F	; 95
    2092:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <servo_1>
    2096:	8f ef       	ldi	r24, 0xFF	; 255
    2098:	9f ef       	ldi	r25, 0xFF	; 255
    209a:	a8 e0       	ldi	r26, 0x08	; 8
    209c:	81 50       	subi	r24, 0x01	; 1
    209e:	90 40       	sbci	r25, 0x00	; 0
    20a0:	a0 40       	sbci	r26, 0x00	; 0
    20a2:	e1 f7       	brne	.-8      	; 0x209c <PointsLocator+0x22a>
    20a4:	00 c0       	rjmp	.+0      	; 0x20a6 <PointsLocator+0x234>
    20a6:	00 00       	nop
                    _delay_ms(200);
                    plck=2;
    20a8:	50 92 64 06 	sts	0x0664, r5
    20ac:	40 92 63 06 	sts	0x0663, r4
                    pluck();    
    20b0:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <pluck>
     char data1,data2,data3;
     X [0] = Fx - 1; Y [0] = Fy ;
     X [1] = Fx;     Y [1] = Fy + 1;
     X [2] = Fx + 1; Y [2] = Fy;
     X [3] = Fx;     Y [3] = Fy - 1;
     for (int i = 0; i <= 3; i++)
    20b4:	0f 5f       	subi	r16, 0xFF	; 255
    20b6:	1f 4f       	sbci	r17, 0xFF	; 255
    20b8:	04 30       	cpi	r16, 0x04	; 4
    20ba:	11 05       	cpc	r17, r1
    20bc:	09 f0       	breq	.+2      	; 0x20c0 <PointsLocator+0x24e>
    20be:	2b cf       	rjmp	.-426    	; 0x1f16 <PointsLocator+0xa4>
    20c0:	03 c0       	rjmp	.+6      	; 0x20c8 <PointsLocator+0x256>
                 pluck();
                 
            }    
            else if(data1==0x37)               //else it checks at second and third phase respectively
            { 
                checkPhase2();
    20c2:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <checkPhase2>
    20c6:	cc cf       	rjmp	.-104    	; 0x2060 <PointsLocator+0x1ee>
                }
    
            }
        }
    }         
 }
    20c8:	60 96       	adiw	r28, 0x10	; 16
    20ca:	0f b6       	in	r0, 0x3f	; 63
    20cc:	f8 94       	cli
    20ce:	de bf       	out	0x3e, r29	; 62
    20d0:	0f be       	out	0x3f, r0	; 63
    20d2:	cd bf       	out	0x3d, r28	; 61
    20d4:	df 91       	pop	r29
    20d6:	cf 91       	pop	r28
    20d8:	1f 91       	pop	r17
    20da:	0f 91       	pop	r16
    20dc:	ff 90       	pop	r15
    20de:	ef 90       	pop	r14
    20e0:	df 90       	pop	r13
    20e2:	cf 90       	pop	r12
    20e4:	bf 90       	pop	r11
    20e6:	af 90       	pop	r10
    20e8:	9f 90       	pop	r9
    20ea:	8f 90       	pop	r8
    20ec:	7f 90       	pop	r7
    20ee:	6f 90       	pop	r6
    20f0:	5f 90       	pop	r5
    20f2:	4f 90       	pop	r4
    20f4:	08 95       	ret

000020f6 <TreePosition>:
  * Output: Define the nodes on which trees are being placed and call point_locator to locate points around tree one by one
  * Example Call: TreePosition(3)
  */ 
 void TreePosition(int i)
 {
     Tx [0] = 2;Ty[0]=1; //apple fruit tree position
    20f6:	22 e0       	ldi	r18, 0x02	; 2
    20f8:	30 e0       	ldi	r19, 0x00	; 0
    20fa:	30 93 74 06 	sts	0x0674, r19
    20fe:	20 93 73 06 	sts	0x0673, r18
    2102:	41 e0       	ldi	r20, 0x01	; 1
    2104:	50 e0       	ldi	r21, 0x00	; 0
    2106:	50 93 5e 06 	sts	0x065E, r21
    210a:	40 93 5d 06 	sts	0x065D, r20
     Tx [1] = 1;Ty[1]=4; //blueberry fruit tree position
    210e:	50 93 76 06 	sts	0x0676, r21
    2112:	40 93 75 06 	sts	0x0675, r20
    2116:	44 e0       	ldi	r20, 0x04	; 4
    2118:	50 e0       	ldi	r21, 0x00	; 0
    211a:	50 93 60 06 	sts	0x0660, r21
    211e:	40 93 5f 06 	sts	0x065F, r20
     Tx [2] = 4;Ty[2]=2; //orange fruit tree position
    2122:	50 93 78 06 	sts	0x0678, r21
    2126:	40 93 77 06 	sts	0x0677, r20
    212a:	30 93 62 06 	sts	0x0662, r19
    212e:	20 93 61 06 	sts	0x0661, r18
     PointsLocator(Tx[i],Ty[i]);// calling points locator for tree;
    2132:	88 0f       	add	r24, r24
    2134:	99 1f       	adc	r25, r25
    2136:	fc 01       	movw	r30, r24
    2138:	ed 58       	subi	r30, 0x8D	; 141
    213a:	f9 4f       	sbci	r31, 0xF9	; 249
    213c:	83 5a       	subi	r24, 0xA3	; 163
    213e:	99 4f       	sbci	r25, 0xF9	; 249
    2140:	dc 01       	movw	r26, r24
    2142:	6d 91       	ld	r22, X+
    2144:	7c 91       	ld	r23, X
    2146:	80 81       	ld	r24, Z
    2148:	91 81       	ldd	r25, Z+1	; 0x01
    214a:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <PointsLocator>
 }
    214e:	08 95       	ret

00002150 <main>:
          deposition zone and sends E to rpi indicating work task has been complete
*/

int main(void)
{    float sVal,sVaR;
    init_devices();
    2150:	0e 94 15 04 	call	0x82a	; 0x82a <init_devices>
    lcd_set_4bit();
    2154:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_set_4bit>
    lcd_init();
    2158:	0e 94 fe 00 	call	0x1fc	; 0x1fc <lcd_init>
    unsigned char speedR;
    unsigned char speed;
	unsigned char servo_X;
	unsigned char servo_Y;
    speedL = 0;
    speedR=0;
    215c:	10 e0       	ldi	r17, 0x00	; 0
    unsigned char speedL;
    unsigned char speedR;
    unsigned char speed;
	unsigned char servo_X;
	unsigned char servo_Y;
    speedL = 0;
    215e:	d0 e0       	ldi	r29, 0x00	; 0
        //tempV = USART_Receive();
        forward();
        velocity(speedL,speedR);
		servo_1(servo_X);
		servo_2(servo_Y);
      }   
    2160:	ee 24       	eor	r14, r14
    while(1)
    {
        while(1)
        { unsigned char tempV;
            int i=0;
            tempV = USART_Receive();
    2162:	0e 94 c9 03 	call	0x792	; 0x792 <USART_Receive>
            if(tempV=='l')
    2166:	8c 36       	cpi	r24, 0x6C	; 108
    2168:	69 f0       	breq	.+26     	; 0x2184 <main+0x34>
            {    //instantAngle = atoi(check);
                speedL = speed;
                speed=0;
                break;
            }
            else if(tempV=='r')
    216a:	82 37       	cpi	r24, 0x72	; 114
    216c:	69 f0       	breq	.+26     	; 0x2188 <main+0x38>
            {    //instantAngle = atoi(check);
                speedR = speed;
                speed=0;
                break;
            }
			else if(tempV=='x')
    216e:	88 37       	cpi	r24, 0x78	; 120
    2170:	69 f0       	breq	.+26     	; 0x218c <main+0x3c>
			{    //instantAngle = atoi(check);
				servo_X = speed;
				speed=0;
				break;
			}
			else if(tempV=='y')
    2172:	89 37       	cpi	r24, 0x79	; 121
    2174:	69 f0       	breq	.+26     	; 0x2190 <main+0x40>
				servo_Y = speed;
				speed=0;
				break;
			}
            else
            {    speed = speed*10+ tempV;
    2176:	cc 0f       	add	r28, r28
    2178:	9c 2f       	mov	r25, r28
    217a:	99 0f       	add	r25, r25
    217c:	99 0f       	add	r25, r25
    217e:	c9 0f       	add	r28, r25
    2180:	c8 0f       	add	r28, r24
                check[i]= tempV;
                i++;
            }
        }
    2182:	ef cf       	rjmp	.-34     	; 0x2162 <main+0x12>
        { unsigned char tempV;
            int i=0;
            tempV = USART_Receive();
            if(tempV=='l')
            {    //instantAngle = atoi(check);
                speedL = speed;
    2184:	dc 2f       	mov	r29, r28
    2186:	05 c0       	rjmp	.+10     	; 0x2192 <main+0x42>
                speed=0;
                break;
            }
            else if(tempV=='r')
            {    //instantAngle = atoi(check);
                speedR = speed;
    2188:	1c 2f       	mov	r17, r28
    218a:	03 c0       	rjmp	.+6      	; 0x2192 <main+0x42>
                speed=0;
                break;
            }
			else if(tempV=='x')
			{    //instantAngle = atoi(check);
				servo_X = speed;
    218c:	0c 2f       	mov	r16, r28
    218e:	01 c0       	rjmp	.+2      	; 0x2192 <main+0x42>
				speed=0;
				break;
			}
			else if(tempV=='y')
			{    //instantAngle = atoi(check);
				servo_Y = speed;
    2190:	fc 2e       	mov	r15, r28
            }
        }
        
        //unsigned char tempV;
        //tempV = USART_Receive();
        forward();
    2192:	0e 94 a0 02 	call	0x540	; 0x540 <forward>
        velocity(speedL,speedR);
    2196:	8d 2f       	mov	r24, r29
    2198:	61 2f       	mov	r22, r17
    219a:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <velocity>
		servo_1(servo_X);
    219e:	80 2f       	mov	r24, r16
    21a0:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <servo_1>
		servo_2(servo_Y);
    21a4:	8f 2d       	mov	r24, r15
    21a6:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <servo_2>
      }   
    21aa:	ce 2d       	mov	r28, r14
    21ac:	da cf       	rjmp	.-76     	; 0x2162 <main+0x12>

000021ae <__subsf3>:
    21ae:	50 58       	subi	r21, 0x80	; 128

000021b0 <__addsf3>:
    21b0:	bb 27       	eor	r27, r27
    21b2:	aa 27       	eor	r26, r26
    21b4:	0e d0       	rcall	.+28     	; 0x21d2 <__addsf3x>
    21b6:	70 c1       	rjmp	.+736    	; 0x2498 <__fp_round>
    21b8:	61 d1       	rcall	.+706    	; 0x247c <__fp_pscA>
    21ba:	30 f0       	brcs	.+12     	; 0x21c8 <__addsf3+0x18>
    21bc:	66 d1       	rcall	.+716    	; 0x248a <__fp_pscB>
    21be:	20 f0       	brcs	.+8      	; 0x21c8 <__addsf3+0x18>
    21c0:	31 f4       	brne	.+12     	; 0x21ce <__addsf3+0x1e>
    21c2:	9f 3f       	cpi	r25, 0xFF	; 255
    21c4:	11 f4       	brne	.+4      	; 0x21ca <__addsf3+0x1a>
    21c6:	1e f4       	brtc	.+6      	; 0x21ce <__addsf3+0x1e>
    21c8:	56 c1       	rjmp	.+684    	; 0x2476 <__fp_nan>
    21ca:	0e f4       	brtc	.+2      	; 0x21ce <__addsf3+0x1e>
    21cc:	e0 95       	com	r30
    21ce:	e7 fb       	bst	r30, 7
    21d0:	4c c1       	rjmp	.+664    	; 0x246a <__fp_inf>

000021d2 <__addsf3x>:
    21d2:	e9 2f       	mov	r30, r25
    21d4:	72 d1       	rcall	.+740    	; 0x24ba <__fp_split3>
    21d6:	80 f3       	brcs	.-32     	; 0x21b8 <__addsf3+0x8>
    21d8:	ba 17       	cp	r27, r26
    21da:	62 07       	cpc	r22, r18
    21dc:	73 07       	cpc	r23, r19
    21de:	84 07       	cpc	r24, r20
    21e0:	95 07       	cpc	r25, r21
    21e2:	18 f0       	brcs	.+6      	; 0x21ea <__addsf3x+0x18>
    21e4:	71 f4       	brne	.+28     	; 0x2202 <__stack+0x3>
    21e6:	9e f5       	brtc	.+102    	; 0x224e <__stack+0x4f>
    21e8:	8a c1       	rjmp	.+788    	; 0x24fe <__fp_zero>
    21ea:	0e f4       	brtc	.+2      	; 0x21ee <__addsf3x+0x1c>
    21ec:	e0 95       	com	r30
    21ee:	0b 2e       	mov	r0, r27
    21f0:	ba 2f       	mov	r27, r26
    21f2:	a0 2d       	mov	r26, r0
    21f4:	0b 01       	movw	r0, r22
    21f6:	b9 01       	movw	r22, r18
    21f8:	90 01       	movw	r18, r0
    21fa:	0c 01       	movw	r0, r24
    21fc:	ca 01       	movw	r24, r20
    21fe:	a0 01       	movw	r20, r0
    2200:	11 24       	eor	r1, r1
    2202:	ff 27       	eor	r31, r31
    2204:	59 1b       	sub	r21, r25
    2206:	99 f0       	breq	.+38     	; 0x222e <__stack+0x2f>
    2208:	59 3f       	cpi	r21, 0xF9	; 249
    220a:	50 f4       	brcc	.+20     	; 0x2220 <__stack+0x21>
    220c:	50 3e       	cpi	r21, 0xE0	; 224
    220e:	68 f1       	brcs	.+90     	; 0x226a <__stack+0x6b>
    2210:	1a 16       	cp	r1, r26
    2212:	f0 40       	sbci	r31, 0x00	; 0
    2214:	a2 2f       	mov	r26, r18
    2216:	23 2f       	mov	r18, r19
    2218:	34 2f       	mov	r19, r20
    221a:	44 27       	eor	r20, r20
    221c:	58 5f       	subi	r21, 0xF8	; 248
    221e:	f3 cf       	rjmp	.-26     	; 0x2206 <__stack+0x7>
    2220:	46 95       	lsr	r20
    2222:	37 95       	ror	r19
    2224:	27 95       	ror	r18
    2226:	a7 95       	ror	r26
    2228:	f0 40       	sbci	r31, 0x00	; 0
    222a:	53 95       	inc	r21
    222c:	c9 f7       	brne	.-14     	; 0x2220 <__stack+0x21>
    222e:	7e f4       	brtc	.+30     	; 0x224e <__stack+0x4f>
    2230:	1f 16       	cp	r1, r31
    2232:	ba 0b       	sbc	r27, r26
    2234:	62 0b       	sbc	r22, r18
    2236:	73 0b       	sbc	r23, r19
    2238:	84 0b       	sbc	r24, r20
    223a:	ba f0       	brmi	.+46     	; 0x226a <__stack+0x6b>
    223c:	91 50       	subi	r25, 0x01	; 1
    223e:	a1 f0       	breq	.+40     	; 0x2268 <__stack+0x69>
    2240:	ff 0f       	add	r31, r31
    2242:	bb 1f       	adc	r27, r27
    2244:	66 1f       	adc	r22, r22
    2246:	77 1f       	adc	r23, r23
    2248:	88 1f       	adc	r24, r24
    224a:	c2 f7       	brpl	.-16     	; 0x223c <__stack+0x3d>
    224c:	0e c0       	rjmp	.+28     	; 0x226a <__stack+0x6b>
    224e:	ba 0f       	add	r27, r26
    2250:	62 1f       	adc	r22, r18
    2252:	73 1f       	adc	r23, r19
    2254:	84 1f       	adc	r24, r20
    2256:	48 f4       	brcc	.+18     	; 0x226a <__stack+0x6b>
    2258:	87 95       	ror	r24
    225a:	77 95       	ror	r23
    225c:	67 95       	ror	r22
    225e:	b7 95       	ror	r27
    2260:	f7 95       	ror	r31
    2262:	9e 3f       	cpi	r25, 0xFE	; 254
    2264:	08 f0       	brcs	.+2      	; 0x2268 <__stack+0x69>
    2266:	b3 cf       	rjmp	.-154    	; 0x21ce <__addsf3+0x1e>
    2268:	93 95       	inc	r25
    226a:	88 0f       	add	r24, r24
    226c:	08 f0       	brcs	.+2      	; 0x2270 <__stack+0x71>
    226e:	99 27       	eor	r25, r25
    2270:	ee 0f       	add	r30, r30
    2272:	97 95       	ror	r25
    2274:	87 95       	ror	r24
    2276:	08 95       	ret

00002278 <__cmpsf2>:
    2278:	d4 d0       	rcall	.+424    	; 0x2422 <__fp_cmp>
    227a:	08 f4       	brcc	.+2      	; 0x227e <__cmpsf2+0x6>
    227c:	81 e0       	ldi	r24, 0x01	; 1
    227e:	08 95       	ret

00002280 <__divsf3>:
    2280:	0c d0       	rcall	.+24     	; 0x229a <__divsf3x>
    2282:	0a c1       	rjmp	.+532    	; 0x2498 <__fp_round>
    2284:	02 d1       	rcall	.+516    	; 0x248a <__fp_pscB>
    2286:	40 f0       	brcs	.+16     	; 0x2298 <__divsf3+0x18>
    2288:	f9 d0       	rcall	.+498    	; 0x247c <__fp_pscA>
    228a:	30 f0       	brcs	.+12     	; 0x2298 <__divsf3+0x18>
    228c:	21 f4       	brne	.+8      	; 0x2296 <__divsf3+0x16>
    228e:	5f 3f       	cpi	r21, 0xFF	; 255
    2290:	19 f0       	breq	.+6      	; 0x2298 <__divsf3+0x18>
    2292:	eb c0       	rjmp	.+470    	; 0x246a <__fp_inf>
    2294:	51 11       	cpse	r21, r1
    2296:	34 c1       	rjmp	.+616    	; 0x2500 <__fp_szero>
    2298:	ee c0       	rjmp	.+476    	; 0x2476 <__fp_nan>

0000229a <__divsf3x>:
    229a:	0f d1       	rcall	.+542    	; 0x24ba <__fp_split3>
    229c:	98 f3       	brcs	.-26     	; 0x2284 <__divsf3+0x4>

0000229e <__divsf3_pse>:
    229e:	99 23       	and	r25, r25
    22a0:	c9 f3       	breq	.-14     	; 0x2294 <__divsf3+0x14>
    22a2:	55 23       	and	r21, r21
    22a4:	b1 f3       	breq	.-20     	; 0x2292 <__divsf3+0x12>
    22a6:	95 1b       	sub	r25, r21
    22a8:	55 0b       	sbc	r21, r21
    22aa:	bb 27       	eor	r27, r27
    22ac:	aa 27       	eor	r26, r26
    22ae:	62 17       	cp	r22, r18
    22b0:	73 07       	cpc	r23, r19
    22b2:	84 07       	cpc	r24, r20
    22b4:	38 f0       	brcs	.+14     	; 0x22c4 <__divsf3_pse+0x26>
    22b6:	9f 5f       	subi	r25, 0xFF	; 255
    22b8:	5f 4f       	sbci	r21, 0xFF	; 255
    22ba:	22 0f       	add	r18, r18
    22bc:	33 1f       	adc	r19, r19
    22be:	44 1f       	adc	r20, r20
    22c0:	aa 1f       	adc	r26, r26
    22c2:	a9 f3       	breq	.-22     	; 0x22ae <__divsf3_pse+0x10>
    22c4:	33 d0       	rcall	.+102    	; 0x232c <__divsf3_pse+0x8e>
    22c6:	0e 2e       	mov	r0, r30
    22c8:	3a f0       	brmi	.+14     	; 0x22d8 <__divsf3_pse+0x3a>
    22ca:	e0 e8       	ldi	r30, 0x80	; 128
    22cc:	30 d0       	rcall	.+96     	; 0x232e <__divsf3_pse+0x90>
    22ce:	91 50       	subi	r25, 0x01	; 1
    22d0:	50 40       	sbci	r21, 0x00	; 0
    22d2:	e6 95       	lsr	r30
    22d4:	00 1c       	adc	r0, r0
    22d6:	ca f7       	brpl	.-14     	; 0x22ca <__divsf3_pse+0x2c>
    22d8:	29 d0       	rcall	.+82     	; 0x232c <__divsf3_pse+0x8e>
    22da:	fe 2f       	mov	r31, r30
    22dc:	27 d0       	rcall	.+78     	; 0x232c <__divsf3_pse+0x8e>
    22de:	66 0f       	add	r22, r22
    22e0:	77 1f       	adc	r23, r23
    22e2:	88 1f       	adc	r24, r24
    22e4:	bb 1f       	adc	r27, r27
    22e6:	26 17       	cp	r18, r22
    22e8:	37 07       	cpc	r19, r23
    22ea:	48 07       	cpc	r20, r24
    22ec:	ab 07       	cpc	r26, r27
    22ee:	b0 e8       	ldi	r27, 0x80	; 128
    22f0:	09 f0       	breq	.+2      	; 0x22f4 <__divsf3_pse+0x56>
    22f2:	bb 0b       	sbc	r27, r27
    22f4:	80 2d       	mov	r24, r0
    22f6:	bf 01       	movw	r22, r30
    22f8:	ff 27       	eor	r31, r31
    22fa:	93 58       	subi	r25, 0x83	; 131
    22fc:	5f 4f       	sbci	r21, 0xFF	; 255
    22fe:	2a f0       	brmi	.+10     	; 0x230a <__divsf3_pse+0x6c>
    2300:	9e 3f       	cpi	r25, 0xFE	; 254
    2302:	51 05       	cpc	r21, r1
    2304:	68 f0       	brcs	.+26     	; 0x2320 <__divsf3_pse+0x82>
    2306:	b1 c0       	rjmp	.+354    	; 0x246a <__fp_inf>
    2308:	fb c0       	rjmp	.+502    	; 0x2500 <__fp_szero>
    230a:	5f 3f       	cpi	r21, 0xFF	; 255
    230c:	ec f3       	brlt	.-6      	; 0x2308 <__divsf3_pse+0x6a>
    230e:	98 3e       	cpi	r25, 0xE8	; 232
    2310:	dc f3       	brlt	.-10     	; 0x2308 <__divsf3_pse+0x6a>
    2312:	86 95       	lsr	r24
    2314:	77 95       	ror	r23
    2316:	67 95       	ror	r22
    2318:	b7 95       	ror	r27
    231a:	f7 95       	ror	r31
    231c:	9f 5f       	subi	r25, 0xFF	; 255
    231e:	c9 f7       	brne	.-14     	; 0x2312 <__divsf3_pse+0x74>
    2320:	88 0f       	add	r24, r24
    2322:	91 1d       	adc	r25, r1
    2324:	96 95       	lsr	r25
    2326:	87 95       	ror	r24
    2328:	97 f9       	bld	r25, 7
    232a:	08 95       	ret
    232c:	e1 e0       	ldi	r30, 0x01	; 1
    232e:	66 0f       	add	r22, r22
    2330:	77 1f       	adc	r23, r23
    2332:	88 1f       	adc	r24, r24
    2334:	bb 1f       	adc	r27, r27
    2336:	62 17       	cp	r22, r18
    2338:	73 07       	cpc	r23, r19
    233a:	84 07       	cpc	r24, r20
    233c:	ba 07       	cpc	r27, r26
    233e:	20 f0       	brcs	.+8      	; 0x2348 <__divsf3_pse+0xaa>
    2340:	62 1b       	sub	r22, r18
    2342:	73 0b       	sbc	r23, r19
    2344:	84 0b       	sbc	r24, r20
    2346:	ba 0b       	sbc	r27, r26
    2348:	ee 1f       	adc	r30, r30
    234a:	88 f7       	brcc	.-30     	; 0x232e <__divsf3_pse+0x90>
    234c:	e0 95       	com	r30
    234e:	08 95       	ret

00002350 <__fixunssfsi>:
    2350:	bc d0       	rcall	.+376    	; 0x24ca <__fp_splitA>
    2352:	88 f0       	brcs	.+34     	; 0x2376 <__fixunssfsi+0x26>
    2354:	9f 57       	subi	r25, 0x7F	; 127
    2356:	90 f0       	brcs	.+36     	; 0x237c <__fixunssfsi+0x2c>
    2358:	b9 2f       	mov	r27, r25
    235a:	99 27       	eor	r25, r25
    235c:	b7 51       	subi	r27, 0x17	; 23
    235e:	a0 f0       	brcs	.+40     	; 0x2388 <__fixunssfsi+0x38>
    2360:	d1 f0       	breq	.+52     	; 0x2396 <__fixunssfsi+0x46>
    2362:	66 0f       	add	r22, r22
    2364:	77 1f       	adc	r23, r23
    2366:	88 1f       	adc	r24, r24
    2368:	99 1f       	adc	r25, r25
    236a:	1a f0       	brmi	.+6      	; 0x2372 <__fixunssfsi+0x22>
    236c:	ba 95       	dec	r27
    236e:	c9 f7       	brne	.-14     	; 0x2362 <__fixunssfsi+0x12>
    2370:	12 c0       	rjmp	.+36     	; 0x2396 <__fixunssfsi+0x46>
    2372:	b1 30       	cpi	r27, 0x01	; 1
    2374:	81 f0       	breq	.+32     	; 0x2396 <__fixunssfsi+0x46>
    2376:	c3 d0       	rcall	.+390    	; 0x24fe <__fp_zero>
    2378:	b1 e0       	ldi	r27, 0x01	; 1
    237a:	08 95       	ret
    237c:	c0 c0       	rjmp	.+384    	; 0x24fe <__fp_zero>
    237e:	67 2f       	mov	r22, r23
    2380:	78 2f       	mov	r23, r24
    2382:	88 27       	eor	r24, r24
    2384:	b8 5f       	subi	r27, 0xF8	; 248
    2386:	39 f0       	breq	.+14     	; 0x2396 <__fixunssfsi+0x46>
    2388:	b9 3f       	cpi	r27, 0xF9	; 249
    238a:	cc f3       	brlt	.-14     	; 0x237e <__fixunssfsi+0x2e>
    238c:	86 95       	lsr	r24
    238e:	77 95       	ror	r23
    2390:	67 95       	ror	r22
    2392:	b3 95       	inc	r27
    2394:	d9 f7       	brne	.-10     	; 0x238c <__fixunssfsi+0x3c>
    2396:	3e f4       	brtc	.+14     	; 0x23a6 <__fixunssfsi+0x56>
    2398:	90 95       	com	r25
    239a:	80 95       	com	r24
    239c:	70 95       	com	r23
    239e:	61 95       	neg	r22
    23a0:	7f 4f       	sbci	r23, 0xFF	; 255
    23a2:	8f 4f       	sbci	r24, 0xFF	; 255
    23a4:	9f 4f       	sbci	r25, 0xFF	; 255
    23a6:	08 95       	ret

000023a8 <__floatunsisf>:
    23a8:	e8 94       	clt
    23aa:	09 c0       	rjmp	.+18     	; 0x23be <__floatsisf+0x12>

000023ac <__floatsisf>:
    23ac:	97 fb       	bst	r25, 7
    23ae:	3e f4       	brtc	.+14     	; 0x23be <__floatsisf+0x12>
    23b0:	90 95       	com	r25
    23b2:	80 95       	com	r24
    23b4:	70 95       	com	r23
    23b6:	61 95       	neg	r22
    23b8:	7f 4f       	sbci	r23, 0xFF	; 255
    23ba:	8f 4f       	sbci	r24, 0xFF	; 255
    23bc:	9f 4f       	sbci	r25, 0xFF	; 255
    23be:	99 23       	and	r25, r25
    23c0:	a9 f0       	breq	.+42     	; 0x23ec <__floatsisf+0x40>
    23c2:	f9 2f       	mov	r31, r25
    23c4:	96 e9       	ldi	r25, 0x96	; 150
    23c6:	bb 27       	eor	r27, r27
    23c8:	93 95       	inc	r25
    23ca:	f6 95       	lsr	r31
    23cc:	87 95       	ror	r24
    23ce:	77 95       	ror	r23
    23d0:	67 95       	ror	r22
    23d2:	b7 95       	ror	r27
    23d4:	f1 11       	cpse	r31, r1
    23d6:	f8 cf       	rjmp	.-16     	; 0x23c8 <__floatsisf+0x1c>
    23d8:	fa f4       	brpl	.+62     	; 0x2418 <__floatsisf+0x6c>
    23da:	bb 0f       	add	r27, r27
    23dc:	11 f4       	brne	.+4      	; 0x23e2 <__floatsisf+0x36>
    23de:	60 ff       	sbrs	r22, 0
    23e0:	1b c0       	rjmp	.+54     	; 0x2418 <__floatsisf+0x6c>
    23e2:	6f 5f       	subi	r22, 0xFF	; 255
    23e4:	7f 4f       	sbci	r23, 0xFF	; 255
    23e6:	8f 4f       	sbci	r24, 0xFF	; 255
    23e8:	9f 4f       	sbci	r25, 0xFF	; 255
    23ea:	16 c0       	rjmp	.+44     	; 0x2418 <__floatsisf+0x6c>
    23ec:	88 23       	and	r24, r24
    23ee:	11 f0       	breq	.+4      	; 0x23f4 <__floatsisf+0x48>
    23f0:	96 e9       	ldi	r25, 0x96	; 150
    23f2:	11 c0       	rjmp	.+34     	; 0x2416 <__floatsisf+0x6a>
    23f4:	77 23       	and	r23, r23
    23f6:	21 f0       	breq	.+8      	; 0x2400 <__floatsisf+0x54>
    23f8:	9e e8       	ldi	r25, 0x8E	; 142
    23fa:	87 2f       	mov	r24, r23
    23fc:	76 2f       	mov	r23, r22
    23fe:	05 c0       	rjmp	.+10     	; 0x240a <__floatsisf+0x5e>
    2400:	66 23       	and	r22, r22
    2402:	71 f0       	breq	.+28     	; 0x2420 <__floatsisf+0x74>
    2404:	96 e8       	ldi	r25, 0x86	; 134
    2406:	86 2f       	mov	r24, r22
    2408:	70 e0       	ldi	r23, 0x00	; 0
    240a:	60 e0       	ldi	r22, 0x00	; 0
    240c:	2a f0       	brmi	.+10     	; 0x2418 <__floatsisf+0x6c>
    240e:	9a 95       	dec	r25
    2410:	66 0f       	add	r22, r22
    2412:	77 1f       	adc	r23, r23
    2414:	88 1f       	adc	r24, r24
    2416:	da f7       	brpl	.-10     	; 0x240e <__floatsisf+0x62>
    2418:	88 0f       	add	r24, r24
    241a:	96 95       	lsr	r25
    241c:	87 95       	ror	r24
    241e:	97 f9       	bld	r25, 7
    2420:	08 95       	ret

00002422 <__fp_cmp>:
    2422:	99 0f       	add	r25, r25
    2424:	00 08       	sbc	r0, r0
    2426:	55 0f       	add	r21, r21
    2428:	aa 0b       	sbc	r26, r26
    242a:	e0 e8       	ldi	r30, 0x80	; 128
    242c:	fe ef       	ldi	r31, 0xFE	; 254
    242e:	16 16       	cp	r1, r22
    2430:	17 06       	cpc	r1, r23
    2432:	e8 07       	cpc	r30, r24
    2434:	f9 07       	cpc	r31, r25
    2436:	c0 f0       	brcs	.+48     	; 0x2468 <__fp_cmp+0x46>
    2438:	12 16       	cp	r1, r18
    243a:	13 06       	cpc	r1, r19
    243c:	e4 07       	cpc	r30, r20
    243e:	f5 07       	cpc	r31, r21
    2440:	98 f0       	brcs	.+38     	; 0x2468 <__fp_cmp+0x46>
    2442:	62 1b       	sub	r22, r18
    2444:	73 0b       	sbc	r23, r19
    2446:	84 0b       	sbc	r24, r20
    2448:	95 0b       	sbc	r25, r21
    244a:	39 f4       	brne	.+14     	; 0x245a <__fp_cmp+0x38>
    244c:	0a 26       	eor	r0, r26
    244e:	61 f0       	breq	.+24     	; 0x2468 <__fp_cmp+0x46>
    2450:	23 2b       	or	r18, r19
    2452:	24 2b       	or	r18, r20
    2454:	25 2b       	or	r18, r21
    2456:	21 f4       	brne	.+8      	; 0x2460 <__fp_cmp+0x3e>
    2458:	08 95       	ret
    245a:	0a 26       	eor	r0, r26
    245c:	09 f4       	brne	.+2      	; 0x2460 <__fp_cmp+0x3e>
    245e:	a1 40       	sbci	r26, 0x01	; 1
    2460:	a6 95       	lsr	r26
    2462:	8f ef       	ldi	r24, 0xFF	; 255
    2464:	81 1d       	adc	r24, r1
    2466:	81 1d       	adc	r24, r1
    2468:	08 95       	ret

0000246a <__fp_inf>:
    246a:	97 f9       	bld	r25, 7
    246c:	9f 67       	ori	r25, 0x7F	; 127
    246e:	80 e8       	ldi	r24, 0x80	; 128
    2470:	70 e0       	ldi	r23, 0x00	; 0
    2472:	60 e0       	ldi	r22, 0x00	; 0
    2474:	08 95       	ret

00002476 <__fp_nan>:
    2476:	9f ef       	ldi	r25, 0xFF	; 255
    2478:	80 ec       	ldi	r24, 0xC0	; 192
    247a:	08 95       	ret

0000247c <__fp_pscA>:
    247c:	00 24       	eor	r0, r0
    247e:	0a 94       	dec	r0
    2480:	16 16       	cp	r1, r22
    2482:	17 06       	cpc	r1, r23
    2484:	18 06       	cpc	r1, r24
    2486:	09 06       	cpc	r0, r25
    2488:	08 95       	ret

0000248a <__fp_pscB>:
    248a:	00 24       	eor	r0, r0
    248c:	0a 94       	dec	r0
    248e:	12 16       	cp	r1, r18
    2490:	13 06       	cpc	r1, r19
    2492:	14 06       	cpc	r1, r20
    2494:	05 06       	cpc	r0, r21
    2496:	08 95       	ret

00002498 <__fp_round>:
    2498:	09 2e       	mov	r0, r25
    249a:	03 94       	inc	r0
    249c:	00 0c       	add	r0, r0
    249e:	11 f4       	brne	.+4      	; 0x24a4 <__fp_round+0xc>
    24a0:	88 23       	and	r24, r24
    24a2:	52 f0       	brmi	.+20     	; 0x24b8 <__fp_round+0x20>
    24a4:	bb 0f       	add	r27, r27
    24a6:	40 f4       	brcc	.+16     	; 0x24b8 <__fp_round+0x20>
    24a8:	bf 2b       	or	r27, r31
    24aa:	11 f4       	brne	.+4      	; 0x24b0 <__fp_round+0x18>
    24ac:	60 ff       	sbrs	r22, 0
    24ae:	04 c0       	rjmp	.+8      	; 0x24b8 <__fp_round+0x20>
    24b0:	6f 5f       	subi	r22, 0xFF	; 255
    24b2:	7f 4f       	sbci	r23, 0xFF	; 255
    24b4:	8f 4f       	sbci	r24, 0xFF	; 255
    24b6:	9f 4f       	sbci	r25, 0xFF	; 255
    24b8:	08 95       	ret

000024ba <__fp_split3>:
    24ba:	57 fd       	sbrc	r21, 7
    24bc:	90 58       	subi	r25, 0x80	; 128
    24be:	44 0f       	add	r20, r20
    24c0:	55 1f       	adc	r21, r21
    24c2:	59 f0       	breq	.+22     	; 0x24da <__fp_splitA+0x10>
    24c4:	5f 3f       	cpi	r21, 0xFF	; 255
    24c6:	71 f0       	breq	.+28     	; 0x24e4 <__fp_splitA+0x1a>
    24c8:	47 95       	ror	r20

000024ca <__fp_splitA>:
    24ca:	88 0f       	add	r24, r24
    24cc:	97 fb       	bst	r25, 7
    24ce:	99 1f       	adc	r25, r25
    24d0:	61 f0       	breq	.+24     	; 0x24ea <__fp_splitA+0x20>
    24d2:	9f 3f       	cpi	r25, 0xFF	; 255
    24d4:	79 f0       	breq	.+30     	; 0x24f4 <__fp_splitA+0x2a>
    24d6:	87 95       	ror	r24
    24d8:	08 95       	ret
    24da:	12 16       	cp	r1, r18
    24dc:	13 06       	cpc	r1, r19
    24de:	14 06       	cpc	r1, r20
    24e0:	55 1f       	adc	r21, r21
    24e2:	f2 cf       	rjmp	.-28     	; 0x24c8 <__fp_split3+0xe>
    24e4:	46 95       	lsr	r20
    24e6:	f1 df       	rcall	.-30     	; 0x24ca <__fp_splitA>
    24e8:	08 c0       	rjmp	.+16     	; 0x24fa <__fp_splitA+0x30>
    24ea:	16 16       	cp	r1, r22
    24ec:	17 06       	cpc	r1, r23
    24ee:	18 06       	cpc	r1, r24
    24f0:	99 1f       	adc	r25, r25
    24f2:	f1 cf       	rjmp	.-30     	; 0x24d6 <__fp_splitA+0xc>
    24f4:	86 95       	lsr	r24
    24f6:	71 05       	cpc	r23, r1
    24f8:	61 05       	cpc	r22, r1
    24fa:	08 94       	sec
    24fc:	08 95       	ret

000024fe <__fp_zero>:
    24fe:	e8 94       	clt

00002500 <__fp_szero>:
    2500:	bb 27       	eor	r27, r27
    2502:	66 27       	eor	r22, r22
    2504:	77 27       	eor	r23, r23
    2506:	cb 01       	movw	r24, r22
    2508:	97 f9       	bld	r25, 7
    250a:	08 95       	ret

0000250c <__udivmodhi4>:
    250c:	aa 1b       	sub	r26, r26
    250e:	bb 1b       	sub	r27, r27
    2510:	51 e1       	ldi	r21, 0x11	; 17
    2512:	07 c0       	rjmp	.+14     	; 0x2522 <__udivmodhi4_ep>

00002514 <__udivmodhi4_loop>:
    2514:	aa 1f       	adc	r26, r26
    2516:	bb 1f       	adc	r27, r27
    2518:	a6 17       	cp	r26, r22
    251a:	b7 07       	cpc	r27, r23
    251c:	10 f0       	brcs	.+4      	; 0x2522 <__udivmodhi4_ep>
    251e:	a6 1b       	sub	r26, r22
    2520:	b7 0b       	sbc	r27, r23

00002522 <__udivmodhi4_ep>:
    2522:	88 1f       	adc	r24, r24
    2524:	99 1f       	adc	r25, r25
    2526:	5a 95       	dec	r21
    2528:	a9 f7       	brne	.-22     	; 0x2514 <__udivmodhi4_loop>
    252a:	80 95       	com	r24
    252c:	90 95       	com	r25
    252e:	bc 01       	movw	r22, r24
    2530:	cd 01       	movw	r24, r26
    2532:	08 95       	ret

00002534 <_exit>:
    2534:	f8 94       	cli

00002536 <__stop_program>:
    2536:	ff cf       	rjmp	.-2      	; 0x2536 <__stop_program>
